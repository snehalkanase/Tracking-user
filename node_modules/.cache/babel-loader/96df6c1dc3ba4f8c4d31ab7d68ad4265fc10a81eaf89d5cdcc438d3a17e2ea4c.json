{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { delay as _delay } from \"@azure/core-http\";\nimport { Poller } from \"@azure/core-lro\";\n/**\n * This is the poller returned by {@link BlobClient.beginCopyFromURL}.\n * This can not be instantiated directly outside of this package.\n *\n * @hidden\n */\nexport var BlobBeginCopyFromUrlPoller = /*#__PURE__*/function (_Poller) {\n  _inherits(BlobBeginCopyFromUrlPoller, _Poller);\n  var _super = _createSuper(BlobBeginCopyFromUrlPoller);\n  function BlobBeginCopyFromUrlPoller(options) {\n    var _this;\n    _classCallCheck(this, BlobBeginCopyFromUrlPoller);\n    var blobClient = options.blobClient,\n      copySource = options.copySource,\n      _options$intervalInMs = options.intervalInMs,\n      intervalInMs = _options$intervalInMs === void 0 ? 15000 : _options$intervalInMs,\n      onProgress = options.onProgress,\n      resumeFrom = options.resumeFrom,\n      startCopyFromURLOptions = options.startCopyFromURLOptions;\n    var state;\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n    var operation = makeBlobBeginCopyFromURLPollOperation(Object.assign(Object.assign({}, state), {\n      blobClient: blobClient,\n      copySource: copySource,\n      startCopyFromURLOptions: startCopyFromURLOptions\n    }));\n    _this = _super.call(this, operation);\n    if (typeof onProgress === \"function\") {\n      _this.onProgress(onProgress);\n    }\n    _this.intervalInMs = intervalInMs;\n    return _this;\n  }\n  _createClass(BlobBeginCopyFromUrlPoller, [{\n    key: \"delay\",\n    value: function delay() {\n      return _delay(this.intervalInMs);\n    }\n  }]);\n  return BlobBeginCopyFromUrlPoller;\n}(Poller);\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nvar cancel = /*#__PURE__*/function () {\n  var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var options,\n      state,\n      copyId,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n          state = this.state;\n          copyId = state.copyId;\n          if (!state.isCompleted) {\n            _context.next = 5;\n            break;\n          }\n          return _context.abrupt(\"return\", makeBlobBeginCopyFromURLPollOperation(state));\n        case 5:\n          if (copyId) {\n            _context.next = 8;\n            break;\n          }\n          state.isCancelled = true;\n          return _context.abrupt(\"return\", makeBlobBeginCopyFromURLPollOperation(state));\n        case 8:\n          _context.next = 10;\n          return state.blobClient.abortCopyFromURL(copyId, {\n            abortSignal: options.abortSignal\n          });\n        case 10:\n          state.isCancelled = true;\n          return _context.abrupt(\"return\", makeBlobBeginCopyFromURLPollOperation(state));\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, this);\n  }));\n  function cancel() {\n    return _cancel.apply(this, arguments);\n  }\n  return cancel;\n}();\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nvar update = /*#__PURE__*/function () {\n  var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var options,\n      state,\n      blobClient,\n      copySource,\n      startCopyFromURLOptions,\n      result,\n      _result,\n      copyStatus,\n      copyProgress,\n      prevCopyProgress,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n          state = this.state;\n          blobClient = state.blobClient, copySource = state.copySource, startCopyFromURLOptions = state.startCopyFromURLOptions;\n          if (state.isStarted) {\n            _context2.next = 12;\n            break;\n          }\n          state.isStarted = true;\n          _context2.next = 7;\n          return blobClient.startCopyFromURL(copySource, startCopyFromURLOptions);\n        case 7:\n          result = _context2.sent;\n          // copyId is needed to abort\n          state.copyId = result.copyId;\n          if (result.copyStatus === \"success\") {\n            state.result = result;\n            state.isCompleted = true;\n          }\n          _context2.next = 27;\n          break;\n        case 12:\n          if (state.isCompleted) {\n            _context2.next = 27;\n            break;\n          }\n          _context2.prev = 13;\n          _context2.next = 16;\n          return state.blobClient.getProperties({\n            abortSignal: options.abortSignal\n          });\n        case 16:\n          _result = _context2.sent;\n          copyStatus = _result.copyStatus, copyProgress = _result.copyProgress;\n          prevCopyProgress = state.copyProgress;\n          if (copyProgress) {\n            state.copyProgress = copyProgress;\n          }\n          if (copyStatus === \"pending\" && copyProgress !== prevCopyProgress && typeof options.fireProgress === \"function\") {\n            // trigger in setTimeout, or swallow error?\n            options.fireProgress(state);\n          } else if (copyStatus === \"success\") {\n            state.result = _result;\n            state.isCompleted = true;\n          } else if (copyStatus === \"failed\") {\n            state.error = new Error(\"Blob copy failed with reason: \\\"\".concat(_result.copyStatusDescription || \"unknown\", \"\\\"\"));\n            state.isCompleted = true;\n          }\n          _context2.next = 27;\n          break;\n        case 23:\n          _context2.prev = 23;\n          _context2.t0 = _context2[\"catch\"](13);\n          state.error = _context2.t0;\n          state.isCompleted = true;\n        case 27:\n          return _context2.abrupt(\"return\", makeBlobBeginCopyFromURLPollOperation(state));\n        case 28:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, this, [[13, 23]]);\n  }));\n  function update() {\n    return _update.apply(this, arguments);\n  }\n  return update;\n}();\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nvar toString = function toString() {\n  return JSON.stringify({\n    state: this.state\n  }, function (key, value) {\n    // remove blobClient from serialized state since a client can't be hydrated from this info.\n    if (key === \"blobClient\") {\n      return undefined;\n    }\n    return value;\n  });\n};\n/**\n * Creates a poll operation given the provided state.\n * @hidden\n */\nfunction makeBlobBeginCopyFromURLPollOperation(state) {\n  return {\n    state: Object.assign({}, state),\n    cancel: cancel,\n    toString: toString,\n    update: update\n  };\n}","map":{"version":3,"names":["delay","Poller","BlobBeginCopyFromUrlPoller","_Poller","_inherits","_super","_createSuper","options","_this","_classCallCheck","blobClient","copySource","_options$intervalInMs","intervalInMs","onProgress","resumeFrom","startCopyFromURLOptions","state","JSON","parse","operation","makeBlobBeginCopyFromURLPollOperation","Object","assign","call","_createClass","key","value","cancel","_cancel","_asyncToGenerator","_regeneratorRuntime","mark","_callee","copyId","_args","arguments","wrap","_callee$","_context","prev","next","length","undefined","isCompleted","abrupt","isCancelled","abortCopyFromURL","abortSignal","stop","apply","update","_update","_callee2","result","_result","copyStatus","copyProgress","prevCopyProgress","_args2","_callee2$","_context2","isStarted","startCopyFromURL","sent","getProperties","fireProgress","error","Error","concat","copyStatusDescription","t0","toString","stringify"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\pollers\\BlobStartCopyFromUrlPoller.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay } from \"@azure/core-http\";\nimport { PollOperation, PollOperationState, Poller } from \"@azure/core-lro\";\nimport { BlobClient, BlobStartCopyFromURLOptions, BlobBeginCopyFromURLResponse } from \"../Clients\";\n\n/**\n * Defines the operations from a {@link BlobClient} that are needed for the poller\n * returned by {@link BlobClient.beginCopyFromURL} to work.\n */\nexport type CopyPollerBlobClient = Pick<BlobClient, \"abortCopyFromURL\" | \"getProperties\"> & {\n  startCopyFromURL(\n    copySource: string,\n    options?: BlobStartCopyFromURLOptions\n  ): Promise<BlobBeginCopyFromURLResponse>;\n};\n\n/**\n * The state used by the poller returned from {@link BlobClient.beginCopyFromURL}.\n *\n * This state is passed into the user-specified `onProgress` callback\n * whenever copy progress is detected.\n */\nexport interface BlobBeginCopyFromUrlPollState\n  extends PollOperationState<BlobBeginCopyFromURLResponse> {\n  /**\n   * The instance of {@link BlobClient} that was used when calling {@link BlobClient.beginCopyFromURL}.\n   */\n  readonly blobClient: CopyPollerBlobClient;\n  /**\n   * The copyId that identifies the in-progress blob copy.\n   */\n  copyId?: string;\n  /**\n   * the progress of the blob copy as reported by the service.\n   */\n  copyProgress?: string;\n  /**\n   * The source URL provided in {@link BlobClient.beginCopyFromURL}.\n   */\n  copySource: string;\n  /**\n   * The options that were passed to the initial {@link BlobClient.beginCopyFromURL} call.\n   * This is exposed for the poller and should not be modified directly.\n   */\n  readonly startCopyFromURLOptions?: BlobStartCopyFromURLOptions;\n}\n\n/**\n * The PollOperation responsible for:\n *  - performing the initial startCopyFromURL\n *  - checking the copy status via getProperties\n *  - cancellation via abortCopyFromURL\n * @hidden\n */\nexport interface BlobBeginCopyFromURLPollOperation\n  extends PollOperation<BlobBeginCopyFromUrlPollState, BlobBeginCopyFromURLResponse> {}\n\n/**\n * The set of options used to configure the poller.\n * This is an internal interface populated by {@link BlobClient.beginCopyFromURL}.\n *\n * @hidden\n */\nexport interface BlobBeginCopyFromUrlPollerOptions {\n  blobClient: CopyPollerBlobClient;\n  copySource: string;\n  intervalInMs?: number;\n  onProgress?: (state: BlobBeginCopyFromUrlPollState) => void;\n  resumeFrom?: string;\n  startCopyFromURLOptions?: BlobStartCopyFromURLOptions;\n}\n\n/**\n * This is the poller returned by {@link BlobClient.beginCopyFromURL}.\n * This can not be instantiated directly outside of this package.\n *\n * @hidden\n */\nexport class BlobBeginCopyFromUrlPoller extends Poller<\n  BlobBeginCopyFromUrlPollState,\n  BlobBeginCopyFromURLResponse\n> {\n  public intervalInMs: number;\n\n  constructor(options: BlobBeginCopyFromUrlPollerOptions) {\n    const {\n      blobClient,\n      copySource,\n      intervalInMs = 15000,\n      onProgress,\n      resumeFrom,\n      startCopyFromURLOptions,\n    } = options;\n\n    let state: BlobBeginCopyFromUrlPollState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeBlobBeginCopyFromURLPollOperation({\n      ...state,\n      blobClient,\n      copySource,\n      startCopyFromURLOptions,\n    });\n\n    super(operation);\n\n    if (typeof onProgress === \"function\") {\n      this.onProgress(onProgress);\n    }\n\n    this.intervalInMs = intervalInMs;\n  }\n\n  public delay(): Promise<void> {\n    return delay(this.intervalInMs);\n  }\n}\n\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst cancel: BlobBeginCopyFromURLPollOperation[\"cancel\"] = async function cancel(\n  this: BlobBeginCopyFromURLPollOperation,\n  options = {}\n) {\n  const state = this.state;\n  const { copyId } = state;\n  if (state.isCompleted) {\n    return makeBlobBeginCopyFromURLPollOperation(state);\n  }\n\n  if (!copyId) {\n    state.isCancelled = true;\n    return makeBlobBeginCopyFromURLPollOperation(state);\n  }\n\n  // if abortCopyFromURL throws, it will bubble up to user's poller.cancelOperation call\n  await state.blobClient.abortCopyFromURL(copyId, {\n    abortSignal: options.abortSignal,\n  });\n  state.isCancelled = true;\n\n  return makeBlobBeginCopyFromURLPollOperation(state);\n};\n\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst update: BlobBeginCopyFromURLPollOperation[\"update\"] = async function update(\n  this: BlobBeginCopyFromURLPollOperation,\n  options = {}\n): Promise<BlobBeginCopyFromURLPollOperation> {\n  const state = this.state;\n  const { blobClient, copySource, startCopyFromURLOptions } = state;\n\n  if (!state.isStarted) {\n    state.isStarted = true;\n    const result = await blobClient.startCopyFromURL(copySource, startCopyFromURLOptions);\n\n    // copyId is needed to abort\n    state.copyId = result.copyId;\n    if (result.copyStatus === \"success\") {\n      state.result = result;\n      state.isCompleted = true;\n    }\n  } else if (!state.isCompleted) {\n    try {\n      const result = await state.blobClient.getProperties({ abortSignal: options.abortSignal });\n      const { copyStatus, copyProgress } = result;\n      const prevCopyProgress = state.copyProgress;\n      if (copyProgress) {\n        state.copyProgress = copyProgress;\n      }\n      if (\n        copyStatus === \"pending\" &&\n        copyProgress !== prevCopyProgress &&\n        typeof options.fireProgress === \"function\"\n      ) {\n        // trigger in setTimeout, or swallow error?\n        options.fireProgress(state);\n      } else if (copyStatus === \"success\") {\n        state.result = result;\n        state.isCompleted = true;\n      } else if (copyStatus === \"failed\") {\n        state.error = new Error(\n          `Blob copy failed with reason: \"${result.copyStatusDescription || \"unknown\"}\"`\n        );\n        state.isCompleted = true;\n      }\n    } catch (err: any) {\n      state.error = err;\n      state.isCompleted = true;\n    }\n  }\n\n  return makeBlobBeginCopyFromURLPollOperation(state);\n};\n\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst toString: BlobBeginCopyFromURLPollOperation[\"toString\"] = function toString(\n  this: BlobBeginCopyFromURLPollOperation\n) {\n  return JSON.stringify({ state: this.state }, (key, value) => {\n    // remove blobClient from serialized state since a client can't be hydrated from this info.\n    if (key === \"blobClient\") {\n      return undefined;\n    }\n    return value;\n  });\n};\n\n/**\n * Creates a poll operation given the provided state.\n * @hidden\n */\nfunction makeBlobBeginCopyFromURLPollOperation(\n  state: BlobBeginCopyFromUrlPollState\n): BlobBeginCopyFromURLPollOperation {\n  return {\n    state: { ...state },\n    cancel,\n    toString,\n    update,\n  };\n}\n"],"mappings":";;;;;;AAAA;AACA;AAEA,SAASA,KAAK,IAALA,MAAK,QAAQ,kBAAkB;AACxC,SAA4CC,MAAM,QAAQ,iBAAiB;AAsE3E;;;;;;AAMA,WAAaC,0BAA2B,0BAAAC,OAAA;EAAAC,SAAA,CAAAF,0BAAA,EAAAC,OAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,0BAAA;EAMtC,SAAAA,2BAAYK,OAA0C;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,0BAAA;IACpD,IACEQ,UAAU,GAMRH,OAAO,CANTG,UAAU;MACVC,UAAU,GAKRJ,OAAO,CALTI,UAAU;MAAAC,qBAAA,GAKRL,OAAO,CAJTM,YAAY;MAAZA,YAAY,GAAAD,qBAAA,cAAG,KAAK,GAAAA,qBAAA;MACpBE,UAAU,GAGRP,OAAO,CAHTO,UAAU;MACVC,UAAU,GAERR,OAAO,CAFTQ,UAAU;MACVC,uBAAuB,GACrBT,OAAO,CADTS,uBAAuB;IAGzB,IAAIC,KAAgD;IAEpD,IAAIF,UAAU,EAAE;MACdE,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAACE,KAAK;;IAGtC,IAAMG,SAAS,GAAGC,qCAAqC,CAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAClDN,KAAK;MACRP,UAAU,EAAVA,UAAU;MACVC,UAAU,EAAVA,UAAU;MACVK,uBAAuB,EAAvBA;IAAuB,GACvB;IAEFR,KAAA,GAAAH,MAAA,CAAAmB,IAAA,OAAMJ,SAAS;IAEf,IAAI,OAAON,UAAU,KAAK,UAAU,EAAE;MACpCN,KAAA,CAAKM,UAAU,CAACA,UAAU,CAAC;;IAG7BN,KAAA,CAAKK,YAAY,GAAGA,YAAY;IAAC,OAAAL,KAAA;EACnC;EAACiB,YAAA,CAAAvB,0BAAA;IAAAwB,GAAA;IAAAC,KAAA,EAEM,SAAA3B,MAAA,EAAK;MACV,OAAOA,MAAK,CAAC,IAAI,CAACa,YAAY,CAAC;IACjC;EAAC;EAAA,OAAAX,0BAAA;AAAA,EAxC6CD,MAG/C;AAwCD;;;;;;AAMA,IAAM2B,MAAM;EAAA,IAAAC,OAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAgD,SAAAC,QAAA;IAAA,IAAA1B,OAAA;MAAAU,KAAA;MAAAiB,MAAA;MAAAC,KAAA,GAAAC,SAAA;IAAA,OAAAL,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAE1DlC,OAAO,GAAA4B,KAAA,CAAAO,MAAA,QAAAP,KAAA,QAAAQ,SAAA,GAAAR,KAAA,MAAG,EAAE;UAENlB,KAAK,GAAG,IAAI,CAACA,KAAK;UAChBiB,MAAM,GAAKjB,KAAK,CAAhBiB,MAAM;UAAA,KACVjB,KAAK,CAAC2B,WAAW;YAAAL,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAM,MAAA,WACZxB,qCAAqC,CAACJ,KAAK,CAAC;QAAA;UAAA,IAGhDiB,MAAM;YAAAK,QAAA,CAAAE,IAAA;YAAA;UAAA;UACTxB,KAAK,CAAC6B,WAAW,GAAG,IAAI;UAAC,OAAAP,QAAA,CAAAM,MAAA,WAClBxB,qCAAqC,CAACJ,KAAK,CAAC;QAAA;UAAAsB,QAAA,CAAAE,IAAA;UAAA,OAI/CxB,KAAK,CAACP,UAAU,CAACqC,gBAAgB,CAACb,MAAM,EAAE;YAC9Cc,WAAW,EAAEzC,OAAO,CAACyC;WACtB,CAAC;QAAA;UACF/B,KAAK,CAAC6B,WAAW,GAAG,IAAI;UAAC,OAAAP,QAAA,CAAAM,MAAA,WAElBxB,qCAAqC,CAACJ,KAAK,CAAC;QAAA;QAAA;UAAA,OAAAsB,QAAA,CAAAU,IAAA;MAAA;IAAA,GAAAhB,OAAA;EAAA,CACpD;EAAA,SAtB0EL,MAAMA,CAAA;IAAA,OAAAC,OAAA,CAAAqB,KAAA,OAAAd,SAAA;EAAA;EAAA,OAANR,MAAM;AAAA,GAsBhF;AAED;;;;;;AAMA,IAAMuB,MAAM;EAAA,IAAAC,OAAA,GAAAtB,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAgD,SAAAqB,SAAA;IAAA,IAAA9C,OAAA;MAAAU,KAAA;MAAAP,UAAA;MAAAC,UAAA;MAAAK,uBAAA;MAAAsC,MAAA;MAAAC,OAAA;MAAAC,UAAA;MAAAC,YAAA;MAAAC,gBAAA;MAAAC,MAAA,GAAAvB,SAAA;IAAA,OAAAL,mBAAA,GAAAM,IAAA,UAAAuB,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAArB,IAAA,GAAAqB,SAAA,CAAApB,IAAA;QAAA;UAE1DlC,OAAO,GAAAoD,MAAA,CAAAjB,MAAA,QAAAiB,MAAA,QAAAhB,SAAA,GAAAgB,MAAA,MAAG,EAAE;UAEN1C,KAAK,GAAG,IAAI,CAACA,KAAK;UAChBP,UAAU,GAA0CO,KAAK,CAAzDP,UAAU,EAAEC,UAAU,GAA8BM,KAAK,CAA7CN,UAAU,EAAEK,uBAAuB,GAAKC,KAAK,CAAjCD,uBAAuB;UAAA,IAElDC,KAAK,CAAC6C,SAAS;YAAAD,SAAA,CAAApB,IAAA;YAAA;UAAA;UAClBxB,KAAK,CAAC6C,SAAS,GAAG,IAAI;UAACD,SAAA,CAAApB,IAAA;UAAA,OACF/B,UAAU,CAACqD,gBAAgB,CAACpD,UAAU,EAAEK,uBAAuB,CAAC;QAAA;UAA/EsC,MAAM,GAAAO,SAAA,CAAAG,IAAA;UAEZ;UACA/C,KAAK,CAACiB,MAAM,GAAGoB,MAAM,CAACpB,MAAM;UAC5B,IAAIoB,MAAM,CAACE,UAAU,KAAK,SAAS,EAAE;YACnCvC,KAAK,CAACqC,MAAM,GAAGA,MAAM;YACrBrC,KAAK,CAAC2B,WAAW,GAAG,IAAI;;UACzBiB,SAAA,CAAApB,IAAA;UAAA;QAAA;UAAA,IACSxB,KAAK,CAAC2B,WAAW;YAAAiB,SAAA,CAAApB,IAAA;YAAA;UAAA;UAAAoB,SAAA,CAAArB,IAAA;UAAAqB,SAAA,CAAApB,IAAA;UAAA,OAEJxB,KAAK,CAACP,UAAU,CAACuD,aAAa,CAAC;YAAEjB,WAAW,EAAEzC,OAAO,CAACyC;UAAW,CAAE,CAAC;QAAA;UAAnFM,OAAM,GAAAO,SAAA,CAAAG,IAAA;UACJR,UAAU,GAAmBF,OAAM,CAAnCE,UAAU,EAAEC,YAAY,GAAKH,OAAM,CAAvBG,YAAY;UAC1BC,gBAAgB,GAAGzC,KAAK,CAACwC,YAAY;UAC3C,IAAIA,YAAY,EAAE;YAChBxC,KAAK,CAACwC,YAAY,GAAGA,YAAY;;UAEnC,IACED,UAAU,KAAK,SAAS,IACxBC,YAAY,KAAKC,gBAAgB,IACjC,OAAOnD,OAAO,CAAC2D,YAAY,KAAK,UAAU,EAC1C;YACA;YACA3D,OAAO,CAAC2D,YAAY,CAACjD,KAAK,CAAC;WAC5B,MAAM,IAAIuC,UAAU,KAAK,SAAS,EAAE;YACnCvC,KAAK,CAACqC,MAAM,GAAGA,OAAM;YACrBrC,KAAK,CAAC2B,WAAW,GAAG,IAAI;WACzB,MAAM,IAAIY,UAAU,KAAK,QAAQ,EAAE;YAClCvC,KAAK,CAACkD,KAAK,GAAG,IAAIC,KAAK,oCAAAC,MAAA,CACaf,OAAM,CAACgB,qBAAqB,IAAI,SAAS,OAAG,CAC/E;YACDrD,KAAK,CAAC2B,WAAW,GAAG,IAAI;;UACzBiB,SAAA,CAAApB,IAAA;UAAA;QAAA;UAAAoB,SAAA,CAAArB,IAAA;UAAAqB,SAAA,CAAAU,EAAA,GAAAV,SAAA;UAED5C,KAAK,CAACkD,KAAK,GAAAN,SAAA,CAAAU,EAAM;UACjBtD,KAAK,CAAC2B,WAAW,GAAG,IAAI;QAAC;UAAA,OAAAiB,SAAA,CAAAhB,MAAA,WAItBxB,qCAAqC,CAACJ,KAAK,CAAC;QAAA;QAAA;UAAA,OAAA4C,SAAA,CAAAZ,IAAA;MAAA;IAAA,GAAAI,QAAA;EAAA,CACpD;EAAA,SAhD0EF,MAAMA,CAAA;IAAA,OAAAC,OAAA,CAAAF,KAAA,OAAAd,SAAA;EAAA;EAAA,OAANe,MAAM;AAAA,GAgDhF;AAED;;;;;;AAMA,IAAMqB,QAAQ,GAAkD,SAASA,QAAQA,CAAA;EAG/E,OAAOtD,IAAI,CAACuD,SAAS,CAAC;IAAExD,KAAK,EAAE,IAAI,CAACA;EAAK,CAAE,EAAE,UAACS,GAAG,EAAEC,KAAK,EAAI;IAC1D;IACA,IAAID,GAAG,KAAK,YAAY,EAAE;MACxB,OAAOiB,SAAS;;IAElB,OAAOhB,KAAK;EACd,CAAC,CAAC;AACJ,CAAC;AAED;;;;AAIA,SAASN,qCAAqCA,CAC5CJ,KAAoC;EAEpC,OAAO;IACLA,KAAK,EAAAK,MAAA,CAAAC,MAAA,KAAON,KAAK,CAAE;IACnBW,MAAM,EAANA,MAAM;IACN4C,QAAQ,EAARA,QAAQ;IACRrB,MAAM,EAANA;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}