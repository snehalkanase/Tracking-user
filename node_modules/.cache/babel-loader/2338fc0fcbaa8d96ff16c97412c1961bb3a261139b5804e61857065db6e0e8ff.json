{"ast":null,"code":"import _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport * as base64 from \"../util/base64\";\nimport { Constants } from \"../util/constants\";\nimport { HttpHeaders } from \"../httpHeaders\";\nvar HeaderConstants = Constants.HeaderConstants;\nvar DEFAULT_AUTHORIZATION_SCHEME = \"Basic\";\n/**\n * A simple {@link ServiceClientCredential} that authenticates with a username and a password.\n */\nexport var BasicAuthenticationCredentials = /*#__PURE__*/function () {\n  /**\n   * Creates a new BasicAuthenticationCredentials object.\n   *\n   * @param userName - User name.\n   * @param password - Password.\n   * @param authorizationScheme - The authorization scheme.\n   */\n  function BasicAuthenticationCredentials(userName, password) {\n    var authorizationScheme = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_AUTHORIZATION_SCHEME;\n    _classCallCheck(this, BasicAuthenticationCredentials);\n    /**\n     * Authorization scheme. Defaults to \"Basic\".\n     * More information about authorization schemes is available here: https://developer.mozilla.org/docs/Web/HTTP/Authentication#authentication_schemes\n     */\n    this.authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;\n    if (userName === null || userName === undefined || typeof userName.valueOf() !== \"string\") {\n      throw new Error(\"userName cannot be null or undefined and must be of type string.\");\n    }\n    if (password === null || password === undefined || typeof password.valueOf() !== \"string\") {\n      throw new Error(\"password cannot be null or undefined and must be of type string.\");\n    }\n    this.userName = userName;\n    this.password = password;\n    this.authorizationScheme = authorizationScheme;\n  }\n  /**\n   * Signs a request with the Authentication header.\n   *\n   * @param webResource - The WebResourceLike to be signed.\n   * @returns The signed request object.\n   */\n  _createClass(BasicAuthenticationCredentials, [{\n    key: \"signRequest\",\n    value: function signRequest(webResource) {\n      var credentials = \"\".concat(this.userName, \":\").concat(this.password);\n      var encodedCredentials = \"\".concat(this.authorizationScheme, \" \").concat(base64.encodeString(credentials));\n      if (!webResource.headers) webResource.headers = new HttpHeaders();\n      webResource.headers.set(HeaderConstants.AUTHORIZATION, encodedCredentials);\n      return Promise.resolve(webResource);\n    }\n  }]);\n  return BasicAuthenticationCredentials;\n}();","map":{"version":3,"names":["base64","Constants","HttpHeaders","HeaderConstants","DEFAULT_AUTHORIZATION_SCHEME","BasicAuthenticationCredentials","userName","password","authorizationScheme","arguments","length","undefined","_classCallCheck","valueOf","Error","_createClass","key","value","signRequest","webResource","credentials","concat","encodedCredentials","encodeString","headers","set","AUTHORIZATION","Promise","resolve"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\credentials\\basicAuthenticationCredentials.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as base64 from \"../util/base64\";\nimport { Constants } from \"../util/constants\";\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { ServiceClientCredentials } from \"./serviceClientCredentials\";\nimport { WebResourceLike } from \"../webResource\";\n\nconst HeaderConstants = Constants.HeaderConstants;\nconst DEFAULT_AUTHORIZATION_SCHEME = \"Basic\";\n\n/**\n * A simple {@link ServiceClientCredential} that authenticates with a username and a password.\n */\nexport class BasicAuthenticationCredentials implements ServiceClientCredentials {\n  /**\n   * Username\n   */\n  userName: string;\n\n  /**\n   * Password\n   */\n  password: string;\n\n  /**\n   * Authorization scheme. Defaults to \"Basic\".\n   * More information about authorization schemes is available here: https://developer.mozilla.org/docs/Web/HTTP/Authentication#authentication_schemes\n   */\n  authorizationScheme: string = DEFAULT_AUTHORIZATION_SCHEME;\n\n  /**\n   * Creates a new BasicAuthenticationCredentials object.\n   *\n   * @param userName - User name.\n   * @param password - Password.\n   * @param authorizationScheme - The authorization scheme.\n   */\n  constructor(\n    userName: string,\n    password: string,\n    authorizationScheme: string = DEFAULT_AUTHORIZATION_SCHEME\n  ) {\n    if (userName === null || userName === undefined || typeof userName.valueOf() !== \"string\") {\n      throw new Error(\"userName cannot be null or undefined and must be of type string.\");\n    }\n    if (password === null || password === undefined || typeof password.valueOf() !== \"string\") {\n      throw new Error(\"password cannot be null or undefined and must be of type string.\");\n    }\n    this.userName = userName;\n    this.password = password;\n    this.authorizationScheme = authorizationScheme;\n  }\n\n  /**\n   * Signs a request with the Authentication header.\n   *\n   * @param webResource - The WebResourceLike to be signed.\n   * @returns The signed request object.\n   */\n  signRequest(webResource: WebResourceLike): Promise<WebResourceLike> {\n    const credentials = `${this.userName}:${this.password}`;\n    const encodedCredentials = `${this.authorizationScheme} ${base64.encodeString(credentials)}`;\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n    webResource.headers.set(HeaderConstants.AUTHORIZATION, encodedCredentials);\n    return Promise.resolve(webResource);\n  }\n}\n"],"mappings":";;AAAA;AACA;AAEA,OAAO,KAAKA,MAAM,MAAM,gBAAgB;AACxC,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,WAAW,QAAQ,gBAAgB;AAI5C,IAAMC,eAAe,GAAGF,SAAS,CAACE,eAAe;AACjD,IAAMC,4BAA4B,GAAG,OAAO;AAE5C;;;AAGA,WAAaC,8BAA8B;EAiBzC;;;;;;;EAOA,SAAAA,+BACEC,QAAgB,EAChBC,QAAgB,EAC0C;IAAA,IAA1DC,mBAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA8BL,4BAA4B;IAAAQ,eAAA,OAAAP,8BAAA;IAhB5D;;;;IAIA,KAAAG,mBAAmB,GAAWJ,4BAA4B;IAcxD,IAAIE,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAKK,SAAS,IAAI,OAAOL,QAAQ,CAACO,OAAO,EAAE,KAAK,QAAQ,EAAE;MACzF,MAAM,IAAIC,KAAK,CAAC,kEAAkE,CAAC;;IAErF,IAAIP,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAKI,SAAS,IAAI,OAAOJ,QAAQ,CAACM,OAAO,EAAE,KAAK,QAAQ,EAAE;MACzF,MAAM,IAAIC,KAAK,CAAC,kEAAkE,CAAC;;IAErF,IAAI,CAACR,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB;EAChD;EAEA;;;;;;EAAAO,YAAA,CAAAV,8BAAA;IAAAW,GAAA;IAAAC,KAAA,EAMA,SAAAC,YAAYC,WAA4B;MACtC,IAAMC,WAAW,MAAAC,MAAA,CAAM,IAAI,CAACf,QAAQ,OAAAe,MAAA,CAAI,IAAI,CAACd,QAAQ,CAAE;MACvD,IAAMe,kBAAkB,MAAAD,MAAA,CAAM,IAAI,CAACb,mBAAmB,OAAAa,MAAA,CAAIrB,MAAM,CAACuB,YAAY,CAACH,WAAW,CAAC,CAAE;MAC5F,IAAI,CAACD,WAAW,CAACK,OAAO,EAAEL,WAAW,CAACK,OAAO,GAAG,IAAItB,WAAW,EAAE;MACjEiB,WAAW,CAACK,OAAO,CAACC,GAAG,CAACtB,eAAe,CAACuB,aAAa,EAAEJ,kBAAkB,CAAC;MAC1E,OAAOK,OAAO,CAACC,OAAO,CAACT,WAAW,CAAC;IACrC;EAAC;EAAA,OAAAd,8BAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}