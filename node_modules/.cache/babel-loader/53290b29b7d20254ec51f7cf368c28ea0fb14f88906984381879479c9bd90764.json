{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { GenericPollOperation } from \"./operation\";\nimport { POLL_INTERVAL_IN_MS } from \"../../poller/constants\";\nimport { Poller } from \"../poller\";\nimport { deserializeState } from \"../../poller/operation\";\n/**\n * The LRO Engine, a class that performs polling.\n */\nexport class LroEngine extends Poller {\n  constructor(lro, options) {\n    const {\n      intervalInMs = POLL_INTERVAL_IN_MS,\n      resumeFrom,\n      resolveOnUnsuccessful = false,\n      isDone,\n      lroResourceLocationConfig,\n      processResult,\n      updateState\n    } = options || {};\n    const state = resumeFrom ? deserializeState(resumeFrom) : {};\n    const operation = new GenericPollOperation(state, lro, !resolveOnUnsuccessful, lroResourceLocationConfig, processResult, updateState, isDone);\n    super(operation);\n    this.resolveOnUnsuccessful = resolveOnUnsuccessful;\n    this.config = {\n      intervalInMs: intervalInMs\n    };\n    operation.setPollerConfig(this.config);\n  }\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   */\n  delay() {\n    return new Promise(resolve => setTimeout(() => resolve(), this.config.intervalInMs));\n  }\n}","map":{"version":3,"names":["GenericPollOperation","POLL_INTERVAL_IN_MS","Poller","deserializeState","LroEngine","constructor","lro","options","intervalInMs","resumeFrom","resolveOnUnsuccessful","isDone","lroResourceLocationConfig","processResult","updateState","state","operation","config","setPollerConfig","delay","Promise","resolve","setTimeout"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-lro\\src\\legacy\\lroEngine\\lroEngine.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { LroEngineOptions, PollerConfig } from \"./models\";\nimport { GenericPollOperation } from \"./operation\";\nimport { LongRunningOperation } from \"../../http/models\";\nimport { POLL_INTERVAL_IN_MS } from \"../../poller/constants\";\nimport { PollOperationState } from \"../pollOperation\";\nimport { Poller } from \"../poller\";\nimport { RestorableOperationState } from \"../../poller/models\";\nimport { deserializeState } from \"../../poller/operation\";\n\n/**\n * The LRO Engine, a class that performs polling.\n */\nexport class LroEngine<TResult, TState extends PollOperationState<TResult>> extends Poller<\n  TState,\n  TResult\n> {\n  private config: PollerConfig;\n\n  constructor(lro: LongRunningOperation<TResult>, options?: LroEngineOptions<TResult, TState>) {\n    const {\n      intervalInMs = POLL_INTERVAL_IN_MS,\n      resumeFrom,\n      resolveOnUnsuccessful = false,\n      isDone,\n      lroResourceLocationConfig,\n      processResult,\n      updateState,\n    } = options || {};\n    const state: RestorableOperationState<TState> = resumeFrom\n      ? deserializeState(resumeFrom)\n      : ({} as RestorableOperationState<TState>);\n    const operation = new GenericPollOperation(\n      state,\n      lro,\n      !resolveOnUnsuccessful,\n      lroResourceLocationConfig,\n      processResult,\n      updateState,\n      isDone\n    );\n    super(operation);\n    this.resolveOnUnsuccessful = resolveOnUnsuccessful;\n\n    this.config = { intervalInMs: intervalInMs };\n    operation.setPollerConfig(this.config);\n  }\n\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   */\n  delay(): Promise<void> {\n    return new Promise((resolve) => setTimeout(() => resolve(), this.config.intervalInMs));\n  }\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,oBAAoB,QAAQ,aAAa;AAElD,SAASC,mBAAmB,QAAQ,wBAAwB;AAE5D,SAASC,MAAM,QAAQ,WAAW;AAElC,SAASC,gBAAgB,QAAQ,wBAAwB;AAEzD;;;AAGA,OAAM,MAAOC,SAA+D,SAAQF,MAGnF;EAGCG,YAAYC,GAAkC,EAAEC,OAA2C;IACzF,MAAM;MACJC,YAAY,GAAGP,mBAAmB;MAClCQ,UAAU;MACVC,qBAAqB,GAAG,KAAK;MAC7BC,MAAM;MACNC,yBAAyB;MACzBC,aAAa;MACbC;IAAW,CACZ,GAAGP,OAAO,IAAI,EAAE;IACjB,MAAMQ,KAAK,GAAqCN,UAAU,GACtDN,gBAAgB,CAACM,UAAU,CAAC,GAC3B,EAAuC;IAC5C,MAAMO,SAAS,GAAG,IAAIhB,oBAAoB,CACxCe,KAAK,EACLT,GAAG,EACH,CAACI,qBAAqB,EACtBE,yBAAyB,EACzBC,aAAa,EACbC,WAAW,EACXH,MAAM,CACP;IACD,KAAK,CAACK,SAAS,CAAC;IAChB,IAAI,CAACN,qBAAqB,GAAGA,qBAAqB;IAElD,IAAI,CAACO,MAAM,GAAG;MAAET,YAAY,EAAEA;IAAY,CAAE;IAC5CQ,SAAS,CAACE,eAAe,CAAC,IAAI,CAACD,MAAM,CAAC;EACxC;EAEA;;;EAGAE,KAAKA,CAAA;IACH,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAAC,MAAMD,OAAO,EAAE,EAAE,IAAI,CAACJ,MAAM,CAACT,YAAY,CAAC,CAAC;EACxF"},"metadata":{},"sourceType":"module","externalDependencies":[]}