{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Converts a base64 string into a byte array.\n * @param content - The base64 string to convert.\n * @internal\n */\nexport function base64ToBytes(content) {\n  if (typeof atob !== \"function\") {\n    throw new Error(`Your browser environment is missing the global \"atob\" function.`);\n  }\n  const binary = atob(content);\n  const bytes = new Uint8Array(binary.length);\n  for (let i = 0; i < binary.length; i++) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n  return bytes;\n}\n/**\n * Converts an ArrayBuffer to base64 string.\n * @param buffer - Raw binary data.\n * @internal\n */\nexport function bufferToBase64(buffer) {\n  if (typeof btoa !== \"function\") {\n    throw new Error(`Your browser environment is missing the global \"btoa\" function.`);\n  }\n  const bytes = new Uint8Array(buffer);\n  let binary = \"\";\n  for (const byte of bytes) {\n    binary += String.fromCharCode(byte);\n  }\n  return btoa(binary);\n}","map":{"version":3,"names":["base64ToBytes","content","atob","Error","binary","bytes","Uint8Array","length","i","charCodeAt","bufferToBase64","buffer","btoa","byte","String","fromCharCode"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-util\\src\\base64.browser.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\ndeclare global {\n  // stub these out for the browser\n  function btoa(input: string): string;\n  function atob(input: string): string;\n}\n\n/**\n * Converts a base64 string into a byte array.\n * @param content - The base64 string to convert.\n * @internal\n */\nexport function base64ToBytes(content: string): Uint8Array {\n  if (typeof atob !== \"function\") {\n    throw new Error(`Your browser environment is missing the global \"atob\" function.`);\n  }\n\n  const binary = atob(content);\n  const bytes = new Uint8Array(binary.length);\n  for (let i = 0; i < binary.length; i++) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n\n  return bytes;\n}\n\n/**\n * Converts an ArrayBuffer to base64 string.\n * @param buffer - Raw binary data.\n * @internal\n */\nexport function bufferToBase64(buffer: ArrayBuffer): string {\n  if (typeof btoa !== \"function\") {\n    throw new Error(`Your browser environment is missing the global \"btoa\" function.`);\n  }\n\n  const bytes = new Uint8Array(buffer);\n  let binary = \"\";\n  for (const byte of bytes) {\n    binary += String.fromCharCode(byte);\n  }\n  return btoa(binary);\n}\n"],"mappings":"AAAA;AACA;AAQA;;;;;AAKA,OAAM,SAAUA,aAAaA,CAACC,OAAe;EAC3C,IAAI,OAAOC,IAAI,KAAK,UAAU,EAAE;IAC9B,MAAM,IAAIC,KAAK,CAAC,iEAAiE,CAAC;;EAGpF,MAAMC,MAAM,GAAGF,IAAI,CAACD,OAAO,CAAC;EAC5B,MAAMI,KAAK,GAAG,IAAIC,UAAU,CAACF,MAAM,CAACG,MAAM,CAAC;EAC3C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,CAACG,MAAM,EAAEC,CAAC,EAAE,EAAE;IACtCH,KAAK,CAACG,CAAC,CAAC,GAAGJ,MAAM,CAACK,UAAU,CAACD,CAAC,CAAC;;EAGjC,OAAOH,KAAK;AACd;AAEA;;;;;AAKA,OAAM,SAAUK,cAAcA,CAACC,MAAmB;EAChD,IAAI,OAAOC,IAAI,KAAK,UAAU,EAAE;IAC9B,MAAM,IAAIT,KAAK,CAAC,iEAAiE,CAAC;;EAGpF,MAAME,KAAK,GAAG,IAAIC,UAAU,CAACK,MAAM,CAAC;EACpC,IAAIP,MAAM,GAAG,EAAE;EACf,KAAK,MAAMS,IAAI,IAAIR,KAAK,EAAE;IACxBD,MAAM,IAAIU,MAAM,CAACC,YAAY,CAACF,IAAI,CAAC;;EAErC,OAAOD,IAAI,CAACR,MAAM,CAAC;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}