{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { log } from \"./log\";\nconst debugEnvVariable = typeof process !== \"undefined\" && process.env && process.env.DEBUG || undefined;\nlet enabledString;\nlet enabledNamespaces = [];\nlet skippedNamespaces = [];\nconst debuggers = [];\nif (debugEnvVariable) {\n  enable(debugEnvVariable);\n}\nconst debugObj = Object.assign(namespace => {\n  return createDebugger(namespace);\n}, {\n  enable,\n  enabled,\n  disable,\n  log\n});\nfunction enable(namespaces) {\n  enabledString = namespaces;\n  enabledNamespaces = [];\n  skippedNamespaces = [];\n  const wildcard = /\\*/g;\n  const namespaceList = namespaces.split(\",\").map(ns => ns.trim().replace(wildcard, \".*?\"));\n  for (const ns of namespaceList) {\n    if (ns.startsWith(\"-\")) {\n      skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n    } else {\n      enabledNamespaces.push(new RegExp(`^${ns}$`));\n    }\n  }\n  for (const instance of debuggers) {\n    instance.enabled = enabled(instance.namespace);\n  }\n}\nfunction enabled(namespace) {\n  if (namespace.endsWith(\"*\")) {\n    return true;\n  }\n  for (const skipped of skippedNamespaces) {\n    if (skipped.test(namespace)) {\n      return false;\n    }\n  }\n  for (const enabledNamespace of enabledNamespaces) {\n    if (enabledNamespace.test(namespace)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction disable() {\n  const result = enabledString || \"\";\n  enable(\"\");\n  return result;\n}\nfunction createDebugger(namespace) {\n  const newDebugger = Object.assign(debug, {\n    enabled: enabled(namespace),\n    destroy,\n    log: debugObj.log,\n    namespace,\n    extend\n  });\n  function debug() {\n    if (!newDebugger.enabled) {\n      return;\n    }\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (args.length > 0) {\n      args[0] = `${namespace} ${args[0]}`;\n    }\n    newDebugger.log(...args);\n  }\n  debuggers.push(newDebugger);\n  return newDebugger;\n}\nfunction destroy() {\n  const index = debuggers.indexOf(this);\n  if (index >= 0) {\n    debuggers.splice(index, 1);\n    return true;\n  }\n  return false;\n}\nfunction extend(namespace) {\n  const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n  newDebugger.log = this.log;\n  return newDebugger;\n}\nexport default debugObj;","map":{"version":3,"names":["log","debugEnvVariable","process","env","DEBUG","undefined","enabledString","enabledNamespaces","skippedNamespaces","debuggers","enable","debugObj","Object","assign","namespace","createDebugger","enabled","disable","namespaces","wildcard","namespaceList","split","map","ns","trim","replace","startsWith","push","RegExp","substr","instance","endsWith","skipped","test","enabledNamespace","result","newDebugger","debug","destroy","extend","_len","arguments","length","args","Array","_key","index","indexOf","splice"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\logger\\src\\debug.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { log } from \"./log\";\n\n/**\n * A simple mechanism for enabling logging.\n * Intended to mimic the publicly available `debug` package.\n */\nexport interface Debug {\n  /**\n   * Creates a new logger with the given namespace.\n   */\n  (namespace: string): Debugger;\n  /**\n   * The default log method (defaults to console)\n   */\n  log: (...args: any[]) => void;\n  /**\n   * Enables a particular set of namespaces.\n   * To enable multiple separate them with commas, e.g. \"info,debug\".\n   * Supports wildcards, e.g. \"azure:*\"\n   * Supports skip syntax, e.g. \"azure:*,-azure:storage:*\" will enable\n   * everything under azure except for things under azure:storage.\n   */\n  enable: (namespaces: string) => void;\n  /**\n   * Checks if a particular namespace is enabled.\n   */\n  enabled: (namespace: string) => boolean;\n  /**\n   * Disables all logging, returns what was previously enabled.\n   */\n  disable: () => string;\n}\n\n/**\n * A log function that can be dynamically enabled and redirected.\n */\nexport interface Debugger {\n  /**\n   * Logs the given arguments to the `log` method.\n   */\n  (...args: any[]): void;\n  /**\n   * True if this logger is active and logging.\n   */\n  enabled: boolean;\n  /**\n   * Used to cleanup/remove this logger.\n   */\n  destroy: () => boolean;\n  /**\n   * The current log method. Can be overridden to redirect output.\n   */\n  log: (...args: any[]) => void;\n  /**\n   * The namespace of this logger.\n   */\n  namespace: string;\n  /**\n   * Extends this logger with a child namespace.\n   * Namespaces are separated with a ':' character.\n   */\n  extend: (namespace: string) => Debugger;\n}\n\nconst debugEnvVariable =\n  (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\n\nlet enabledString: string | undefined;\nlet enabledNamespaces: RegExp[] = [];\nlet skippedNamespaces: RegExp[] = [];\nconst debuggers: Debugger[] = [];\n\nif (debugEnvVariable) {\n  enable(debugEnvVariable);\n}\n\nconst debugObj: Debug = Object.assign(\n  (namespace: string): Debugger => {\n    return createDebugger(namespace);\n  },\n  {\n    enable,\n    enabled,\n    disable,\n    log,\n  }\n);\n\nfunction enable(namespaces: string): void {\n  enabledString = namespaces;\n  enabledNamespaces = [];\n  skippedNamespaces = [];\n  const wildcard = /\\*/g;\n  const namespaceList = namespaces.split(\",\").map((ns) => ns.trim().replace(wildcard, \".*?\"));\n  for (const ns of namespaceList) {\n    if (ns.startsWith(\"-\")) {\n      skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n    } else {\n      enabledNamespaces.push(new RegExp(`^${ns}$`));\n    }\n  }\n  for (const instance of debuggers) {\n    instance.enabled = enabled(instance.namespace);\n  }\n}\n\nfunction enabled(namespace: string): boolean {\n  if (namespace.endsWith(\"*\")) {\n    return true;\n  }\n\n  for (const skipped of skippedNamespaces) {\n    if (skipped.test(namespace)) {\n      return false;\n    }\n  }\n  for (const enabledNamespace of enabledNamespaces) {\n    if (enabledNamespace.test(namespace)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction disable(): string {\n  const result = enabledString || \"\";\n  enable(\"\");\n  return result;\n}\n\nfunction createDebugger(namespace: string): Debugger {\n  const newDebugger: Debugger = Object.assign(debug, {\n    enabled: enabled(namespace),\n    destroy,\n    log: debugObj.log,\n    namespace,\n    extend,\n  });\n\n  function debug(...args: any[]): void {\n    if (!newDebugger.enabled) {\n      return;\n    }\n    if (args.length > 0) {\n      args[0] = `${namespace} ${args[0]}`;\n    }\n    newDebugger.log(...args);\n  }\n\n  debuggers.push(newDebugger);\n\n  return newDebugger;\n}\n\nfunction destroy(this: Debugger): boolean {\n  const index = debuggers.indexOf(this);\n  if (index >= 0) {\n    debuggers.splice(index, 1);\n    return true;\n  }\n  return false;\n}\n\nfunction extend(this: Debugger, namespace: string): Debugger {\n  const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n  newDebugger.log = this.log;\n  return newDebugger;\n}\n\nexport default debugObj;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}