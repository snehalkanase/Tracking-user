{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __rest } from \"tslib\";\n/**\n * Converts an OperationOptions to a RequestOptionsBase\n *\n * @param opts - OperationOptions object to convert to RequestOptionsBase\n */\nexport function operationOptionsToRequestOptionsBase(opts) {\n  var requestOptions = opts.requestOptions,\n    tracingOptions = opts.tracingOptions,\n    additionalOptions = __rest(opts, [\"requestOptions\", \"tracingOptions\"]);\n  var result = additionalOptions;\n  if (requestOptions) {\n    result = Object.assign(Object.assign({}, result), requestOptions);\n  }\n  if (tracingOptions) {\n    result.tracingContext = tracingOptions.tracingContext;\n    // By passing spanOptions if they exist at runtime, we're backwards compatible with @azure/core-tracing@preview.13 and earlier.\n    result.spanOptions = tracingOptions === null || tracingOptions === void 0 ? void 0 : tracingOptions.spanOptions;\n  }\n  return result;\n}","map":{"version":3,"names":["operationOptionsToRequestOptionsBase","opts","requestOptions","tracingOptions","additionalOptions","__rest","result","Object","assign","tracingContext","spanOptions"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\operationOptions.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RequestOptionsBase, TransferProgressEvent } from \"./webResource\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { OperationTracingOptions } from \"@azure/core-tracing\";\n\n/**\n * The base options type for all operations.\n */\nexport interface OperationOptions {\n  /**\n   * The signal which can be used to abort requests.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Options used when creating and sending HTTP requests for this operation.\n   */\n  requestOptions?: OperationRequestOptions;\n  /**\n   * Options used when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n}\n\n/**\n * Options that allow configuring the handling of HTTP requests made by an SDK operation.\n */\nexport interface OperationRequestOptions {\n  /**\n   * User defined custom request headers that will be applied before the request is sent.\n   */\n  customHeaders?: { [key: string]: string };\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   */\n  timeout?: number;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Callback which fires upon download progress.\n   */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n  /**\n   * Whether or not the HttpOperationResponse should be deserialized. If this is undefined, then the\n   * HttpOperationResponse should be deserialized.\n   */\n  shouldDeserialize?: boolean | ((response: HttpOperationResponse) => boolean);\n}\n\n/**\n * Converts an OperationOptions to a RequestOptionsBase\n *\n * @param opts - OperationOptions object to convert to RequestOptionsBase\n */\nexport function operationOptionsToRequestOptionsBase<T extends OperationOptions>(\n  opts: T\n): RequestOptionsBase {\n  const { requestOptions, tracingOptions, ...additionalOptions } = opts;\n\n  let result: RequestOptionsBase = additionalOptions;\n\n  if (requestOptions) {\n    result = { ...result, ...requestOptions };\n  }\n\n  if (tracingOptions) {\n    result.tracingContext = tracingOptions.tracingContext;\n    // By passing spanOptions if they exist at runtime, we're backwards compatible with @azure/core-tracing@preview.13 and earlier.\n    result.spanOptions = (tracingOptions as any)?.spanOptions;\n  }\n\n  return result;\n}\n"],"mappings":"AAAA;AACA;;AAuDA;;;;;AAKA,OAAM,SAAUA,oCAAoCA,CAClDC,IAAO;EAEP,IAAQC,cAAc,GAA2CD,IAAI,CAA7DC,cAAc;IAAEC,cAAc,GAA2BF,IAAI,CAA7CE,cAAc;IAAKC,iBAAiB,GAAAC,MAAA,CAAKJ,IAAI,EAA/D,oCAAwD,CAAO;EAErE,IAAIK,MAAM,GAAuBF,iBAAiB;EAElD,IAAIF,cAAc,EAAE;IAClBI,MAAM,GAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAQF,MAAM,GAAKJ,cAAc,CAAE;;EAG3C,IAAIC,cAAc,EAAE;IAClBG,MAAM,CAACG,cAAc,GAAGN,cAAc,CAACM,cAAc;IACrD;IACAH,MAAM,CAACI,WAAW,GAAIP,cAAsB,aAAtBA,cAAc,uBAAdA,cAAc,CAAUO,WAAW;;EAG3D,OAAOJ,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}