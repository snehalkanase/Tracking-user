{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { Sanitizer } from \"../util/sanitizer\";\nimport { logger as coreLogger } from \"../log\";\n/**\n * Creates a policy that logs information about the outgoing request and the incoming responses.\n * @param loggingOptions - Logging options.\n * @returns An instance of the {@link LogPolicy}\n */\nexport function logPolicy() {\n  let loggingOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    create: (nextPolicy, options) => {\n      return new LogPolicy(nextPolicy, options, loggingOptions);\n    }\n  };\n}\n/**\n * A policy that logs information about the outgoing request and the incoming responses.\n */\nexport class LogPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy, options) {\n    let {\n      logger = coreLogger.info,\n      allowedHeaderNames = [],\n      allowedQueryParameters = []\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(nextPolicy, options);\n    this.logger = logger;\n    this.sanitizer = new Sanitizer({\n      allowedHeaderNames,\n      allowedQueryParameters\n    });\n  }\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n  get allowedHeaderNames() {\n    return this.sanitizer.allowedHeaderNames;\n  }\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n  set allowedHeaderNames(allowedHeaderNames) {\n    this.sanitizer.allowedHeaderNames = allowedHeaderNames;\n  }\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n  get allowedQueryParameters() {\n    return this.sanitizer.allowedQueryParameters;\n  }\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n  set allowedQueryParameters(allowedQueryParameters) {\n    this.sanitizer.allowedQueryParameters = allowedQueryParameters;\n  }\n  sendRequest(request) {\n    if (!this.logger.enabled) return this._nextPolicy.sendRequest(request);\n    this.logRequest(request);\n    return this._nextPolicy.sendRequest(request).then(response => this.logResponse(response));\n  }\n  logRequest(request) {\n    this.logger(`Request: ${this.sanitizer.sanitize(request)}`);\n  }\n  logResponse(response) {\n    this.logger(`Response status code: ${response.status}`);\n    this.logger(`Headers: ${this.sanitizer.sanitize(response.headers)}`);\n    return response;\n  }\n}","map":{"version":3,"names":["BaseRequestPolicy","Sanitizer","logger","coreLogger","logPolicy","loggingOptions","arguments","length","undefined","create","nextPolicy","options","LogPolicy","constructor","info","allowedHeaderNames","allowedQueryParameters","sanitizer","sendRequest","request","enabled","_nextPolicy","logRequest","then","response","logResponse","sanitize","status","headers"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\policies\\logPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { Debugger } from \"@azure/logger\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { Sanitizer } from \"../util/sanitizer\";\nimport { WebResourceLike } from \"../webResource\";\nimport { logger as coreLogger } from \"../log\";\n\n/**\n * Options to pass to the {@link logPolicy}.\n * By default only a set list of headers are logged, though this can be configured. Request and response bodies are never logged.\n */\nexport interface LogPolicyOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to:\n   * x-ms-client-request-id, x-ms-return-client-request-id, x-ms-useragent, x-ms-correlation-request-id,\n   * x-ms-request-id, client-request-id, ms-cv, return-client-request-id, traceparent, Access-Control-Allow-Credentials,\n   * Access-Control-Allow-Headers, Access-Control-Allow-Methods, Access-Control-Allow-Origin, Access-Control-Expose-Headers,\n   * Access-Control-Max-Age, Access-Control-Request-Headers, Access-Control-Request-Method, Origin, Accept, Accept-Encoding,\n   * Cache-Control, Connection, Content-Length, Content-Type, Date, ETag, Expires, If-Match, If-Modified-Since, If-None-Match,\n   * If-Unmodified-Since, Last-Modified, Pragma, Request-Id, Retry-After, Server, Transfer-Encoding, and User-Agent.\n   *\n   * Any headers specified in this field will be added to that list.\n   * Any other values will be written to logs as \"REDACTED\".\n   */\n  allowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  allowedQueryParameters?: string[];\n\n  /**\n   * The Debugger (logger) instance to use for writing pipeline logs.\n   */\n  logger?: Debugger;\n}\n\n/**\n * Creates a policy that logs information about the outgoing request and the incoming responses.\n * @param loggingOptions - Logging options.\n * @returns An instance of the {@link LogPolicy}\n */\nexport function logPolicy(loggingOptions: LogPolicyOptions = {}): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new LogPolicy(nextPolicy, options, loggingOptions);\n    },\n  };\n}\n\n/**\n * A policy that logs information about the outgoing request and the incoming responses.\n */\nexport class LogPolicy extends BaseRequestPolicy {\n  logger: Debugger;\n  sanitizer: Sanitizer;\n\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n  public get allowedHeaderNames(): Set<string> {\n    return this.sanitizer.allowedHeaderNames;\n  }\n\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n  public set allowedHeaderNames(allowedHeaderNames: Set<string>) {\n    this.sanitizer.allowedHeaderNames = allowedHeaderNames;\n  }\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n  public get allowedQueryParameters(): Set<string> {\n    return this.sanitizer.allowedQueryParameters;\n  }\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n  public set allowedQueryParameters(allowedQueryParameters: Set<string>) {\n    this.sanitizer.allowedQueryParameters = allowedQueryParameters;\n  }\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    {\n      logger = coreLogger.info,\n      allowedHeaderNames = [],\n      allowedQueryParameters = [],\n    }: LogPolicyOptions = {}\n  ) {\n    super(nextPolicy, options);\n    this.logger = logger;\n    this.sanitizer = new Sanitizer({ allowedHeaderNames, allowedQueryParameters });\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!this.logger.enabled) return this._nextPolicy.sendRequest(request);\n\n    this.logRequest(request);\n    return this._nextPolicy.sendRequest(request).then((response) => this.logResponse(response));\n  }\n\n  private logRequest(request: WebResourceLike): void {\n    this.logger(`Request: ${this.sanitizer.sanitize(request)}`);\n  }\n\n  private logResponse(response: HttpOperationResponse): HttpOperationResponse {\n    this.logger(`Response status code: ${response.status}`);\n    this.logger(`Headers: ${this.sanitizer.sanitize(response.headers)}`);\n    return response;\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA,SACEA,iBAAiB,QAIZ,iBAAiB;AAGxB,SAASC,SAAS,QAAQ,mBAAmB;AAE7C,SAASC,MAAM,IAAIC,UAAU,QAAQ,QAAQ;AAiC7C;;;;;AAKA,OAAM,SAAUC,SAASA,CAAA,EAAsC;EAAA,IAArCC,cAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmC,EAAE;EAC7D,OAAO;IACLG,MAAM,EAAEA,CAACC,UAAyB,EAAEC,OAA6B,KAAI;MACnE,OAAO,IAAIC,SAAS,CAACF,UAAU,EAAEC,OAAO,EAAEN,cAAc,CAAC;IAC3D;GACD;AACH;AAEA;;;AAGA,OAAM,MAAOO,SAAU,SAAQZ,iBAAiB;EA4C9Ca,YACEH,UAAyB,EACzBC,OAA6B,EAKL;IAAA,IAJxB;MACET,MAAM,GAAGC,UAAU,CAACW,IAAI;MACxBC,kBAAkB,GAAG,EAAE;MACvBC,sBAAsB,GAAG;IAAE,IAAAV,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MACP,EAAE;IAExB,KAAK,CAACI,UAAU,EAAEC,OAAO,CAAC;IAC1B,IAAI,CAACT,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACe,SAAS,GAAG,IAAIhB,SAAS,CAAC;MAAEc,kBAAkB;MAAEC;IAAsB,CAAE,CAAC;EAChF;EApDA;;;;;;;EAOA,IAAWD,kBAAkBA,CAAA;IAC3B,OAAO,IAAI,CAACE,SAAS,CAACF,kBAAkB;EAC1C;EAEA;;;;;;;EAOA,IAAWA,kBAAkBA,CAACA,kBAA+B;IAC3D,IAAI,CAACE,SAAS,CAACF,kBAAkB,GAAGA,kBAAkB;EACxD;EAEA;;;;;EAKA,IAAWC,sBAAsBA,CAAA;IAC/B,OAAO,IAAI,CAACC,SAAS,CAACD,sBAAsB;EAC9C;EAEA;;;;;EAKA,IAAWA,sBAAsBA,CAACA,sBAAmC;IACnE,IAAI,CAACC,SAAS,CAACD,sBAAsB,GAAGA,sBAAsB;EAChE;EAgBOE,WAAWA,CAACC,OAAwB;IACzC,IAAI,CAAC,IAAI,CAACjB,MAAM,CAACkB,OAAO,EAAE,OAAO,IAAI,CAACC,WAAW,CAACH,WAAW,CAACC,OAAO,CAAC;IAEtE,IAAI,CAACG,UAAU,CAACH,OAAO,CAAC;IACxB,OAAO,IAAI,CAACE,WAAW,CAACH,WAAW,CAACC,OAAO,CAAC,CAACI,IAAI,CAAEC,QAAQ,IAAK,IAAI,CAACC,WAAW,CAACD,QAAQ,CAAC,CAAC;EAC7F;EAEQF,UAAUA,CAACH,OAAwB;IACzC,IAAI,CAACjB,MAAM,CAAC,YAAY,IAAI,CAACe,SAAS,CAACS,QAAQ,CAACP,OAAO,CAAC,EAAE,CAAC;EAC7D;EAEQM,WAAWA,CAACD,QAA+B;IACjD,IAAI,CAACtB,MAAM,CAAC,yBAAyBsB,QAAQ,CAACG,MAAM,EAAE,CAAC;IACvD,IAAI,CAACzB,MAAM,CAAC,YAAY,IAAI,CAACe,SAAS,CAACS,QAAQ,CAACF,QAAQ,CAACI,OAAO,CAAC,EAAE,CAAC;IACpE,OAAOJ,QAAQ;EACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}