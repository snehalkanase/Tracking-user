{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant permissions for that operation. Once all the\n * values are set, this should be serialized with toString and set as the permissions field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport var AccountSASPermissions = /*#__PURE__*/function () {\n  function AccountSASPermissions() {\n    _classCallCheck(this, AccountSASPermissions);\n    /**\n     * Permission to read resources and list queues and tables granted.\n     */\n    this.read = false;\n    /**\n     * Permission to write resources granted.\n     */\n    this.write = false;\n    /**\n     * Permission to create blobs and files granted.\n     */\n    this.delete = false;\n    /**\n     * Permission to delete versions granted.\n     */\n    this.deleteVersion = false;\n    /**\n     * Permission to list blob containers, blobs, shares, directories, and files granted.\n     */\n    this.list = false;\n    /**\n     * Permission to add messages, table entities, and append to blobs granted.\n     */\n    this.add = false;\n    /**\n     * Permission to create blobs and files granted.\n     */\n    this.create = false;\n    /**\n     * Permissions to update messages and table entities granted.\n     */\n    this.update = false;\n    /**\n     * Permission to get and delete messages granted.\n     */\n    this.process = false;\n    /**\n     * Specfies Tag access granted.\n     */\n    this.tag = false;\n    /**\n     * Permission to filter blobs.\n     */\n    this.filter = false;\n    /**\n     * Permission to set immutability policy.\n     */\n    this.setImmutabilityPolicy = false;\n    /**\n     * Specifies that Permanent Delete is permitted.\n     */\n    this.permanentDelete = false;\n  }\n  /**\n   * Parse initializes the AccountSASPermissions fields from a string.\n   *\n   * @param permissions -\n   */\n  _createClass(AccountSASPermissions, [{\n    key: \"toString\",\n    value:\n    /**\n     * Produces the SAS permissions string for an Azure Storage account.\n     * Call this method to set AccountSASSignatureValues Permissions field.\n     *\n     * Using this method will guarantee the resource types are in\n     * an order accepted by the service.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n     *\n     */\n    function toString() {\n      // The order of the characters should be as specified here to ensure correctness:\n      // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n      // Use a string array instead of string concatenating += operator for performance\n      var permissions = [];\n      if (this.read) {\n        permissions.push(\"r\");\n      }\n      if (this.write) {\n        permissions.push(\"w\");\n      }\n      if (this.delete) {\n        permissions.push(\"d\");\n      }\n      if (this.deleteVersion) {\n        permissions.push(\"x\");\n      }\n      if (this.filter) {\n        permissions.push(\"f\");\n      }\n      if (this.tag) {\n        permissions.push(\"t\");\n      }\n      if (this.list) {\n        permissions.push(\"l\");\n      }\n      if (this.add) {\n        permissions.push(\"a\");\n      }\n      if (this.create) {\n        permissions.push(\"c\");\n      }\n      if (this.update) {\n        permissions.push(\"u\");\n      }\n      if (this.process) {\n        permissions.push(\"p\");\n      }\n      if (this.setImmutabilityPolicy) {\n        permissions.push(\"i\");\n      }\n      if (this.permanentDelete) {\n        permissions.push(\"y\");\n      }\n      return permissions.join(\"\");\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(permissions) {\n      var accountSASPermissions = new AccountSASPermissions();\n      var _iterator = _createForOfIteratorHelper(permissions),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var c = _step.value;\n          switch (c) {\n            case \"r\":\n              accountSASPermissions.read = true;\n              break;\n            case \"w\":\n              accountSASPermissions.write = true;\n              break;\n            case \"d\":\n              accountSASPermissions.delete = true;\n              break;\n            case \"x\":\n              accountSASPermissions.deleteVersion = true;\n              break;\n            case \"l\":\n              accountSASPermissions.list = true;\n              break;\n            case \"a\":\n              accountSASPermissions.add = true;\n              break;\n            case \"c\":\n              accountSASPermissions.create = true;\n              break;\n            case \"u\":\n              accountSASPermissions.update = true;\n              break;\n            case \"p\":\n              accountSASPermissions.process = true;\n              break;\n            case \"t\":\n              accountSASPermissions.tag = true;\n              break;\n            case \"f\":\n              accountSASPermissions.filter = true;\n              break;\n            case \"i\":\n              accountSASPermissions.setImmutabilityPolicy = true;\n              break;\n            case \"y\":\n              accountSASPermissions.permanentDelete = true;\n              break;\n            default:\n              throw new RangeError(\"Invalid permission character: \".concat(c));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return accountSASPermissions;\n    }\n    /**\n     * Creates a {@link AccountSASPermissions} from a raw object which contains same keys as it\n     * and boolean values for them.\n     *\n     * @param permissionLike -\n     */\n  }, {\n    key: \"from\",\n    value: function from(permissionLike) {\n      var accountSASPermissions = new AccountSASPermissions();\n      if (permissionLike.read) {\n        accountSASPermissions.read = true;\n      }\n      if (permissionLike.write) {\n        accountSASPermissions.write = true;\n      }\n      if (permissionLike.delete) {\n        accountSASPermissions.delete = true;\n      }\n      if (permissionLike.deleteVersion) {\n        accountSASPermissions.deleteVersion = true;\n      }\n      if (permissionLike.filter) {\n        accountSASPermissions.filter = true;\n      }\n      if (permissionLike.tag) {\n        accountSASPermissions.tag = true;\n      }\n      if (permissionLike.list) {\n        accountSASPermissions.list = true;\n      }\n      if (permissionLike.add) {\n        accountSASPermissions.add = true;\n      }\n      if (permissionLike.create) {\n        accountSASPermissions.create = true;\n      }\n      if (permissionLike.update) {\n        accountSASPermissions.update = true;\n      }\n      if (permissionLike.process) {\n        accountSASPermissions.process = true;\n      }\n      if (permissionLike.setImmutabilityPolicy) {\n        accountSASPermissions.setImmutabilityPolicy = true;\n      }\n      if (permissionLike.permanentDelete) {\n        accountSASPermissions.permanentDelete = true;\n      }\n      return accountSASPermissions;\n    }\n  }]);\n  return AccountSASPermissions;\n}();","map":{"version":3,"names":["AccountSASPermissions","_classCallCheck","read","write","delete","deleteVersion","list","add","create","update","process","tag","filter","setImmutabilityPolicy","permanentDelete","_createClass","key","value","toString","permissions","push","join","parse","accountSASPermissions","_iterator","_createForOfIteratorHelper","_step","s","n","done","c","RangeError","concat","err","e","f","from","permissionLike"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\sas\\AccountSASPermissions.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant permissions for that operation. Once all the\n * values are set, this should be serialized with toString and set as the permissions field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class AccountSASPermissions {\n  /**\n   * Parse initializes the AccountSASPermissions fields from a string.\n   *\n   * @param permissions -\n   */\n  public static parse(permissions: string): AccountSASPermissions {\n    const accountSASPermissions = new AccountSASPermissions();\n\n    for (const c of permissions) {\n      switch (c) {\n        case \"r\":\n          accountSASPermissions.read = true;\n          break;\n        case \"w\":\n          accountSASPermissions.write = true;\n          break;\n        case \"d\":\n          accountSASPermissions.delete = true;\n          break;\n        case \"x\":\n          accountSASPermissions.deleteVersion = true;\n          break;\n        case \"l\":\n          accountSASPermissions.list = true;\n          break;\n        case \"a\":\n          accountSASPermissions.add = true;\n          break;\n        case \"c\":\n          accountSASPermissions.create = true;\n          break;\n        case \"u\":\n          accountSASPermissions.update = true;\n          break;\n        case \"p\":\n          accountSASPermissions.process = true;\n          break;\n        case \"t\":\n          accountSASPermissions.tag = true;\n          break;\n        case \"f\":\n          accountSASPermissions.filter = true;\n          break;\n        case \"i\":\n          accountSASPermissions.setImmutabilityPolicy = true;\n          break;\n        case \"y\":\n          accountSASPermissions.permanentDelete = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission character: ${c}`);\n      }\n    }\n\n    return accountSASPermissions;\n  }\n\n  /**\n   * Creates a {@link AccountSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n  public static from(permissionLike: AccountSASPermissionsLike): AccountSASPermissions {\n    const accountSASPermissions = new AccountSASPermissions();\n    if (permissionLike.read) {\n      accountSASPermissions.read = true;\n    }\n    if (permissionLike.write) {\n      accountSASPermissions.write = true;\n    }\n    if (permissionLike.delete) {\n      accountSASPermissions.delete = true;\n    }\n    if (permissionLike.deleteVersion) {\n      accountSASPermissions.deleteVersion = true;\n    }\n    if (permissionLike.filter) {\n      accountSASPermissions.filter = true;\n    }\n    if (permissionLike.tag) {\n      accountSASPermissions.tag = true;\n    }\n    if (permissionLike.list) {\n      accountSASPermissions.list = true;\n    }\n    if (permissionLike.add) {\n      accountSASPermissions.add = true;\n    }\n    if (permissionLike.create) {\n      accountSASPermissions.create = true;\n    }\n    if (permissionLike.update) {\n      accountSASPermissions.update = true;\n    }\n    if (permissionLike.process) {\n      accountSASPermissions.process = true;\n    }\n    if (permissionLike.setImmutabilityPolicy) {\n      accountSASPermissions.setImmutabilityPolicy = true;\n    }\n    if (permissionLike.permanentDelete) {\n      accountSASPermissions.permanentDelete = true;\n    }\n    return accountSASPermissions;\n  }\n\n  /**\n   * Permission to read resources and list queues and tables granted.\n   */\n  public read: boolean = false;\n\n  /**\n   * Permission to write resources granted.\n   */\n  public write: boolean = false;\n\n  /**\n   * Permission to create blobs and files granted.\n   */\n  public delete: boolean = false;\n\n  /**\n   * Permission to delete versions granted.\n   */\n  public deleteVersion: boolean = false;\n\n  /**\n   * Permission to list blob containers, blobs, shares, directories, and files granted.\n   */\n  public list: boolean = false;\n\n  /**\n   * Permission to add messages, table entities, and append to blobs granted.\n   */\n  public add: boolean = false;\n\n  /**\n   * Permission to create blobs and files granted.\n   */\n  public create: boolean = false;\n\n  /**\n   * Permissions to update messages and table entities granted.\n   */\n  public update: boolean = false;\n\n  /**\n   * Permission to get and delete messages granted.\n   */\n  public process: boolean = false;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  public tag: boolean = false;\n\n  /**\n   * Permission to filter blobs.\n   */\n  public filter: boolean = false;\n\n  /**\n   * Permission to set immutability policy.\n   */\n  public setImmutabilityPolicy: boolean = false;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  public permanentDelete: boolean = false;\n\n  /**\n   * Produces the SAS permissions string for an Azure Storage account.\n   * Call this method to set AccountSASSignatureValues Permissions field.\n   *\n   * Using this method will guarantee the resource types are in\n   * an order accepted by the service.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n   *\n   */\n  public toString(): string {\n    // The order of the characters should be as specified here to ensure correctness:\n    // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n    // Use a string array instead of string concatenating += operator for performance\n    const permissions: string[] = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n    if (this.filter) {\n      permissions.push(\"f\");\n    }\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n    if (this.list) {\n      permissions.push(\"l\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.update) {\n      permissions.push(\"u\");\n    }\n    if (this.process) {\n      permissions.push(\"p\");\n    }\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n    return permissions.join(\"\");\n  }\n}\n\n/**\n * A type that looks like an account SAS permission.\n * Used in {@link AccountSASPermissions} to parse SAS permissions from raw objects.\n */\nexport interface AccountSASPermissionsLike {\n  /**\n   * Permission to read resources and list queues and tables granted.\n   */\n  read?: boolean;\n\n  /**\n   * Permission to write resources granted.\n   */\n  write?: boolean;\n\n  /**\n   * Permission to delete blobs and files granted.\n   */\n  delete?: boolean;\n\n  /**\n   * Permission to delete versions granted.\n   */\n  deleteVersion?: boolean;\n\n  /**\n   * Permission to list blob containers, blobs, shares, directories, and files granted.\n   */\n  list?: boolean;\n\n  /**\n   * Permission to add messages, table entities, and append to blobs granted.\n   */\n  add?: boolean;\n\n  /**\n   * Permission to create blobs and files granted.\n   */\n  create?: boolean;\n\n  /**\n   * Permissions to update messages and table entities granted.\n   */\n  update?: boolean;\n\n  /**\n   * Permission to get and delete messages granted.\n   */\n  process?: boolean;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  tag?: boolean;\n\n  /**\n   * Permission to filter blobs.\n   */\n  filter?: boolean;\n\n  /**\n   * Permission to set immutability policy.\n   */\n  setImmutabilityPolicy?: boolean;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  permanentDelete?: boolean;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}