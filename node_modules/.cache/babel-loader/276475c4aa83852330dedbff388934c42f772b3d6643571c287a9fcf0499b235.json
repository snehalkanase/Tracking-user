{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Helps the core-http token authentication policies with requesting a new token if we're not currently waiting for a new token.\n *\n * @deprecated No longer used in the bearer authorization policy.\n */\nexport var AccessTokenRefresher = /*#__PURE__*/function () {\n  function AccessTokenRefresher(credential, scopes) {\n    var requiredMillisecondsBeforeNewRefresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30000;\n    _classCallCheck(this, AccessTokenRefresher);\n    this.credential = credential;\n    this.scopes = scopes;\n    this.requiredMillisecondsBeforeNewRefresh = requiredMillisecondsBeforeNewRefresh;\n    this.lastCalled = 0;\n  }\n  /**\n   * Returns true if the required milliseconds(defaulted to 30000) have been passed signifying\n   * that we are ready for a new refresh.\n   */\n  _createClass(AccessTokenRefresher, [{\n    key: \"isReady\",\n    value: function isReady() {\n      // We're only ready for a new refresh if the required milliseconds have passed.\n      return !this.lastCalled || Date.now() - this.lastCalled > this.requiredMillisecondsBeforeNewRefresh;\n    }\n    /**\n     * Stores the time in which it is called,\n     * then requests a new token,\n     * then sets this.promise to undefined,\n     * then returns the token.\n     */\n  }, {\n    key: \"getToken\",\n    value: function () {\n      var _getToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n        var token;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.lastCalled = Date.now();\n              _context.next = 3;\n              return this.credential.getToken(this.scopes, options);\n            case 3:\n              token = _context.sent;\n              this.promise = undefined;\n              return _context.abrupt(\"return\", token || undefined);\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getToken(_x) {\n        return _getToken.apply(this, arguments);\n      }\n      return getToken;\n    }()\n    /**\n     * Requests a new token if we're not currently waiting for a new token.\n     * Returns null if the required time between each call hasn't been reached.\n     */\n  }, {\n    key: \"refresh\",\n    value: function refresh(options) {\n      if (!this.promise) {\n        this.promise = this.getToken(options);\n      }\n      return this.promise;\n    }\n  }]);\n  return AccessTokenRefresher;\n}();","map":{"version":3,"names":["AccessTokenRefresher","credential","scopes","requiredMillisecondsBeforeNewRefresh","arguments","length","undefined","_classCallCheck","lastCalled","_createClass","key","value","isReady","Date","now","_getToken","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","token","wrap","_callee$","_context","prev","next","getToken","sent","promise","abrupt","stop","_x","apply","refresh"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\credentials\\accessTokenRefresher.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\n\n/**\n * Helps the core-http token authentication policies with requesting a new token if we're not currently waiting for a new token.\n *\n * @deprecated No longer used in the bearer authorization policy.\n */\nexport class AccessTokenRefresher {\n  private promise: Promise<AccessToken | undefined> | undefined;\n  private lastCalled = 0;\n\n  constructor(\n    private credential: TokenCredential,\n    private scopes: string | string[],\n    private requiredMillisecondsBeforeNewRefresh: number = 30000\n  ) {}\n\n  /**\n   * Returns true if the required milliseconds(defaulted to 30000) have been passed signifying\n   * that we are ready for a new refresh.\n   */\n  public isReady(): boolean {\n    // We're only ready for a new refresh if the required milliseconds have passed.\n    return (\n      !this.lastCalled || Date.now() - this.lastCalled > this.requiredMillisecondsBeforeNewRefresh\n    );\n  }\n\n  /**\n   * Stores the time in which it is called,\n   * then requests a new token,\n   * then sets this.promise to undefined,\n   * then returns the token.\n   */\n  private async getToken(options: GetTokenOptions): Promise<AccessToken | undefined> {\n    this.lastCalled = Date.now();\n    const token = await this.credential.getToken(this.scopes, options);\n    this.promise = undefined;\n    return token || undefined;\n  }\n\n  /**\n   * Requests a new token if we're not currently waiting for a new token.\n   * Returns null if the required time between each call hasn't been reached.\n   */\n  public refresh(options: GetTokenOptions): Promise<AccessToken | undefined> {\n    if (!this.promise) {\n      this.promise = this.getToken(options);\n    }\n\n    return this.promise;\n  }\n}\n"],"mappings":";;;;AAAA;AACA;AAIA;;;;;AAKA,WAAaA,oBAAoB;EAI/B,SAAAA,qBACUC,UAA2B,EAC3BC,MAAyB,EAC2B;IAAA,IAApDC,oCAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA+C,KAAK;IAAAG,eAAA,OAAAP,oBAAA;IAFpD,KAAAC,UAAU,GAAVA,UAAU;IACV,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,oCAAoC,GAApCA,oCAAoC;IALtC,KAAAK,UAAU,GAAG,CAAC;EAMnB;EAEH;;;;EAAAC,YAAA,CAAAT,oBAAA;IAAAU,GAAA;IAAAC,KAAA,EAIO,SAAAC,QAAA,EAAO;MACZ;MACA,OACE,CAAC,IAAI,CAACJ,UAAU,IAAIK,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAACN,UAAU,GAAG,IAAI,CAACL,oCAAoC;IAEhG;IAEA;;;;;;EAAA;IAAAO,GAAA;IAAAC,KAAA;MAAA,IAAAI,SAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAMQ,SAAAC,QAAeC,OAAwB;QAAA,IAAAC,KAAA;QAAA,OAAAJ,mBAAA,GAAAK,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAC7C,IAAI,CAAClB,UAAU,GAAGK,IAAI,CAACC,GAAG,EAAE;cAACU,QAAA,CAAAE,IAAA;cAAA,OACT,IAAI,CAACzB,UAAU,CAAC0B,QAAQ,CAAC,IAAI,CAACzB,MAAM,EAAEkB,OAAO,CAAC;YAAA;cAA5DC,KAAK,GAAAG,QAAA,CAAAI,IAAA;cACX,IAAI,CAACC,OAAO,GAAGvB,SAAS;cAAC,OAAAkB,QAAA,CAAAM,MAAA,WAClBT,KAAK,IAAIf,SAAS;YAAA;YAAA;cAAA,OAAAkB,QAAA,CAAAO,IAAA;UAAA;QAAA,GAAAZ,OAAA;MAAA,CAC1B;MAAA,SAAAQ,SAAAK,EAAA;QAAA,OAAAjB,SAAA,CAAAkB,KAAA,OAAA7B,SAAA;MAAA;MAAA,OAAAuB,QAAA;IAAA;IAED;;;;EAAA;IAAAjB,GAAA;IAAAC,KAAA,EAIO,SAAAuB,QAAQd,OAAwB;MACrC,IAAI,CAAC,IAAI,CAACS,OAAO,EAAE;QACjB,IAAI,CAACA,OAAO,GAAG,IAAI,CAACF,QAAQ,CAACP,OAAO,CAAC;;MAGvC,OAAO,IAAI,CAACS,OAAO;IACrB;EAAC;EAAA,OAAA7B,oBAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}