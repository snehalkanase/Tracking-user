{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortError } from \"@azure/abort-controller\";\nimport { BaseRequestPolicy } from \"@azure/core-http\";\nimport { URLConstants } from \"../utils/constants\";\nimport { delay as _delay, setURLHost, setURLParameter } from \"../utils/utils.common\";\nimport { logger } from \"../log\";\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @param retryOptions -\n */\nexport function NewRetryPolicyFactory(retryOptions) {\n  return {\n    create: function create(nextPolicy, options) {\n      return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n    }\n  };\n}\n/**\n * RetryPolicy types.\n */\nexport var StorageRetryPolicyType;\n(function (StorageRetryPolicyType) {\n  /**\n   * Exponential retry. Retry time delay grows exponentially.\n   */\n  StorageRetryPolicyType[StorageRetryPolicyType[\"EXPONENTIAL\"] = 0] = \"EXPONENTIAL\";\n  /**\n   * Linear retry. Retry time delay grows linearly.\n   */\n  StorageRetryPolicyType[StorageRetryPolicyType[\"FIXED\"] = 1] = \"FIXED\";\n})(StorageRetryPolicyType || (StorageRetryPolicyType = {}));\n// Default values of StorageRetryOptions\nvar DEFAULT_RETRY_OPTIONS = {\n  maxRetryDelayInMs: 120 * 1000,\n  maxTries: 4,\n  retryDelayInMs: 4 * 1000,\n  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n  secondaryHost: \"\",\n  tryTimeoutInMs: undefined // Use server side default timeout strategy\n};\n\nvar RETRY_ABORT_ERROR = new AbortError(\"The operation was aborted.\");\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nexport var StorageRetryPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {\n  _inherits(StorageRetryPolicy, _BaseRequestPolicy);\n  var _super = _createSuper(StorageRetryPolicy);\n  /**\n   * Creates an instance of RetryPolicy.\n   *\n   * @param nextPolicy -\n   * @param options -\n   * @param retryOptions -\n   */\n  function StorageRetryPolicy(nextPolicy, options) {\n    var _this;\n    var retryOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETRY_OPTIONS;\n    _classCallCheck(this, StorageRetryPolicy);\n    _this = _super.call(this, nextPolicy, options);\n    // Initialize retry options\n    _this.retryOptions = {\n      retryPolicyType: retryOptions.retryPolicyType ? retryOptions.retryPolicyType : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n      maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1 ? Math.floor(retryOptions.maxTries) : DEFAULT_RETRY_OPTIONS.maxTries,\n      tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0 ? retryOptions.tryTimeoutInMs : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n      retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0 ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs) : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n      maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0 ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n      secondaryHost: retryOptions.secondaryHost ? retryOptions.secondaryHost : DEFAULT_RETRY_OPTIONS.secondaryHost\n    };\n    return _this;\n  }\n  /**\n   * Sends request.\n   *\n   * @param request -\n   */\n  _createClass(StorageRetryPolicy, [{\n    key: \"sendRequest\",\n    value: function () {\n      var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this.attemptSendRequest(request, false, 1));\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function sendRequest(_x) {\n        return _sendRequest.apply(this, arguments);\n      }\n      return sendRequest;\n    }()\n    /**\n     * Decide and perform next retry. Won't mutate request parameter.\n     *\n     * @param request -\n     * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then\n     *                                   the resource was not found. This may be due to replication delay. So, in this\n     *                                   case, we'll never try the secondary again for this operation.\n     * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes\n     *                                   the attempt will be performed by this method call.\n     */\n  }, {\n    key: \"attemptSendRequest\",\n    value: function () {\n      var _attemptSendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(request, secondaryHas404, attempt) {\n        var newRequest, isPrimaryRetry, response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              newRequest = request.clone();\n              isPrimaryRetry = secondaryHas404 || !this.retryOptions.secondaryHost || !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") || attempt % 2 === 1;\n              if (!isPrimaryRetry) {\n                newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost);\n              }\n              // Set the server-side timeout query parameter \"timeout=[seconds]\"\n              if (this.retryOptions.tryTimeoutInMs) {\n                newRequest.url = setURLParameter(newRequest.url, URLConstants.Parameters.TIMEOUT, Math.floor(this.retryOptions.tryTimeoutInMs / 1000).toString());\n              }\n              _context2.prev = 4;\n              logger.info(\"RetryPolicy: =====> Try=\".concat(attempt, \" \").concat(isPrimaryRetry ? \"Primary\" : \"Secondary\"));\n              _context2.next = 8;\n              return this._nextPolicy.sendRequest(newRequest);\n            case 8:\n              response = _context2.sent;\n              if (this.shouldRetry(isPrimaryRetry, attempt, response)) {\n                _context2.next = 11;\n                break;\n              }\n              return _context2.abrupt(\"return\", response);\n            case 11:\n              secondaryHas404 = secondaryHas404 || !isPrimaryRetry && response.status === 404;\n              _context2.next = 19;\n              break;\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](4);\n              logger.error(\"RetryPolicy: Caught error, message: \".concat(_context2.t0.message, \", code: \").concat(_context2.t0.code));\n              if (this.shouldRetry(isPrimaryRetry, attempt, response, _context2.t0)) {\n                _context2.next = 19;\n                break;\n              }\n              throw _context2.t0;\n            case 19:\n              _context2.next = 21;\n              return this.delay(isPrimaryRetry, attempt, request.abortSignal);\n            case 21:\n              return _context2.abrupt(\"return\", this.attemptSendRequest(request, secondaryHas404, ++attempt));\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[4, 14]]);\n      }));\n      function attemptSendRequest(_x2, _x3, _x4) {\n        return _attemptSendRequest.apply(this, arguments);\n      }\n      return attemptSendRequest;\n    }()\n    /**\n     * Decide whether to retry according to last HTTP response and retry counters.\n     *\n     * @param isPrimaryRetry -\n     * @param attempt -\n     * @param response -\n     * @param err -\n     */\n  }, {\n    key: \"shouldRetry\",\n    value: function shouldRetry(isPrimaryRetry, attempt, response, err) {\n      if (attempt >= this.retryOptions.maxTries) {\n        logger.info(\"RetryPolicy: Attempt(s) \".concat(attempt, \" >= maxTries \").concat(this.retryOptions.maxTries, \", no further try.\"));\n        return false;\n      }\n      // Handle network failures, you may need to customize the list when you implement\n      // your own http client\n      var retriableErrors = [\"ETIMEDOUT\", \"ESOCKETTIMEDOUT\", \"ECONNREFUSED\", \"ECONNRESET\", \"ENOENT\", \"ENOTFOUND\", \"TIMEOUT\", \"EPIPE\", \"REQUEST_SEND_ERROR\" // For default xhr based http client provided in ms-rest-js\n      ];\n\n      if (err) {\n        var _iterator = _createForOfIteratorHelper(retriableErrors),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var retriableError = _step.value;\n            if (err.name.toUpperCase().includes(retriableError) || err.message.toUpperCase().includes(retriableError) || err.code && err.code.toString().toUpperCase() === retriableError) {\n              logger.info(\"RetryPolicy: Network error \".concat(retriableError, \" found, will retry.\"));\n              return true;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      // If attempt was against the secondary & it returned a StatusNotFound (404), then\n      // the resource was not found. This may be due to replication delay. So, in this\n      // case, we'll never try the secondary again for this operation.\n      if (response || err) {\n        var statusCode = response ? response.status : err ? err.statusCode : 0;\n        if (!isPrimaryRetry && statusCode === 404) {\n          logger.info(\"RetryPolicy: Secondary access with 404, will retry.\");\n          return true;\n        }\n        // Server internal error or server timeout\n        if (statusCode === 503 || statusCode === 500) {\n          logger.info(\"RetryPolicy: Will retry for status code \".concat(statusCode, \".\"));\n          return true;\n        }\n      }\n      if ((err === null || err === void 0 ? void 0 : err.code) === \"PARSE_ERROR\" && (err === null || err === void 0 ? void 0 : err.message.startsWith(\"Error \\\"Error: Unclosed root tag\"))) {\n        logger.info(\"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\");\n        return true;\n      }\n      return false;\n    }\n    /**\n     * Delay a calculated time between retries.\n     *\n     * @param isPrimaryRetry -\n     * @param attempt -\n     * @param abortSignal -\n     */\n  }, {\n    key: \"delay\",\n    value: function () {\n      var _delay2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(isPrimaryRetry, attempt, abortSignal) {\n        var delayTimeInMs;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              delayTimeInMs = 0;\n              if (!isPrimaryRetry) {\n                _context3.next = 11;\n                break;\n              }\n              _context3.t0 = this.retryOptions.retryPolicyType;\n              _context3.next = _context3.t0 === StorageRetryPolicyType.EXPONENTIAL ? 5 : _context3.t0 === StorageRetryPolicyType.FIXED ? 7 : 9;\n              break;\n            case 5:\n              delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs, this.retryOptions.maxRetryDelayInMs);\n              return _context3.abrupt(\"break\", 9);\n            case 7:\n              delayTimeInMs = this.retryOptions.retryDelayInMs;\n              return _context3.abrupt(\"break\", 9);\n            case 9:\n              _context3.next = 12;\n              break;\n            case 11:\n              delayTimeInMs = Math.random() * 1000;\n            case 12:\n              logger.info(\"RetryPolicy: Delay for \".concat(delayTimeInMs, \"ms\"));\n              return _context3.abrupt(\"return\", _delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR));\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function delay(_x5, _x6, _x7) {\n        return _delay2.apply(this, arguments);\n      }\n      return delay;\n    }()\n  }]);\n  return StorageRetryPolicy;\n}(BaseRequestPolicy);","map":{"version":3,"names":["AbortError","BaseRequestPolicy","URLConstants","delay","setURLHost","setURLParameter","logger","NewRetryPolicyFactory","retryOptions","create","nextPolicy","options","StorageRetryPolicy","StorageRetryPolicyType","DEFAULT_RETRY_OPTIONS","maxRetryDelayInMs","maxTries","retryDelayInMs","retryPolicyType","EXPONENTIAL","secondaryHost","tryTimeoutInMs","undefined","RETRY_ABORT_ERROR","_BaseRequestPolicy","_inherits","_super","_createSuper","_this","arguments","length","_classCallCheck","call","Math","floor","min","_createClass","key","value","_sendRequest","_asyncToGenerator","_regeneratorRuntime","mark","_callee","request","wrap","_callee$","_context","prev","next","abrupt","attemptSendRequest","stop","sendRequest","_x","apply","_attemptSendRequest","_callee2","secondaryHas404","attempt","newRequest","isPrimaryRetry","response","_callee2$","_context2","clone","method","url","Parameters","TIMEOUT","toString","info","concat","_nextPolicy","sent","shouldRetry","status","t0","error","message","code","abortSignal","_x2","_x3","_x4","err","retriableErrors","_iterator","_createForOfIteratorHelper","_step","s","n","done","retriableError","name","toUpperCase","includes","e","f","statusCode","startsWith","_delay2","_callee3","delayTimeInMs","_callee3$","_context3","FIXED","pow","random","_x5","_x6","_x7"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\policies\\StorageRetryPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError } from \"@azure/abort-controller\";\n\nimport {\n  AbortSignalLike,\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  RestError,\n  WebResource,\n} from \"@azure/core-http\";\n\nimport { StorageRetryOptions } from \"../StorageRetryPolicyFactory\";\nimport { URLConstants } from \"../utils/constants\";\nimport { delay, setURLHost, setURLParameter } from \"../utils/utils.common\";\nimport { logger } from \"../log\";\n\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @param retryOptions -\n */\nexport function NewRetryPolicyFactory(retryOptions?: StorageRetryOptions): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions): StorageRetryPolicy => {\n      return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n    },\n  };\n}\n\n/**\n * RetryPolicy types.\n */\nexport enum StorageRetryPolicyType {\n  /**\n   * Exponential retry. Retry time delay grows exponentially.\n   */\n  EXPONENTIAL,\n  /**\n   * Linear retry. Retry time delay grows linearly.\n   */\n  FIXED,\n}\n\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS: StorageRetryOptions = {\n  maxRetryDelayInMs: 120 * 1000,\n  maxTries: 4,\n  retryDelayInMs: 4 * 1000,\n  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n  secondaryHost: \"\",\n  tryTimeoutInMs: undefined, // Use server side default timeout strategy\n};\n\nconst RETRY_ABORT_ERROR = new AbortError(\"The operation was aborted.\");\n\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nexport class StorageRetryPolicy extends BaseRequestPolicy {\n  /**\n   * RetryOptions.\n   */\n  private readonly retryOptions: StorageRetryOptions;\n\n  /**\n   * Creates an instance of RetryPolicy.\n   *\n   * @param nextPolicy -\n   * @param options -\n   * @param retryOptions -\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryOptions: StorageRetryOptions = DEFAULT_RETRY_OPTIONS\n  ) {\n    super(nextPolicy, options);\n\n    // Initialize retry options\n    this.retryOptions = {\n      retryPolicyType: retryOptions.retryPolicyType\n        ? retryOptions.retryPolicyType\n        : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n\n      maxTries:\n        retryOptions.maxTries && retryOptions.maxTries >= 1\n          ? Math.floor(retryOptions.maxTries)\n          : DEFAULT_RETRY_OPTIONS.maxTries,\n\n      tryTimeoutInMs:\n        retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0\n          ? retryOptions.tryTimeoutInMs\n          : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n\n      retryDelayInMs:\n        retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0\n          ? Math.min(\n              retryOptions.retryDelayInMs,\n              retryOptions.maxRetryDelayInMs\n                ? retryOptions.maxRetryDelayInMs\n                : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs!\n            )\n          : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n\n      maxRetryDelayInMs:\n        retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0\n          ? retryOptions.maxRetryDelayInMs\n          : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n\n      secondaryHost: retryOptions.secondaryHost\n        ? retryOptions.secondaryHost\n        : DEFAULT_RETRY_OPTIONS.secondaryHost,\n    };\n  }\n\n  /**\n   * Sends request.\n   *\n   * @param request -\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this.attemptSendRequest(request, false, 1);\n  }\n\n  /**\n   * Decide and perform next retry. Won't mutate request parameter.\n   *\n   * @param request -\n   * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then\n   *                                   the resource was not found. This may be due to replication delay. So, in this\n   *                                   case, we'll never try the secondary again for this operation.\n   * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes\n   *                                   the attempt will be performed by this method call.\n   */\n  protected async attemptSendRequest(\n    request: WebResource,\n    secondaryHas404: boolean,\n    attempt: number\n  ): Promise<HttpOperationResponse> {\n    const newRequest: WebResource = request.clone();\n\n    const isPrimaryRetry =\n      secondaryHas404 ||\n      !this.retryOptions.secondaryHost ||\n      !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") ||\n      attempt % 2 === 1;\n\n    if (!isPrimaryRetry) {\n      newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost!);\n    }\n\n    // Set the server-side timeout query parameter \"timeout=[seconds]\"\n    if (this.retryOptions.tryTimeoutInMs) {\n      newRequest.url = setURLParameter(\n        newRequest.url,\n        URLConstants.Parameters.TIMEOUT,\n        Math.floor(this.retryOptions.tryTimeoutInMs! / 1000).toString()\n      );\n    }\n\n    let response: HttpOperationResponse | undefined;\n    try {\n      logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n      response = await this._nextPolicy.sendRequest(newRequest);\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {\n        return response;\n      }\n\n      secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n    } catch (err: any) {\n      logger.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n        throw err;\n      }\n    }\n\n    await this.delay(isPrimaryRetry, attempt, request.abortSignal);\n    return this.attemptSendRequest(request, secondaryHas404, ++attempt);\n  }\n\n  /**\n   * Decide whether to retry according to last HTTP response and retry counters.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param response -\n   * @param err -\n   */\n  protected shouldRetry(\n    isPrimaryRetry: boolean,\n    attempt: number,\n    response?: HttpOperationResponse,\n    err?: RestError\n  ): boolean {\n    if (attempt >= this.retryOptions.maxTries!) {\n      logger.info(\n        `RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions\n          .maxTries!}, no further try.`\n      );\n      return false;\n    }\n\n    // Handle network failures, you may need to customize the list when you implement\n    // your own http client\n    const retriableErrors = [\n      \"ETIMEDOUT\",\n      \"ESOCKETTIMEDOUT\",\n      \"ECONNREFUSED\",\n      \"ECONNRESET\",\n      \"ENOENT\",\n      \"ENOTFOUND\",\n      \"TIMEOUT\",\n      \"EPIPE\",\n      \"REQUEST_SEND_ERROR\", // For default xhr based http client provided in ms-rest-js\n    ];\n    if (err) {\n      for (const retriableError of retriableErrors) {\n        if (\n          err.name.toUpperCase().includes(retriableError) ||\n          err.message.toUpperCase().includes(retriableError) ||\n          (err.code && err.code.toString().toUpperCase() === retriableError)\n        ) {\n          logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n          return true;\n        }\n      }\n    }\n\n    // If attempt was against the secondary & it returned a StatusNotFound (404), then\n    // the resource was not found. This may be due to replication delay. So, in this\n    // case, we'll never try the secondary again for this operation.\n    if (response || err) {\n      const statusCode = response ? response.status : err ? err.statusCode : 0;\n      if (!isPrimaryRetry && statusCode === 404) {\n        logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n        return true;\n      }\n\n      // Server internal error or server timeout\n      if (statusCode === 503 || statusCode === 500) {\n        logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n        return true;\n      }\n    }\n\n    if (err?.code === \"PARSE_ERROR\" && err?.message.startsWith(`Error \"Error: Unclosed root tag`)) {\n      logger.info(\n        \"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\"\n      );\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Delay a calculated time between retries.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param abortSignal -\n   */\n  private async delay(isPrimaryRetry: boolean, attempt: number, abortSignal?: AbortSignalLike) {\n    let delayTimeInMs: number = 0;\n\n    if (isPrimaryRetry) {\n      switch (this.retryOptions.retryPolicyType) {\n        case StorageRetryPolicyType.EXPONENTIAL:\n          delayTimeInMs = Math.min(\n            (Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs!,\n            this.retryOptions.maxRetryDelayInMs!\n          );\n          break;\n        case StorageRetryPolicyType.FIXED:\n          delayTimeInMs = this.retryOptions.retryDelayInMs!;\n          break;\n      }\n    } else {\n      delayTimeInMs = Math.random() * 1000;\n    }\n\n    logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n    return delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}