{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BlobSASPermissions } from \"./BlobSASPermissions\";\nimport { ContainerSASPermissions } from \"./ContainerSASPermissions\";\nimport { StorageSharedKeyCredential } from \"../credentials/StorageSharedKeyCredential\";\nimport { UserDelegationKeyCredential } from \"../credentials/UserDelegationKeyCredential\";\nimport { ipRangeToString } from \"./SasIPRange\";\nimport { SASQueryParameters } from \"./SASQueryParameters\";\nimport { SERVICE_VERSION } from \"../utils/constants\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\nexport function generateBlobSASQueryParameters(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {\n  var version = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;\n  var sharedKeyCredential = sharedKeyCredentialOrUserDelegationKey instanceof StorageSharedKeyCredential ? sharedKeyCredentialOrUserDelegationKey : undefined;\n  var userDelegationKeyCredential;\n  if (sharedKeyCredential === undefined && accountName !== undefined) {\n    userDelegationKeyCredential = new UserDelegationKeyCredential(accountName, sharedKeyCredentialOrUserDelegationKey);\n  }\n  if (sharedKeyCredential === undefined && userDelegationKeyCredential === undefined) {\n    throw TypeError(\"Invalid sharedKeyCredential, userDelegationKey or accountName.\");\n  }\n  // Version 2020-12-06 adds support for encryptionscope in SAS.\n  if (version >= \"2020-12-06\") {\n    if (sharedKeyCredential !== undefined) {\n      return generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential);\n    } else {\n      return generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential);\n    }\n  }\n  // Version 2019-12-12 adds support for the blob tags permission.\n  // Version 2018-11-09 adds support for the signed resource and signed blob snapshot time fields.\n  // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas#constructing-the-signature-string\n  if (version >= \"2018-11-09\") {\n    if (sharedKeyCredential !== undefined) {\n      return generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential);\n    } else {\n      // Version 2020-02-10 delegation SAS signature construction includes preauthorizedAgentObjectId, agentObjectId, correlationId.\n      if (version >= \"2020-02-10\") {\n        return generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential);\n      } else {\n        return generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential);\n      }\n    }\n  }\n  if (version >= \"2015-04-05\") {\n    if (sharedKeyCredential !== undefined) {\n      return generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential);\n    } else {\n      throw new RangeError(\"'version' must be >= '2018-11-09' when generating user delegation SAS using user delegation key.\");\n    }\n  }\n  throw new RangeError(\"'version' must be >= '2015-04-05'.\");\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2015-04-05 AND BEFORE 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential) {\n  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n  if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {\n    throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\");\n  }\n  var resource = \"c\";\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n  }\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  var verifiedPermissions;\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n    }\n  }\n  // Signature is generated on the un-url-encoded values.\n  var stringToSign = [verifiedPermissions ? verifiedPermissions : \"\", blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : \"\", blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : \"\", getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), blobSASSignatureValues.identifier, blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\", blobSASSignatureValues.version, blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\", blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\", blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\", blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\", blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\"].join(\"\\n\");\n  var signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n  return new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType);\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential) {\n  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n  if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {\n    throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\");\n  }\n  var resource = \"c\";\n  var timestamp = blobSASSignatureValues.snapshotTime;\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n    if (blobSASSignatureValues.snapshotTime) {\n      resource = \"bs\";\n    } else if (blobSASSignatureValues.versionId) {\n      resource = \"bv\";\n      timestamp = blobSASSignatureValues.versionId;\n    }\n  }\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  var verifiedPermissions;\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n    }\n  }\n  // Signature is generated on the un-url-encoded values.\n  var stringToSign = [verifiedPermissions ? verifiedPermissions : \"\", blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : \"\", blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : \"\", getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), blobSASSignatureValues.identifier, blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\", blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\", blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\", blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\", blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\"].join(\"\\n\");\n  var signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n  return new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType);\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential) {\n  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n  if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {\n    throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\");\n  }\n  var resource = \"c\";\n  var timestamp = blobSASSignatureValues.snapshotTime;\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n    if (blobSASSignatureValues.snapshotTime) {\n      resource = \"bs\";\n    } else if (blobSASSignatureValues.versionId) {\n      resource = \"bv\";\n      timestamp = blobSASSignatureValues.versionId;\n    }\n  }\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  var verifiedPermissions;\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n    }\n  }\n  // Signature is generated on the un-url-encoded values.\n  var stringToSign = [verifiedPermissions ? verifiedPermissions : \"\", blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : \"\", blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : \"\", getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), blobSASSignatureValues.identifier, blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.encryptionScope, blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\", blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\", blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\", blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\", blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\"].join(\"\\n\");\n  var signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n  return new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, undefined, undefined, undefined, blobSASSignatureValues.encryptionScope);\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential) {\n  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n  // Stored access policies are not supported for a user delegation SAS.\n  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n    throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\");\n  }\n  var resource = \"c\";\n  var timestamp = blobSASSignatureValues.snapshotTime;\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n    if (blobSASSignatureValues.snapshotTime) {\n      resource = \"bs\";\n    } else if (blobSASSignatureValues.versionId) {\n      resource = \"bv\";\n      timestamp = blobSASSignatureValues.versionId;\n    }\n  }\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  var verifiedPermissions;\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n    }\n  }\n  // Signature is generated on the un-url-encoded values.\n  var stringToSign = [verifiedPermissions ? verifiedPermissions : \"\", blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : \"\", blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : \"\", getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), userDelegationKeyCredential.userDelegationKey.signedObjectId, userDelegationKeyCredential.userDelegationKey.signedTenantId, userDelegationKeyCredential.userDelegationKey.signedStartsOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : \"\", userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : \"\", userDelegationKeyCredential.userDelegationKey.signedService, userDelegationKeyCredential.userDelegationKey.signedVersion, blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType].join(\"\\n\");\n  var signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n  return new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey);\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-02-10.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential) {\n  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n  // Stored access policies are not supported for a user delegation SAS.\n  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n    throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\");\n  }\n  var resource = \"c\";\n  var timestamp = blobSASSignatureValues.snapshotTime;\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n    if (blobSASSignatureValues.snapshotTime) {\n      resource = \"bs\";\n    } else if (blobSASSignatureValues.versionId) {\n      resource = \"bv\";\n      timestamp = blobSASSignatureValues.versionId;\n    }\n  }\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  var verifiedPermissions;\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n    }\n  }\n  // Signature is generated on the un-url-encoded values.\n  var stringToSign = [verifiedPermissions ? verifiedPermissions : \"\", blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : \"\", blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : \"\", getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), userDelegationKeyCredential.userDelegationKey.signedObjectId, userDelegationKeyCredential.userDelegationKey.signedTenantId, userDelegationKeyCredential.userDelegationKey.signedStartsOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : \"\", userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : \"\", userDelegationKeyCredential.userDelegationKey.signedService, userDelegationKeyCredential.userDelegationKey.signedVersion, blobSASSignatureValues.preauthorizedAgentObjectId, undefined, blobSASSignatureValues.correlationId, blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType].join(\"\\n\");\n  var signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n  return new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId);\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential) {\n  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n  // Stored access policies are not supported for a user delegation SAS.\n  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n    throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\");\n  }\n  var resource = \"c\";\n  var timestamp = blobSASSignatureValues.snapshotTime;\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n    if (blobSASSignatureValues.snapshotTime) {\n      resource = \"bs\";\n    } else if (blobSASSignatureValues.versionId) {\n      resource = \"bv\";\n      timestamp = blobSASSignatureValues.versionId;\n    }\n  }\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  var verifiedPermissions;\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n    }\n  }\n  // Signature is generated on the un-url-encoded values.\n  var stringToSign = [verifiedPermissions ? verifiedPermissions : \"\", blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : \"\", blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : \"\", getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), userDelegationKeyCredential.userDelegationKey.signedObjectId, userDelegationKeyCredential.userDelegationKey.signedTenantId, userDelegationKeyCredential.userDelegationKey.signedStartsOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : \"\", userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : \"\", userDelegationKeyCredential.userDelegationKey.signedService, userDelegationKeyCredential.userDelegationKey.signedVersion, blobSASSignatureValues.preauthorizedAgentObjectId, undefined, blobSASSignatureValues.correlationId, blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.encryptionScope, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType].join(\"\\n\");\n  var signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n  return new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId, blobSASSignatureValues.encryptionScope);\n}\nfunction getCanonicalName(accountName, containerName, blobName) {\n  // Container: \"/blob/account/containerName\"\n  // Blob:      \"/blob/account/containerName/blobName\"\n  var elements = [\"/blob/\".concat(accountName, \"/\").concat(containerName)];\n  if (blobName) {\n    elements.push(\"/\".concat(blobName));\n  }\n  return elements.join(\"\");\n}\nfunction SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues) {\n  var version = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;\n  if (blobSASSignatureValues.snapshotTime && version < \"2018-11-09\") {\n    throw RangeError(\"'version' must be >= '2018-11-09' when providing 'snapshotTime'.\");\n  }\n  if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.snapshotTime) {\n    throw RangeError(\"Must provide 'blobName' when providing 'snapshotTime'.\");\n  }\n  if (blobSASSignatureValues.versionId && version < \"2019-10-10\") {\n    throw RangeError(\"'version' must be >= '2019-10-10' when providing 'versionId'.\");\n  }\n  if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.versionId) {\n    throw RangeError(\"Must provide 'blobName' when providing 'versionId'.\");\n  }\n  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.setImmutabilityPolicy && version < \"2020-08-04\") {\n    throw RangeError(\"'version' must be >= '2020-08-04' when provided 'i' permission.\");\n  }\n  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.deleteVersion && version < \"2019-10-10\") {\n    throw RangeError(\"'version' must be >= '2019-10-10' when providing 'x' permission.\");\n  }\n  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.permanentDelete && version < \"2019-10-10\") {\n    throw RangeError(\"'version' must be >= '2019-10-10' when providing 'y' permission.\");\n  }\n  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.tag && version < \"2019-12-12\") {\n    throw RangeError(\"'version' must be >= '2019-12-12' when providing 't' permission.\");\n  }\n  if (version < \"2020-02-10\" && blobSASSignatureValues.permissions && (blobSASSignatureValues.permissions.move || blobSASSignatureValues.permissions.execute)) {\n    throw RangeError(\"'version' must be >= '2020-02-10' when providing the 'm' or 'e' permission.\");\n  }\n  if (version < \"2021-04-10\" && blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.filterByTags) {\n    throw RangeError(\"'version' must be >= '2021-04-10' when providing the 'f' permission.\");\n  }\n  if (version < \"2020-02-10\" && (blobSASSignatureValues.preauthorizedAgentObjectId || blobSASSignatureValues.correlationId)) {\n    throw RangeError(\"'version' must be >= '2020-02-10' when providing 'preauthorizedAgentObjectId' or 'correlationId'.\");\n  }\n  if (blobSASSignatureValues.encryptionScope && version < \"2020-12-06\") {\n    throw RangeError(\"'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.\");\n  }\n  blobSASSignatureValues.version = version;\n  return blobSASSignatureValues;\n}","map":{"version":3,"names":["BlobSASPermissions","ContainerSASPermissions","StorageSharedKeyCredential","UserDelegationKeyCredential","ipRangeToString","SASQueryParameters","SERVICE_VERSION","truncatedISO8061Date","generateBlobSASQueryParameters","blobSASSignatureValues","sharedKeyCredentialOrUserDelegationKey","accountName","version","sharedKeyCredential","undefined","userDelegationKeyCredential","TypeError","generateBlobSASQueryParameters20201206","generateBlobSASQueryParametersUDK20201206","generateBlobSASQueryParameters20181109","generateBlobSASQueryParametersUDK20200210","generateBlobSASQueryParametersUDK20181109","generateBlobSASQueryParameters20150405","RangeError","SASSignatureValuesSanityCheckAndAutofill","identifier","permissions","expiresOn","resource","blobName","verifiedPermissions","parse","toString","stringToSign","startsOn","getCanonicalName","containerName","ipRange","protocol","cacheControl","contentDisposition","contentEncoding","contentLanguage","contentType","join","signature","computeHMACSHA256","timestamp","snapshotTime","versionId","encryptionScope","userDelegationKey","signedObjectId","signedTenantId","signedStartsOn","signedExpiresOn","signedService","signedVersion","preauthorizedAgentObjectId","correlationId","elements","concat","push","setImmutabilityPolicy","deleteVersion","permanentDelete","tag","move","execute","filterByTags"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\sas\\BlobSASSignatureValues.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BlobSASPermissions } from \"./BlobSASPermissions\";\nimport { UserDelegationKey } from \"../BlobServiceClient\";\nimport { ContainerSASPermissions } from \"./ContainerSASPermissions\";\nimport { StorageSharedKeyCredential } from \"../credentials/StorageSharedKeyCredential\";\nimport { UserDelegationKeyCredential } from \"../credentials/UserDelegationKeyCredential\";\nimport { ipRangeToString, SasIPRange } from \"./SasIPRange\";\nimport { SASProtocol, SASQueryParameters } from \"./SASQueryParameters\";\nimport { SERVICE_VERSION } from \"../utils/constants\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * BlobSASSignatureValues is used to help generating Blob service SAS tokens for containers or blobs.\n */\nexport interface BlobSASSignatureValues {\n  /**\n   * The version of the service this SAS will target. If not specified, it will default to the version targeted by the\n   * library.\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols, HTTPS only or HTTPSandHTTP\n   */\n  protocol?: SASProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   */\n  startsOn?: Date;\n\n  /**\n   * Optional only when identifier is provided. The time after which the SAS will no longer work.\n   */\n  expiresOn?: Date;\n\n  /**\n   * Optional only when identifier is provided.\n   * Please refer to either {@link ContainerSASPermissions} or {@link BlobSASPermissions} depending on the resource\n   * being accessed for help constructing the permissions string.\n   */\n  permissions?: BlobSASPermissions | ContainerSASPermissions;\n\n  /**\n   * Optional. IP ranges allowed in this SAS.\n   */\n  ipRange?: SasIPRange;\n\n  /**\n   * The name of the container the SAS user may access.\n   */\n  containerName: string;\n\n  /**\n   * Optional. The blob name of the SAS user may access. Required if snapshotTime or versionId is provided.\n   */\n  blobName?: string;\n\n  /**\n   * Optional. Snapshot timestamp string the SAS user may access. Only supported from API version 2018-11-09.\n   */\n  snapshotTime?: string;\n\n  /**\n   * Optional. VersionId of the blob version the SAS user may access. Only supported from API version 2019-10-10.\n   */\n  versionId?: string;\n\n  /**\n   * Optional. The name of the access policy on the container this SAS references if any.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy\n   */\n  identifier?: string;\n\n  /**\n   * Optional. Encryption scope to use when sending requests authorized with this SAS URI.\n   */\n  encryptionScope?: string;\n\n  /**\n   * Optional. The cache-control header for the SAS.\n   */\n  cacheControl?: string;\n\n  /**\n   * Optional. The content-disposition header for the SAS.\n   */\n  contentDisposition?: string;\n\n  /**\n   * Optional. The content-encoding header for the SAS.\n   */\n  contentEncoding?: string;\n\n  /**\n   * Optional. The content-language header for the SAS.\n   */\n  contentLanguage?: string;\n\n  /**\n   * Optional. The content-type header for the SAS.\n   */\n  contentType?: string;\n\n  /**\n   * Optional. Beginning in version 2020-02-10, specifies the Authorized AAD Object ID in GUID format. The AAD Object ID of a user\n   * authorized by the owner of the user delegation key to perform the action granted by the SAS. The Azure Storage service will\n   * ensure that the owner of the user delegation key has the required permissions before granting access but no additional permission\n   * check for the user specified in this value will be performed. This is only used for User Delegation SAS.\n   */\n  preauthorizedAgentObjectId?: string;\n\n  /**\n   * Optional. Beginning in version 2020-02-10, this is a GUID value that will be logged in the storage diagnostic logs and can be used to\n   * correlate SAS generation with storage resource access. This is only used for User Delegation SAS.\n   */\n  correlationId?: string;\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * Fill in the required details before running the following snippets.\n *\n * Example usage:\n *\n * ```js\n * // Generate service level SAS for a container\n * const containerSAS = generateBlobSASQueryParameters({\n *     containerName, // Required\n *     permissions: ContainerSASPermissions.parse(\"racwdl\"), // Required\n *     startsOn: new Date(), // Optional\n *     expiresOn: new Date(new Date().valueOf() + 86400), // Required. Date type\n *     ipRange: { start: \"0.0.0.0\", end: \"255.255.255.255\" }, // Optional\n *     protocol: SASProtocol.HttpsAndHttp, // Optional\n *     version: \"2016-05-31\" // Optional\n *   },\n *   sharedKeyCredential // StorageSharedKeyCredential - `new StorageSharedKeyCredential(account, accountKey)`\n * ).toString();\n * ```\n *\n * Example using an identifier:\n *\n * ```js\n * // Generate service level SAS for a container with identifier\n * // startsOn & permissions are optional when identifier is provided\n * const identifier = \"unique-id\";\n * await containerClient.setAccessPolicy(undefined, [\n *   {\n *     accessPolicy: {\n *       expiresOn: new Date(new Date().valueOf() + 86400), // Date type\n *       permissions: ContainerSASPermissions.parse(\"racwdl\").toString(),\n *       startsOn: new Date() // Date type\n *     },\n *     id: identifier\n *   }\n * ]);\n *\n * const containerSAS = generateBlobSASQueryParameters(\n *   {\n *     containerName, // Required\n *     identifier // Required\n *   },\n *   sharedKeyCredential // StorageSharedKeyCredential - `new StorageSharedKeyCredential(account, accountKey)`\n * ).toString();\n * ```\n *\n * Example using a blob name:\n *\n * ```js\n * // Generate service level SAS for a blob\n * const blobSAS = generateBlobSASQueryParameters({\n *     containerName, // Required\n *     blobName, // Required\n *     permissions: BlobSASPermissions.parse(\"racwd\"), // Required\n *     startsOn: new Date(), // Optional\n *     expiresOn: new Date(new Date().valueOf() + 86400), // Required. Date type\n *     cacheControl: \"cache-control-override\", // Optional\n *     contentDisposition: \"content-disposition-override\", // Optional\n *     contentEncoding: \"content-encoding-override\", // Optional\n *     contentLanguage: \"content-language-override\", // Optional\n *     contentType: \"content-type-override\", // Optional\n *     ipRange: { start: \"0.0.0.0\", end: \"255.255.255.255\" }, // Optional\n *     protocol: SASProtocol.HttpsAndHttp, // Optional\n *     version: \"2016-05-31\" // Optional\n *   },\n *   sharedKeyCredential // StorageSharedKeyCredential - `new StorageSharedKeyCredential(account, accountKey)`\n * ).toString();\n * ```\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nexport function generateBlobSASQueryParameters(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters;\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Creates an instance of SASQueryParameters.\n * WARNING: identifier will be ignored when generating user delegation SAS, permissions and expiresOn are required.\n *\n * Example usage:\n *\n * ```js\n * // Generate user delegation SAS for a container\n * const userDelegationKey = await blobServiceClient.getUserDelegationKey(startsOn, expiresOn);\n * const containerSAS = generateBlobSASQueryParameters({\n *     containerName, // Required\n *     permissions: ContainerSASPermissions.parse(\"racwdl\"), // Required\n *     startsOn, // Optional. Date type\n *     expiresOn, // Required. Date type\n *     ipRange: { start: \"0.0.0.0\", end: \"255.255.255.255\" }, // Optional\n *     protocol: SASProtocol.HttpsAndHttp, // Optional\n *     version: \"2018-11-09\" // Must greater than or equal to 2018-11-09 to generate user delegation SAS\n *   },\n *   userDelegationKey, // UserDelegationKey\n *   accountName\n * ).toString();\n * ```\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKey - Return value of `blobServiceClient.getUserDelegationKey()`\n * @param accountName -\n */\nexport function generateBlobSASQueryParameters(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  userDelegationKey: UserDelegationKey,\n  accountName: string\n): SASQueryParameters;\n\nexport function generateBlobSASQueryParameters(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  sharedKeyCredentialOrUserDelegationKey: StorageSharedKeyCredential | UserDelegationKey,\n  accountName?: string\n): SASQueryParameters {\n  const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;\n\n  const sharedKeyCredential =\n    sharedKeyCredentialOrUserDelegationKey instanceof StorageSharedKeyCredential\n      ? sharedKeyCredentialOrUserDelegationKey\n      : undefined;\n  let userDelegationKeyCredential: UserDelegationKeyCredential | undefined;\n\n  if (sharedKeyCredential === undefined && accountName !== undefined) {\n    userDelegationKeyCredential = new UserDelegationKeyCredential(\n      accountName,\n      sharedKeyCredentialOrUserDelegationKey as UserDelegationKey\n    );\n  }\n\n  if (sharedKeyCredential === undefined && userDelegationKeyCredential === undefined) {\n    throw TypeError(\"Invalid sharedKeyCredential, userDelegationKey or accountName.\");\n  }\n\n  // Version 2020-12-06 adds support for encryptionscope in SAS.\n  if (version >= \"2020-12-06\") {\n    if (sharedKeyCredential !== undefined) {\n      return generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential);\n    } else {\n      return generateBlobSASQueryParametersUDK20201206(\n        blobSASSignatureValues,\n        userDelegationKeyCredential!\n      );\n    }\n  }\n\n  // Version 2019-12-12 adds support for the blob tags permission.\n  // Version 2018-11-09 adds support for the signed resource and signed blob snapshot time fields.\n  // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas#constructing-the-signature-string\n  if (version >= \"2018-11-09\") {\n    if (sharedKeyCredential !== undefined) {\n      return generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential);\n    } else {\n      // Version 2020-02-10 delegation SAS signature construction includes preauthorizedAgentObjectId, agentObjectId, correlationId.\n      if (version >= \"2020-02-10\") {\n        return generateBlobSASQueryParametersUDK20200210(\n          blobSASSignatureValues,\n          userDelegationKeyCredential!\n        );\n      } else {\n        return generateBlobSASQueryParametersUDK20181109(\n          blobSASSignatureValues,\n          userDelegationKeyCredential!\n        );\n      }\n    }\n  }\n\n  if (version >= \"2015-04-05\") {\n    if (sharedKeyCredential !== undefined) {\n      return generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential);\n    } else {\n      throw new RangeError(\n        \"'version' must be >= '2018-11-09' when generating user delegation SAS using user delegation key.\"\n      );\n    }\n  }\n\n  throw new RangeError(\"'version' must be >= '2015-04-05'.\");\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2015-04-05 AND BEFORE 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20150405(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters {\n  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n\n  if (\n    !blobSASSignatureValues.identifier &&\n    !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)\n  ) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\"\n    );\n  }\n\n  let resource: string = \"c\";\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    blobSASSignatureValues.startsOn\n      ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n      : \"\",\n    blobSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      sharedKeyCredential.accountName,\n      blobSASSignatureValues.containerName,\n      blobSASSignatureValues.blobName\n    ),\n    blobSASSignatureValues.identifier,\n    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n    blobSASSignatureValues.version,\n    blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n    blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n    blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n    blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n    blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n  ].join(\"\\n\");\n\n  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    blobSASSignatureValues.version!,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    blobSASSignatureValues.protocol,\n    blobSASSignatureValues.startsOn,\n    blobSASSignatureValues.expiresOn,\n    blobSASSignatureValues.ipRange,\n    blobSASSignatureValues.identifier,\n    resource,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType\n  );\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20181109(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters {\n  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n\n  if (\n    !blobSASSignatureValues.identifier &&\n    !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)\n  ) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\"\n    );\n  }\n\n  let resource: string = \"c\";\n  let timestamp = blobSASSignatureValues.snapshotTime;\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n    if (blobSASSignatureValues.snapshotTime) {\n      resource = \"bs\";\n    } else if (blobSASSignatureValues.versionId) {\n      resource = \"bv\";\n      timestamp = blobSASSignatureValues.versionId;\n    }\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    blobSASSignatureValues.startsOn\n      ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n      : \"\",\n    blobSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      sharedKeyCredential.accountName,\n      blobSASSignatureValues.containerName,\n      blobSASSignatureValues.blobName\n    ),\n    blobSASSignatureValues.identifier,\n    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n    blobSASSignatureValues.version,\n    resource,\n    timestamp,\n    blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n    blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n    blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n    blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n    blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n  ].join(\"\\n\");\n\n  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    blobSASSignatureValues.version!,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    blobSASSignatureValues.protocol,\n    blobSASSignatureValues.startsOn,\n    blobSASSignatureValues.expiresOn,\n    blobSASSignatureValues.ipRange,\n    blobSASSignatureValues.identifier,\n    resource,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType\n  );\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20201206(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters {\n  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n\n  if (\n    !blobSASSignatureValues.identifier &&\n    !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)\n  ) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\"\n    );\n  }\n\n  let resource: string = \"c\";\n  let timestamp = blobSASSignatureValues.snapshotTime;\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n    if (blobSASSignatureValues.snapshotTime) {\n      resource = \"bs\";\n    } else if (blobSASSignatureValues.versionId) {\n      resource = \"bv\";\n      timestamp = blobSASSignatureValues.versionId;\n    }\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    blobSASSignatureValues.startsOn\n      ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n      : \"\",\n    blobSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      sharedKeyCredential.accountName,\n      blobSASSignatureValues.containerName,\n      blobSASSignatureValues.blobName\n    ),\n    blobSASSignatureValues.identifier,\n    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n    blobSASSignatureValues.version,\n    resource,\n    timestamp,\n    blobSASSignatureValues.encryptionScope,\n    blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n    blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n    blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n    blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n    blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n  ].join(\"\\n\");\n\n  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    blobSASSignatureValues.version!,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    blobSASSignatureValues.protocol,\n    blobSASSignatureValues.startsOn,\n    blobSASSignatureValues.expiresOn,\n    blobSASSignatureValues.ipRange,\n    blobSASSignatureValues.identifier,\n    resource,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType,\n    undefined,\n    undefined,\n    undefined,\n    blobSASSignatureValues.encryptionScope\n  );\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20181109(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  userDelegationKeyCredential: UserDelegationKeyCredential\n): SASQueryParameters {\n  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n\n  // Stored access policies are not supported for a user delegation SAS.\n  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\"\n    );\n  }\n\n  let resource: string = \"c\";\n  let timestamp = blobSASSignatureValues.snapshotTime;\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n    if (blobSASSignatureValues.snapshotTime) {\n      resource = \"bs\";\n    } else if (blobSASSignatureValues.versionId) {\n      resource = \"bv\";\n      timestamp = blobSASSignatureValues.versionId;\n    }\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    blobSASSignatureValues.startsOn\n      ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n      : \"\",\n    blobSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      userDelegationKeyCredential.accountName,\n      blobSASSignatureValues.containerName,\n      blobSASSignatureValues.blobName\n    ),\n    userDelegationKeyCredential.userDelegationKey.signedObjectId,\n    userDelegationKeyCredential.userDelegationKey.signedTenantId,\n    userDelegationKeyCredential.userDelegationKey.signedStartsOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedService,\n    userDelegationKeyCredential.userDelegationKey.signedVersion,\n    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n    blobSASSignatureValues.version,\n    resource,\n    timestamp,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType,\n  ].join(\"\\n\");\n\n  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n  return new SASQueryParameters(\n    blobSASSignatureValues.version!,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    blobSASSignatureValues.protocol,\n    blobSASSignatureValues.startsOn,\n    blobSASSignatureValues.expiresOn,\n    blobSASSignatureValues.ipRange,\n    blobSASSignatureValues.identifier,\n    resource,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType,\n    userDelegationKeyCredential.userDelegationKey\n  );\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-02-10.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20200210(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  userDelegationKeyCredential: UserDelegationKeyCredential\n): SASQueryParameters {\n  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n\n  // Stored access policies are not supported for a user delegation SAS.\n  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\"\n    );\n  }\n\n  let resource: string = \"c\";\n  let timestamp = blobSASSignatureValues.snapshotTime;\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n    if (blobSASSignatureValues.snapshotTime) {\n      resource = \"bs\";\n    } else if (blobSASSignatureValues.versionId) {\n      resource = \"bv\";\n      timestamp = blobSASSignatureValues.versionId;\n    }\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    blobSASSignatureValues.startsOn\n      ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n      : \"\",\n    blobSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      userDelegationKeyCredential.accountName,\n      blobSASSignatureValues.containerName,\n      blobSASSignatureValues.blobName\n    ),\n    userDelegationKeyCredential.userDelegationKey.signedObjectId,\n    userDelegationKeyCredential.userDelegationKey.signedTenantId,\n    userDelegationKeyCredential.userDelegationKey.signedStartsOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedService,\n    userDelegationKeyCredential.userDelegationKey.signedVersion,\n    blobSASSignatureValues.preauthorizedAgentObjectId,\n    undefined, // agentObjectId\n    blobSASSignatureValues.correlationId,\n    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n    blobSASSignatureValues.version,\n    resource,\n    timestamp,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType,\n  ].join(\"\\n\");\n\n  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n  return new SASQueryParameters(\n    blobSASSignatureValues.version!,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    blobSASSignatureValues.protocol,\n    blobSASSignatureValues.startsOn,\n    blobSASSignatureValues.expiresOn,\n    blobSASSignatureValues.ipRange,\n    blobSASSignatureValues.identifier,\n    resource,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType,\n    userDelegationKeyCredential.userDelegationKey,\n    blobSASSignatureValues.preauthorizedAgentObjectId,\n    blobSASSignatureValues.correlationId\n  );\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20201206(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  userDelegationKeyCredential: UserDelegationKeyCredential\n): SASQueryParameters {\n  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n\n  // Stored access policies are not supported for a user delegation SAS.\n  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\"\n    );\n  }\n\n  let resource: string = \"c\";\n  let timestamp = blobSASSignatureValues.snapshotTime;\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n    if (blobSASSignatureValues.snapshotTime) {\n      resource = \"bs\";\n    } else if (blobSASSignatureValues.versionId) {\n      resource = \"bv\";\n      timestamp = blobSASSignatureValues.versionId;\n    }\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    blobSASSignatureValues.startsOn\n      ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n      : \"\",\n    blobSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      userDelegationKeyCredential.accountName,\n      blobSASSignatureValues.containerName,\n      blobSASSignatureValues.blobName\n    ),\n    userDelegationKeyCredential.userDelegationKey.signedObjectId,\n    userDelegationKeyCredential.userDelegationKey.signedTenantId,\n    userDelegationKeyCredential.userDelegationKey.signedStartsOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedService,\n    userDelegationKeyCredential.userDelegationKey.signedVersion,\n    blobSASSignatureValues.preauthorizedAgentObjectId,\n    undefined, // agentObjectId\n    blobSASSignatureValues.correlationId,\n    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n    blobSASSignatureValues.version,\n    resource,\n    timestamp,\n    blobSASSignatureValues.encryptionScope,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType,\n  ].join(\"\\n\");\n\n  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n  return new SASQueryParameters(\n    blobSASSignatureValues.version!,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    blobSASSignatureValues.protocol,\n    blobSASSignatureValues.startsOn,\n    blobSASSignatureValues.expiresOn,\n    blobSASSignatureValues.ipRange,\n    blobSASSignatureValues.identifier,\n    resource,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType,\n    userDelegationKeyCredential.userDelegationKey,\n    blobSASSignatureValues.preauthorizedAgentObjectId,\n    blobSASSignatureValues.correlationId,\n    blobSASSignatureValues.encryptionScope\n  );\n}\n\nfunction getCanonicalName(accountName: string, containerName: string, blobName?: string): string {\n  // Container: \"/blob/account/containerName\"\n  // Blob:      \"/blob/account/containerName/blobName\"\n  const elements: string[] = [`/blob/${accountName}/${containerName}`];\n  if (blobName) {\n    elements.push(`/${blobName}`);\n  }\n  return elements.join(\"\");\n}\n\nfunction SASSignatureValuesSanityCheckAndAutofill(\n  blobSASSignatureValues: BlobSASSignatureValues\n): BlobSASSignatureValues {\n  const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;\n  if (blobSASSignatureValues.snapshotTime && version < \"2018-11-09\") {\n    throw RangeError(\"'version' must be >= '2018-11-09' when providing 'snapshotTime'.\");\n  }\n  if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.snapshotTime) {\n    throw RangeError(\"Must provide 'blobName' when providing 'snapshotTime'.\");\n  }\n\n  if (blobSASSignatureValues.versionId && version < \"2019-10-10\") {\n    throw RangeError(\"'version' must be >= '2019-10-10' when providing 'versionId'.\");\n  }\n  if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.versionId) {\n    throw RangeError(\"Must provide 'blobName' when providing 'versionId'.\");\n  }\n\n  if (\n    blobSASSignatureValues.permissions &&\n    blobSASSignatureValues.permissions.setImmutabilityPolicy &&\n    version < \"2020-08-04\"\n  ) {\n    throw RangeError(\"'version' must be >= '2020-08-04' when provided 'i' permission.\");\n  }\n\n  if (\n    blobSASSignatureValues.permissions &&\n    blobSASSignatureValues.permissions.deleteVersion &&\n    version < \"2019-10-10\"\n  ) {\n    throw RangeError(\"'version' must be >= '2019-10-10' when providing 'x' permission.\");\n  }\n\n  if (\n    blobSASSignatureValues.permissions &&\n    blobSASSignatureValues.permissions.permanentDelete &&\n    version < \"2019-10-10\"\n  ) {\n    throw RangeError(\"'version' must be >= '2019-10-10' when providing 'y' permission.\");\n  }\n\n  if (\n    blobSASSignatureValues.permissions &&\n    blobSASSignatureValues.permissions.tag &&\n    version < \"2019-12-12\"\n  ) {\n    throw RangeError(\"'version' must be >= '2019-12-12' when providing 't' permission.\");\n  }\n\n  if (\n    version < \"2020-02-10\" &&\n    blobSASSignatureValues.permissions &&\n    (blobSASSignatureValues.permissions.move || blobSASSignatureValues.permissions.execute)\n  ) {\n    throw RangeError(\"'version' must be >= '2020-02-10' when providing the 'm' or 'e' permission.\");\n  }\n\n  if (\n    version < \"2021-04-10\" &&\n    blobSASSignatureValues.permissions &&\n    (blobSASSignatureValues.permissions as ContainerSASPermissions).filterByTags\n  ) {\n    throw RangeError(\"'version' must be >= '2021-04-10' when providing the 'f' permission.\");\n  }\n\n  if (\n    version < \"2020-02-10\" &&\n    (blobSASSignatureValues.preauthorizedAgentObjectId || blobSASSignatureValues.correlationId)\n  ) {\n    throw RangeError(\n      \"'version' must be >= '2020-02-10' when providing 'preauthorizedAgentObjectId' or 'correlationId'.\"\n    );\n  }\n\n  if (blobSASSignatureValues.encryptionScope && version < \"2020-12-06\") {\n    throw RangeError(\"'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.\");\n  }\n\n  blobSASSignatureValues.version = version;\n  return blobSASSignatureValues;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}