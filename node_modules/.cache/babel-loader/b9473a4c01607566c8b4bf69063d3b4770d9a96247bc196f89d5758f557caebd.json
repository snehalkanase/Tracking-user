{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { generateUuid } from \"@azure/core-http\";\nimport { StorageClientContext } from \"./generated/src/index\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { Blob as StorageBlob, Container } from \"./generated/src/operations\";\nimport { ETagNone } from \"./utils/constants\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\n/**\n * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.\n */\nexport class BlobLeaseClient {\n  /**\n   * Creates an instance of BlobLeaseClient.\n   * @param client - The client to make the lease operation requests.\n   * @param leaseId - Initial proposed lease id.\n   */\n  constructor(client, leaseId) {\n    const clientContext = new StorageClientContext(client.url, client.pipeline.toServiceClientOptions());\n    this._url = client.url;\n    if (client.name === undefined) {\n      this._isContainer = true;\n      this._containerOrBlobOperation = new Container(clientContext);\n    } else {\n      this._isContainer = false;\n      this._containerOrBlobOperation = new StorageBlob(clientContext);\n    }\n    if (!leaseId) {\n      leaseId = generateUuid();\n    }\n    this._leaseId = leaseId;\n  }\n  /**\n   * Gets the lease Id.\n   *\n   * @readonly\n   */\n  get leaseId() {\n    return this._leaseId;\n  }\n  /**\n   * Gets the url.\n   *\n   * @readonly\n   */\n  get url() {\n    return this._url;\n  }\n  /**\n   * Establishes and manages a lock on a container for delete operations, or on a blob\n   * for write and delete operations.\n   * The lock duration can be 15 to 60 seconds, or can be infinite.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param duration - Must be between 15 to 60 seconds, or infinite (-1)\n   * @param options - option to configure lease management operations.\n   * @returns Response data for acquire lease operation.\n   */\n  async acquireLease(duration) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _a, _b, _c, _d, _e, _f;\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BlobLeaseClient-acquireLease\", options);\n    if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n      throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n    }\n    try {\n      return await this._containerOrBlobOperation.acquireLease(Object.assign({\n        abortSignal: options.abortSignal,\n        duration,\n        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n          ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n        }),\n        proposedLeaseId: this._leaseId\n      }, convertTracingToRequestOptionsBase(updatedOptions)));\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * To change the ID of the lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param proposedLeaseId - the proposed new lease Id.\n   * @param options - option to configure lease management operations.\n   * @returns Response data for change lease operation.\n   */\n  async changeLease(proposedLeaseId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _a, _b, _c, _d, _e, _f;\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BlobLeaseClient-changeLease\", options);\n    if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n      throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n    }\n    try {\n      const response = await this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId, Object.assign({\n        abortSignal: options.abortSignal,\n        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n          ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n        })\n      }, convertTracingToRequestOptionsBase(updatedOptions)));\n      this._leaseId = proposedLeaseId;\n      return response;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * To free the lease if it is no longer needed so that another client may\n   * immediately acquire a lease against the container or the blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param options - option to configure lease management operations.\n   * @returns Response data for release lease operation.\n   */\n  async releaseLease() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _a, _b, _c, _d, _e, _f;\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BlobLeaseClient-releaseLease\", options);\n    if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n      throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n    }\n    try {\n      return await this._containerOrBlobOperation.releaseLease(this._leaseId, Object.assign({\n        abortSignal: options.abortSignal,\n        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n          ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n        })\n      }, convertTracingToRequestOptionsBase(updatedOptions)));\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * To renew the lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param options - Optional option to configure lease management operations.\n   * @returns Response data for renew lease operation.\n   */\n  async renewLease() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _a, _b, _c, _d, _e, _f;\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BlobLeaseClient-renewLease\", options);\n    if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n      throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n    }\n    try {\n      return await this._containerOrBlobOperation.renewLease(this._leaseId, Object.assign({\n        abortSignal: options.abortSignal,\n        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n          ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n        })\n      }, convertTracingToRequestOptionsBase(updatedOptions)));\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * To end the lease but ensure that another client cannot acquire a new lease\n   * until the current lease period has expired.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param breakPeriod - Break period\n   * @param options - Optional options to configure lease management operations.\n   * @returns Response data for break lease operation.\n   */\n  async breakLease(breakPeriod) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _a, _b, _c, _d, _e, _f;\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BlobLeaseClient-breakLease\", options);\n    if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n      throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n    }\n    try {\n      const operationOptions = Object.assign({\n        abortSignal: options.abortSignal,\n        breakPeriod,\n        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n          ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n        })\n      }, convertTracingToRequestOptionsBase(updatedOptions));\n      return await this._containerOrBlobOperation.breakLease(operationOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}","map":{"version":3,"names":["generateUuid","StorageClientContext","SpanStatusCode","Blob","StorageBlob","Container","ETagNone","convertTracingToRequestOptionsBase","createSpan","BlobLeaseClient","constructor","client","leaseId","clientContext","url","pipeline","toServiceClientOptions","_url","name","undefined","_isContainer","_containerOrBlobOperation","_leaseId","acquireLease","duration","options","arguments","length","span","updatedOptions","_a","conditions","ifMatch","_b","_c","ifNoneMatch","_d","_e","tagConditions","RangeError","Object","assign","abortSignal","modifiedAccessConditions","ifTags","_f","proposedLeaseId","e","setStatus","code","ERROR","message","end","changeLease","response","releaseLease","renewLease","breakLease","breakPeriod","operationOptions"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\BlobLeaseClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { generateUuid, HttpResponse } from \"@azure/core-http\";\nimport { StorageClientContext } from \"./generated/src/index\";\nimport { ContainerBreakLeaseOptionalParams } from \"./generatedModels\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { Blob as StorageBlob, Container } from \"./generated/src/operations\";\nimport { ModifiedAccessConditions } from \"./models\";\nimport { CommonOptions } from \"./StorageClient\";\nimport { ETagNone } from \"./utils/constants\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { BlobClient } from \"./Clients\";\nimport { ContainerClient } from \"./ContainerClient\";\n\n/**\n * The details for a specific lease.\n */\nexport interface Lease {\n  /**\n   * The ETag contains a value that you can use to\n   * perform operations conditionally. If the request version is 2011-08-18 or\n   * newer, the ETag value will be in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the container was\n   * last modified. Any operation that modifies the blob, including an update\n   * of the blob's metadata or properties, changes the last-modified time of\n   * the blob.\n   */\n  lastModified?: Date;\n  /**\n   * Uniquely identifies a container's lease\n   */\n  leaseId?: string;\n  /**\n   * Approximate time remaining in the lease\n   * period, in seconds.\n   */\n  leaseTime?: number;\n  /**\n   * This header uniquely identifies the request\n   * that was made and can be used for troubleshooting the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the Blob service used\n   * to execute the request. This header is returned for requests made against\n   * version 2009-09-19 and above.\n   */\n  version?: string;\n  /**\n   * UTC date/time value generated by the service that\n   * indicates the time at which the response was initiated\n   */\n  date?: Date;\n  /**\n   * Error code if any associated with the response that returned\n   * the Lease information.\n   */\n  errorCode?: string;\n}\n\n/**\n * Contains the response data for operations that create, modify, or delete a lease.\n *\n * See {@link BlobLeaseClient}.\n */\nexport type LeaseOperationResponse = Lease & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: HttpResponse & {\n    /**\n     * The parsed HTTP response headers.\n     */\n    parsedHeaders: Lease;\n  };\n};\n\n/**\n * Configures lease operations.\n */\nexport interface LeaseOperationOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when changing the lease.\n   */\n  conditions?: ModifiedAccessConditions;\n}\n\n/**\n * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.\n */\nexport class BlobLeaseClient {\n  private _leaseId: string;\n  private _url: string;\n  private _containerOrBlobOperation: Container | StorageBlob;\n  private _isContainer: boolean;\n\n  /**\n   * Gets the lease Id.\n   *\n   * @readonly\n   */\n  public get leaseId(): string {\n    return this._leaseId;\n  }\n\n  /**\n   * Gets the url.\n   *\n   * @readonly\n   */\n  public get url(): string {\n    return this._url;\n  }\n\n  /**\n   * Creates an instance of BlobLeaseClient.\n   * @param client - The client to make the lease operation requests.\n   * @param leaseId - Initial proposed lease id.\n   */\n  constructor(client: ContainerClient | BlobClient, leaseId?: string) {\n    const clientContext = new StorageClientContext(\n      client.url,\n      (client as any).pipeline.toServiceClientOptions()\n    );\n    this._url = client.url;\n\n    if ((client as BlobClient).name === undefined) {\n      this._isContainer = true;\n      this._containerOrBlobOperation = new Container(clientContext);\n    } else {\n      this._isContainer = false;\n      this._containerOrBlobOperation = new StorageBlob(clientContext);\n    }\n\n    if (!leaseId) {\n      leaseId = generateUuid();\n    }\n    this._leaseId = leaseId;\n  }\n\n  /**\n   * Establishes and manages a lock on a container for delete operations, or on a blob\n   * for write and delete operations.\n   * The lock duration can be 15 to 60 seconds, or can be infinite.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param duration - Must be between 15 to 60 seconds, or infinite (-1)\n   * @param options - option to configure lease management operations.\n   * @returns Response data for acquire lease operation.\n   */\n  public async acquireLease(\n    duration: number,\n    options: LeaseOperationOptions = {}\n  ): Promise<LeaseOperationResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-acquireLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      return await this._containerOrBlobOperation.acquireLease({\n        abortSignal: options.abortSignal,\n        duration,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        proposedLeaseId: this._leaseId,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * To change the ID of the lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param proposedLeaseId - the proposed new lease Id.\n   * @param options - option to configure lease management operations.\n   * @returns Response data for change lease operation.\n   */\n  public async changeLease(\n    proposedLeaseId: string,\n    options: LeaseOperationOptions = {}\n  ): Promise<LeaseOperationResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-changeLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      const response = await this._containerOrBlobOperation.changeLease(\n        this._leaseId,\n        proposedLeaseId,\n        {\n          abortSignal: options.abortSignal,\n          modifiedAccessConditions: {\n            ...options.conditions,\n            ifTags: options.conditions?.tagConditions,\n          },\n          ...convertTracingToRequestOptionsBase(updatedOptions),\n        }\n      );\n      this._leaseId = proposedLeaseId;\n      return response;\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * To free the lease if it is no longer needed so that another client may\n   * immediately acquire a lease against the container or the blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param options - option to configure lease management operations.\n   * @returns Response data for release lease operation.\n   */\n  public async releaseLease(options: LeaseOperationOptions = {}): Promise<LeaseOperationResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-releaseLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      return await this._containerOrBlobOperation.releaseLease(this._leaseId, {\n        abortSignal: options.abortSignal,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * To renew the lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param options - Optional option to configure lease management operations.\n   * @returns Response data for renew lease operation.\n   */\n  public async renewLease(options: LeaseOperationOptions = {}): Promise<Lease> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-renewLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      return await this._containerOrBlobOperation.renewLease(this._leaseId, {\n        abortSignal: options.abortSignal,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * To end the lease but ensure that another client cannot acquire a new lease\n   * until the current lease period has expired.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param breakPeriod - Break period\n   * @param options - Optional options to configure lease management operations.\n   * @returns Response data for break lease operation.\n   */\n  public async breakLease(\n    breakPeriod: number,\n    options: LeaseOperationOptions = {}\n  ): Promise<LeaseOperationResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-breakLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      const operationOptions: ContainerBreakLeaseOptionalParams = {\n        abortSignal: options.abortSignal,\n        breakPeriod,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      };\n      return await this._containerOrBlobOperation.breakLease(operationOptions);\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}