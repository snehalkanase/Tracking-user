{"ast":null,"code":"import _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isObjectWithProperties } from \"./typeguards\";\n/**\n * A static-signature-based credential that supports updating\n * the underlying signature value.\n */\nexport var AzureSASCredential = /*#__PURE__*/function () {\n  /**\n   * Create an instance of an AzureSASCredential for use\n   * with a service client.\n   *\n   * @param signature - The initial value of the shared access signature to use in authentication\n   */\n  function AzureSASCredential(signature) {\n    _classCallCheck(this, AzureSASCredential);\n    if (!signature) {\n      throw new Error(\"shared access signature must be a non-empty string\");\n    }\n    this._signature = signature;\n  }\n  /**\n   * The value of the shared access signature to be used in authentication\n   */\n  _createClass(AzureSASCredential, [{\n    key: \"signature\",\n    get: function get() {\n      return this._signature;\n    }\n    /**\n     * Change the value of the signature.\n     *\n     * Updates will take effect upon the next request after\n     * updating the signature value.\n     *\n     * @param newSignature - The new shared access signature value to be used\n     */\n  }, {\n    key: \"update\",\n    value: function update(newSignature) {\n      if (!newSignature) {\n        throw new Error(\"shared access signature must be a non-empty string\");\n      }\n      this._signature = newSignature;\n    }\n  }]);\n  return AzureSASCredential;\n}();\n/**\n * Tests an object to determine whether it implements SASCredential.\n *\n * @param credential - The assumed SASCredential to be tested.\n */\nexport function isSASCredential(credential) {\n  return isObjectWithProperties(credential, [\"signature\"]) && typeof credential.signature === \"string\";\n}","map":{"version":3,"names":["isObjectWithProperties","AzureSASCredential","signature","_classCallCheck","Error","_signature","_createClass","key","get","value","update","newSignature","isSASCredential","credential"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-auth\\src\\azureSASCredential.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isObjectWithProperties } from \"./typeguards\";\n\n/**\n * Represents a credential defined by a static shared access signature.\n */\nexport interface SASCredential {\n  /**\n   * The value of the shared access signature represented as a string\n   */\n  readonly signature: string;\n}\n\n/**\n * A static-signature-based credential that supports updating\n * the underlying signature value.\n */\nexport class AzureSASCredential implements SASCredential {\n  private _signature: string;\n\n  /**\n   * The value of the shared access signature to be used in authentication\n   */\n  public get signature(): string {\n    return this._signature;\n  }\n\n  /**\n   * Create an instance of an AzureSASCredential for use\n   * with a service client.\n   *\n   * @param signature - The initial value of the shared access signature to use in authentication\n   */\n  constructor(signature: string) {\n    if (!signature) {\n      throw new Error(\"shared access signature must be a non-empty string\");\n    }\n\n    this._signature = signature;\n  }\n\n  /**\n   * Change the value of the signature.\n   *\n   * Updates will take effect upon the next request after\n   * updating the signature value.\n   *\n   * @param newSignature - The new shared access signature value to be used\n   */\n  public update(newSignature: string): void {\n    if (!newSignature) {\n      throw new Error(\"shared access signature must be a non-empty string\");\n    }\n\n    this._signature = newSignature;\n  }\n}\n\n/**\n * Tests an object to determine whether it implements SASCredential.\n *\n * @param credential - The assumed SASCredential to be tested.\n */\nexport function isSASCredential(credential: unknown): credential is SASCredential {\n  return (\n    isObjectWithProperties(credential, [\"signature\"]) && typeof credential.signature === \"string\"\n  );\n}\n"],"mappings":";;AAAA;AACA;AAEA,SAASA,sBAAsB,QAAQ,cAAc;AAYrD;;;;AAIA,WAAaC,kBAAkB;EAU7B;;;;;;EAMA,SAAAA,mBAAYC,SAAiB;IAAAC,eAAA,OAAAF,kBAAA;IAC3B,IAAI,CAACC,SAAS,EAAE;MACd,MAAM,IAAIE,KAAK,CAAC,oDAAoD,CAAC;;IAGvE,IAAI,CAACC,UAAU,GAAGH,SAAS;EAC7B;EAnBA;;;EAAAI,YAAA,CAAAL,kBAAA;IAAAM,GAAA;IAAAC,GAAA,EAGA,SAAAA,IAAA,EAAoB;MAClB,OAAO,IAAI,CAACH,UAAU;IACxB;IAgBA;;;;;;;;EAAA;IAAAE,GAAA;IAAAE,KAAA,EAQO,SAAAC,OAAOC,YAAoB;MAChC,IAAI,CAACA,YAAY,EAAE;QACjB,MAAM,IAAIP,KAAK,CAAC,oDAAoD,CAAC;;MAGvE,IAAI,CAACC,UAAU,GAAGM,YAAY;IAChC;EAAC;EAAA,OAAAV,kBAAA;AAAA;AAGH;;;;;AAKA,OAAM,SAAUW,eAAeA,CAACC,UAAmB;EACjD,OACEb,sBAAsB,CAACa,UAAU,EAAE,CAAC,WAAW,CAAC,CAAC,IAAI,OAAOA,UAAU,CAACX,SAAS,KAAK,QAAQ;AAEjG"},"metadata":{},"sourceType":"module","externalDependencies":[]}