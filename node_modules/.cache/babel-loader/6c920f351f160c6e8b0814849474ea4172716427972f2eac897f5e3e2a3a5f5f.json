{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BatchResponseParser } from \"./BatchResponseParser\";\nimport { utf8ByteLength } from \"./BatchUtils\";\nimport { BlobBatch } from \"./BlobBatch\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { Service, Container } from \"./generated/src/operations\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { newPipeline, isPipelineLike } from \"./Pipeline\";\nimport { getURLPath } from \"./utils/utils.common\";\n/**\n * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n */\nexport class BlobBatchClient {\n  constructor(url, credentialOrPipeline,\n  // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    let pipeline;\n    if (isPipelineLike(credentialOrPipeline)) {\n      pipeline = credentialOrPipeline;\n    } else if (!credentialOrPipeline) {\n      // no credential provided\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    }\n    const storageClientContext = new StorageClientContext(url, pipeline.toServiceClientOptions());\n    const path = getURLPath(url);\n    if (path && path !== \"/\") {\n      // Container scoped.\n      this.serviceOrContainerContext = new Container(storageClientContext);\n    } else {\n      this.serviceOrContainerContext = new Service(storageClientContext);\n    }\n  }\n  /**\n   * Creates a {@link BlobBatch}.\n   * A BlobBatch represents an aggregated set of operations on blobs.\n   */\n  createBatch() {\n    return new BlobBatch();\n  }\n  async deleteBlobs(urlsOrBlobClients, credentialOrOptions,\n  // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    const batch = new BlobBatch();\n    for (const urlOrBlobClient of urlsOrBlobClients) {\n      if (typeof urlOrBlobClient === \"string\") {\n        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options);\n      } else {\n        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions);\n      }\n    }\n    return this.submitBatch(batch);\n  }\n  async setBlobsAccessTier(urlsOrBlobClients, credentialOrTier, tierOrOptions,\n  // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    const batch = new BlobBatch();\n    for (const urlOrBlobClient of urlsOrBlobClients) {\n      if (typeof urlOrBlobClient === \"string\") {\n        await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options);\n      } else {\n        await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions);\n      }\n    }\n    return this.submitBatch(batch);\n  }\n  /**\n   * Submit batch request which consists of multiple subrequests.\n   *\n   * Get `blobBatchClient` and other details before running the snippets.\n   * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`\n   *\n   * Example usage:\n   *\n   * ```js\n   * let batchRequest = new BlobBatch();\n   * await batchRequest.deleteBlob(urlInString0, credential0);\n   * await batchRequest.deleteBlob(urlInString1, credential1, {\n   *  deleteSnapshots: \"include\"\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * Example using a lease:\n   *\n   * ```js\n   * let batchRequest = new BlobBatch();\n   * await batchRequest.setBlobAccessTier(blockBlobClient0, \"Cool\");\n   * await batchRequest.setBlobAccessTier(blockBlobClient1, \"Cool\", {\n   *  conditions: { leaseId: leaseId }\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n   *\n   * @param batchRequest - A set of Delete or SetTier operations.\n   * @param options -\n   */\n  async submitBatch(batchRequest) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!batchRequest || batchRequest.getSubRequests().size === 0) {\n      throw new RangeError(\"Batch request should contain one or more sub requests.\");\n    }\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BlobBatchClient-submitBatch\", options);\n    try {\n      const batchRequestBody = batchRequest.getHttpRequestBody();\n      // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.\n      const rawBatchResponse = await this.serviceOrContainerContext.submitBatch(utf8ByteLength(batchRequestBody), batchRequest.getMultiPartContentType(), batchRequestBody, Object.assign(Object.assign({}, options), convertTracingToRequestOptionsBase(updatedOptions)));\n      // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).\n      const batchResponseParser = new BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests());\n      const responseSummary = await batchResponseParser.parseBatchResponse();\n      const res = {\n        _response: rawBatchResponse._response,\n        contentType: rawBatchResponse.contentType,\n        errorCode: rawBatchResponse.errorCode,\n        requestId: rawBatchResponse.requestId,\n        clientRequestId: rawBatchResponse.clientRequestId,\n        version: rawBatchResponse.version,\n        subResponses: responseSummary.subResponses,\n        subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,\n        subResponsesFailedCount: responseSummary.subResponsesFailedCount\n      };\n      return res;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}","map":{"version":3,"names":["BatchResponseParser","utf8ByteLength","BlobBatch","SpanStatusCode","convertTracingToRequestOptionsBase","createSpan","Service","Container","AnonymousCredential","StorageClientContext","newPipeline","isPipelineLike","getURLPath","BlobBatchClient","constructor","url","credentialOrPipeline","options","pipeline","storageClientContext","toServiceClientOptions","path","serviceOrContainerContext","createBatch","deleteBlobs","urlsOrBlobClients","credentialOrOptions","batch","urlOrBlobClient","deleteBlob","submitBatch","setBlobsAccessTier","credentialOrTier","tierOrOptions","setBlobAccessTier","batchRequest","arguments","length","undefined","getSubRequests","size","RangeError","span","updatedOptions","batchRequestBody","getHttpRequestBody","rawBatchResponse","getMultiPartContentType","Object","assign","batchResponseParser","responseSummary","parseBatchResponse","res","_response","contentType","errorCode","requestId","clientRequestId","version","subResponses","subResponsesSucceededCount","subResponsesFailedCount","e","setStatus","code","ERROR","message","end"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\BlobBatchClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AccessTier,\n  ServiceSubmitBatchHeaders,\n  ServiceSubmitBatchOptionalParamsModel,\n  ServiceSubmitBatchResponseModel,\n} from \"./generatedModels\";\nimport { ParsedBatchResponse } from \"./BatchResponse\";\nimport { BatchResponseParser } from \"./BatchResponseParser\";\nimport { utf8ByteLength } from \"./BatchUtils\";\nimport { BlobBatch } from \"./BlobBatch\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { HttpResponse, TokenCredential } from \"@azure/core-http\";\nimport { Service, Container } from \"./generated/src/operations\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { BlobDeleteOptions, BlobClient, BlobSetTierOptions } from \"./Clients\";\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { PipelineLike, StoragePipelineOptions, newPipeline, isPipelineLike } from \"./Pipeline\";\nimport { getURLPath } from \"./utils/utils.common\";\n\n/**\n * Options to configure the Service - Submit Batch Optional Params.\n */\nexport interface BlobBatchSubmitBatchOptionalParams extends ServiceSubmitBatchOptionalParamsModel {}\n\n/**\n * Contains response data for blob batch operations.\n */\nexport declare type BlobBatchSubmitBatchResponse = ParsedBatchResponse &\n  ServiceSubmitBatchHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ServiceSubmitBatchHeaders;\n    };\n  };\n\n/**\n * Contains response data for the {@link deleteBlobs} operation.\n */\nexport declare type BlobBatchDeleteBlobsResponse = BlobBatchSubmitBatchResponse;\n\n/**\n * Contains response data for the {@link setBlobsAccessTier} operation.\n */\nexport declare type BlobBatchSetBlobsAccessTierResponse = BlobBatchSubmitBatchResponse;\n\n/**\n * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n */\nexport class BlobBatchClient {\n  private serviceOrContainerContext: Service | Container;\n\n  /**\n   * Creates an instance of BlobBatchClient.\n   *\n   * @param url - A url pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Options to configure the HTTP pipeline.\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  );\n\n  /**\n   * Creates an instance of BlobBatchClient.\n   *\n   * @param url - A url pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  constructor(url: string, pipeline: PipelineLike);\n  constructor(\n    url: string,\n    credentialOrPipeline?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | PipelineLike,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  ) {\n    let pipeline: PipelineLike;\n    if (isPipelineLike(credentialOrPipeline)) {\n      pipeline = credentialOrPipeline;\n    } else if (!credentialOrPipeline) {\n      // no credential provided\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    }\n\n    const storageClientContext = new StorageClientContext(url, pipeline.toServiceClientOptions());\n\n    const path = getURLPath(url);\n    if (path && path !== \"/\") {\n      // Container scoped.\n      this.serviceOrContainerContext = new Container(storageClientContext);\n    } else {\n      this.serviceOrContainerContext = new Service(storageClientContext);\n    }\n  }\n\n  /**\n   * Creates a {@link BlobBatch}.\n   * A BlobBatch represents an aggregated set of operations on blobs.\n   */\n  public createBatch(): BlobBatch {\n    return new BlobBatch();\n  }\n\n  /**\n   * Create multiple delete operations to mark the specified blobs or snapshots for deletion.\n   * Note that in order to delete a blob, you must delete all of its snapshots.\n   * You can delete both at the same time. See [delete operation details](https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob).\n   * The operations will be authenticated and authorized with specified credential.\n   * See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param urls - The urls of the blob resources to delete.\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options -\n   */\n  public async deleteBlobs(\n    urls: string[],\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobDeleteOptions\n  ): Promise<BlobBatchDeleteBlobsResponse>;\n\n  /**\n   * Create multiple delete operations to mark the specified blobs or snapshots for deletion.\n   * Note that in order to delete a blob, you must delete all of its snapshots.\n   * You can delete both at the same time. See [delete operation details](https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob).\n   * The operation(subrequest) will be authenticated and authorized with specified credential.\n   * See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param blobClients - The BlobClients for the blobs to delete.\n   * @param options -\n   */\n  public async deleteBlobs(\n    blobClients: BlobClient[],\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobDeleteOptions\n  ): Promise<BlobBatchDeleteBlobsResponse>;\n\n  public async deleteBlobs(\n    urlsOrBlobClients: string[] | BlobClient[],\n    credentialOrOptions:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | BlobDeleteOptions\n      | undefined,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobDeleteOptions\n  ): Promise<BlobBatchDeleteBlobsResponse> {\n    const batch = new BlobBatch();\n    for (const urlOrBlobClient of urlsOrBlobClients) {\n      if (typeof urlOrBlobClient === \"string\") {\n        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions as TokenCredential, options);\n      } else {\n        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions as BlobDeleteOptions);\n      }\n    }\n    return this.submitBatch(batch);\n  }\n\n  /**\n   * Create multiple set tier operations to set the tier on a blob.\n   * The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant\n   * storage only). A premium page blob's tier determines the allowed size, IOPS,\n   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n   * storage type. This operation does not update the blob's ETag.\n   * See [set blob tier details](https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier).\n   * The operation(subrequest) will be authenticated and authorized\n   * with specified credential.See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param urls - The urls of the blob resource to delete.\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param tier -\n   * @param options -\n   */\n  public async setBlobsAccessTier(\n    urls: string[],\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    tier: AccessTier,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobSetTierOptions\n  ): Promise<BlobBatchSetBlobsAccessTierResponse>;\n\n  /**\n   * Create multiple set tier operations to set the tier on a blob.\n   * The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant\n   * storage only). A premium page blob's tier determines the allowed size, IOPS,\n   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n   * storage type. This operation does not update the blob's ETag.\n   * See [set blob tier details](https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier).\n   * The operation(subrequest) will be authenticated and authorized\n   * with specified credential.See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param blobClients - The BlobClients for the blobs which should have a new tier set.\n   * @param tier -\n   * @param options -\n   */\n  public async setBlobsAccessTier(\n    blobClients: BlobClient[],\n    tier: AccessTier,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobSetTierOptions\n  ): Promise<BlobBatchSetBlobsAccessTierResponse>;\n\n  public async setBlobsAccessTier(\n    urlsOrBlobClients: string[] | BlobClient[],\n    credentialOrTier:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | AccessTier,\n    tierOrOptions?: AccessTier | BlobSetTierOptions,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobSetTierOptions\n  ): Promise<BlobBatchSetBlobsAccessTierResponse> {\n    const batch = new BlobBatch();\n    for (const urlOrBlobClient of urlsOrBlobClients) {\n      if (typeof urlOrBlobClient === \"string\") {\n        await batch.setBlobAccessTier(\n          urlOrBlobClient,\n          credentialOrTier as TokenCredential,\n          tierOrOptions as AccessTier,\n          options\n        );\n      } else {\n        await batch.setBlobAccessTier(\n          urlOrBlobClient,\n          credentialOrTier as AccessTier,\n          tierOrOptions as BlobSetTierOptions\n        );\n      }\n    }\n    return this.submitBatch(batch);\n  }\n\n  /**\n   * Submit batch request which consists of multiple subrequests.\n   *\n   * Get `blobBatchClient` and other details before running the snippets.\n   * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`\n   *\n   * Example usage:\n   *\n   * ```js\n   * let batchRequest = new BlobBatch();\n   * await batchRequest.deleteBlob(urlInString0, credential0);\n   * await batchRequest.deleteBlob(urlInString1, credential1, {\n   *  deleteSnapshots: \"include\"\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * Example using a lease:\n   *\n   * ```js\n   * let batchRequest = new BlobBatch();\n   * await batchRequest.setBlobAccessTier(blockBlobClient0, \"Cool\");\n   * await batchRequest.setBlobAccessTier(blockBlobClient1, \"Cool\", {\n   *  conditions: { leaseId: leaseId }\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n   *\n   * @param batchRequest - A set of Delete or SetTier operations.\n   * @param options -\n   */\n  public async submitBatch(\n    batchRequest: BlobBatch,\n    options: BlobBatchSubmitBatchOptionalParams = {}\n  ): Promise<BlobBatchSubmitBatchResponse> {\n    if (!batchRequest || batchRequest.getSubRequests().size === 0) {\n      throw new RangeError(\"Batch request should contain one or more sub requests.\");\n    }\n\n    const { span, updatedOptions } = createSpan(\"BlobBatchClient-submitBatch\", options);\n    try {\n      const batchRequestBody = batchRequest.getHttpRequestBody();\n\n      // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.\n      const rawBatchResponse: ServiceSubmitBatchResponseModel =\n        await this.serviceOrContainerContext.submitBatch(\n          utf8ByteLength(batchRequestBody),\n          batchRequest.getMultiPartContentType(),\n          batchRequestBody,\n          {\n            ...options,\n            ...convertTracingToRequestOptionsBase(updatedOptions),\n          }\n        );\n\n      // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).\n      const batchResponseParser = new BatchResponseParser(\n        rawBatchResponse,\n        batchRequest.getSubRequests()\n      );\n      const responseSummary = await batchResponseParser.parseBatchResponse();\n\n      const res: BlobBatchSubmitBatchResponse = {\n        _response: rawBatchResponse._response,\n        contentType: rawBatchResponse.contentType,\n        errorCode: rawBatchResponse.errorCode,\n        requestId: rawBatchResponse.requestId,\n        clientRequestId: rawBatchResponse.clientRequestId,\n        version: rawBatchResponse.version,\n        subResponses: responseSummary.subResponses,\n        subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,\n        subResponsesFailedCount: responseSummary.subResponsesFailedCount,\n      };\n\n      return res;\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}