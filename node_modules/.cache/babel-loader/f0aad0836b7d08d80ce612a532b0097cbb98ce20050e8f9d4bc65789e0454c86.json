{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a blob. Setting\n * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all\n * the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class BlobSASPermissions {\n  constructor() {\n    /**\n     * Specifies Read access granted.\n     */\n    this.read = false;\n    /**\n     * Specifies Add access granted.\n     */\n    this.add = false;\n    /**\n     * Specifies Create access granted.\n     */\n    this.create = false;\n    /**\n     * Specifies Write access granted.\n     */\n    this.write = false;\n    /**\n     * Specifies Delete access granted.\n     */\n    this.delete = false;\n    /**\n     * Specifies Delete version access granted.\n     */\n    this.deleteVersion = false;\n    /**\n     * Specfies Tag access granted.\n     */\n    this.tag = false;\n    /**\n     * Specifies Move access granted.\n     */\n    this.move = false;\n    /**\n     * Specifies Execute access granted.\n     */\n    this.execute = false;\n    /**\n     * Specifies SetImmutabilityPolicy access granted.\n     */\n    this.setImmutabilityPolicy = false;\n    /**\n     * Specifies that Permanent Delete is permitted.\n     */\n    this.permanentDelete = false;\n  }\n  /**\n   * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n  static parse(permissions) {\n    const blobSASPermissions = new BlobSASPermissions();\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          blobSASPermissions.read = true;\n          break;\n        case \"a\":\n          blobSASPermissions.add = true;\n          break;\n        case \"c\":\n          blobSASPermissions.create = true;\n          break;\n        case \"w\":\n          blobSASPermissions.write = true;\n          break;\n        case \"d\":\n          blobSASPermissions.delete = true;\n          break;\n        case \"x\":\n          blobSASPermissions.deleteVersion = true;\n          break;\n        case \"t\":\n          blobSASPermissions.tag = true;\n          break;\n        case \"m\":\n          blobSASPermissions.move = true;\n          break;\n        case \"e\":\n          blobSASPermissions.execute = true;\n          break;\n        case \"i\":\n          blobSASPermissions.setImmutabilityPolicy = true;\n          break;\n        case \"y\":\n          blobSASPermissions.permanentDelete = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission: ${char}`);\n      }\n    }\n    return blobSASPermissions;\n  }\n  /**\n   * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n  static from(permissionLike) {\n    const blobSASPermissions = new BlobSASPermissions();\n    if (permissionLike.read) {\n      blobSASPermissions.read = true;\n    }\n    if (permissionLike.add) {\n      blobSASPermissions.add = true;\n    }\n    if (permissionLike.create) {\n      blobSASPermissions.create = true;\n    }\n    if (permissionLike.write) {\n      blobSASPermissions.write = true;\n    }\n    if (permissionLike.delete) {\n      blobSASPermissions.delete = true;\n    }\n    if (permissionLike.deleteVersion) {\n      blobSASPermissions.deleteVersion = true;\n    }\n    if (permissionLike.tag) {\n      blobSASPermissions.tag = true;\n    }\n    if (permissionLike.move) {\n      blobSASPermissions.move = true;\n    }\n    if (permissionLike.execute) {\n      blobSASPermissions.execute = true;\n    }\n    if (permissionLike.setImmutabilityPolicy) {\n      blobSASPermissions.setImmutabilityPolicy = true;\n    }\n    if (permissionLike.permanentDelete) {\n      blobSASPermissions.permanentDelete = true;\n    }\n    return blobSASPermissions;\n  }\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * @returns A string which represents the BlobSASPermissions\n   */\n  toString() {\n    const permissions = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n    if (this.move) {\n      permissions.push(\"m\");\n    }\n    if (this.execute) {\n      permissions.push(\"e\");\n    }\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n    return permissions.join(\"\");\n  }\n}","map":{"version":3,"names":["BlobSASPermissions","constructor","read","add","create","write","delete","deleteVersion","tag","move","execute","setImmutabilityPolicy","permanentDelete","parse","permissions","blobSASPermissions","char","RangeError","from","permissionLike","toString","push","join"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\sas\\BlobSASPermissions.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a blob. Setting\n * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all\n * the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class BlobSASPermissions {\n  /**\n   * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n  public static parse(permissions: string): BlobSASPermissions {\n    const blobSASPermissions = new BlobSASPermissions();\n\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          blobSASPermissions.read = true;\n          break;\n        case \"a\":\n          blobSASPermissions.add = true;\n          break;\n        case \"c\":\n          blobSASPermissions.create = true;\n          break;\n        case \"w\":\n          blobSASPermissions.write = true;\n          break;\n        case \"d\":\n          blobSASPermissions.delete = true;\n          break;\n        case \"x\":\n          blobSASPermissions.deleteVersion = true;\n          break;\n        case \"t\":\n          blobSASPermissions.tag = true;\n          break;\n        case \"m\":\n          blobSASPermissions.move = true;\n          break;\n        case \"e\":\n          blobSASPermissions.execute = true;\n          break;\n        case \"i\":\n          blobSASPermissions.setImmutabilityPolicy = true;\n          break;\n        case \"y\":\n          blobSASPermissions.permanentDelete = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission: ${char}`);\n      }\n    }\n\n    return blobSASPermissions;\n  }\n\n  /**\n   * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n  public static from(permissionLike: BlobSASPermissionsLike): BlobSASPermissions {\n    const blobSASPermissions = new BlobSASPermissions();\n    if (permissionLike.read) {\n      blobSASPermissions.read = true;\n    }\n    if (permissionLike.add) {\n      blobSASPermissions.add = true;\n    }\n    if (permissionLike.create) {\n      blobSASPermissions.create = true;\n    }\n    if (permissionLike.write) {\n      blobSASPermissions.write = true;\n    }\n    if (permissionLike.delete) {\n      blobSASPermissions.delete = true;\n    }\n    if (permissionLike.deleteVersion) {\n      blobSASPermissions.deleteVersion = true;\n    }\n    if (permissionLike.tag) {\n      blobSASPermissions.tag = true;\n    }\n    if (permissionLike.move) {\n      blobSASPermissions.move = true;\n    }\n    if (permissionLike.execute) {\n      blobSASPermissions.execute = true;\n    }\n    if (permissionLike.setImmutabilityPolicy) {\n      blobSASPermissions.setImmutabilityPolicy = true;\n    }\n    if (permissionLike.permanentDelete) {\n      blobSASPermissions.permanentDelete = true;\n    }\n    return blobSASPermissions;\n  }\n\n  /**\n   * Specifies Read access granted.\n   */\n  public read: boolean = false;\n\n  /**\n   * Specifies Add access granted.\n   */\n  public add: boolean = false;\n\n  /**\n   * Specifies Create access granted.\n   */\n  public create: boolean = false;\n\n  /**\n   * Specifies Write access granted.\n   */\n  public write: boolean = false;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  public delete: boolean = false;\n\n  /**\n   * Specifies Delete version access granted.\n   */\n  public deleteVersion: boolean = false;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  public tag: boolean = false;\n\n  /**\n   * Specifies Move access granted.\n   */\n  public move: boolean = false;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  public execute: boolean = false;\n\n  /**\n   * Specifies SetImmutabilityPolicy access granted.\n   */\n  public setImmutabilityPolicy: boolean = false;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  public permanentDelete: boolean = false;\n\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * @returns A string which represents the BlobSASPermissions\n   */\n  public toString(): string {\n    const permissions: string[] = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n    if (this.move) {\n      permissions.push(\"m\");\n    }\n    if (this.execute) {\n      permissions.push(\"e\");\n    }\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n    return permissions.join(\"\");\n  }\n}\n\n/**\n * A type that looks like a Blob SAS permission.\n * Used in {@link BlobSASPermissions} to parse SAS permissions from raw objects.\n */\nexport interface BlobSASPermissionsLike {\n  /**\n   * Specifies Read access granted.\n   */\n  read?: boolean;\n\n  /**\n   * Specifies Add access granted.\n   */\n  add?: boolean;\n\n  /**\n   * Specifies Create access granted.\n   */\n  create?: boolean;\n\n  /**\n   * Specifies Write access granted.\n   */\n  write?: boolean;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  delete?: boolean;\n\n  /**\n   * Specifies Delete version access granted.\n   */\n  deleteVersion?: boolean;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  tag?: boolean;\n\n  /**\n   * Specifies Move access granted.\n   */\n  move?: boolean;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  execute?: boolean;\n\n  /**\n   * Specifies SetImmutabilityPolicy access granted.\n   */\n  setImmutabilityPolicy?: boolean;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  permanentDelete?: boolean;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}