{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AccountSASPermissions } from \"./AccountSASPermissions\";\nimport { AccountSASResourceTypes } from \"./AccountSASResourceTypes\";\nimport { AccountSASServices } from \"./AccountSASServices\";\nimport { ipRangeToString } from \"./SasIPRange\";\nimport { SASQueryParameters } from \"./SASQueryParameters\";\nimport { SERVICE_VERSION } from \"../utils/constants\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Generates a {@link SASQueryParameters} object which contains all SAS query parameters needed to make an actual\n * REST request.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n *\n * @param accountSASSignatureValues -\n * @param sharedKeyCredential -\n */\nexport function generateAccountSASQueryParameters(accountSASSignatureValues, sharedKeyCredential) {\n  const version = accountSASSignatureValues.version ? accountSASSignatureValues.version : SERVICE_VERSION;\n  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.setImmutabilityPolicy && version < \"2020-08-04\") {\n    throw RangeError(\"'version' must be >= '2020-08-04' when provided 'i' permission.\");\n  }\n  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.deleteVersion && version < \"2019-10-10\") {\n    throw RangeError(\"'version' must be >= '2019-10-10' when provided 'x' permission.\");\n  }\n  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.permanentDelete && version < \"2019-10-10\") {\n    throw RangeError(\"'version' must be >= '2019-10-10' when provided 'y' permission.\");\n  }\n  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.tag && version < \"2019-12-12\") {\n    throw RangeError(\"'version' must be >= '2019-12-12' when provided 't' permission.\");\n  }\n  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.filter && version < \"2019-12-12\") {\n    throw RangeError(\"'version' must be >= '2019-12-12' when provided 'f' permission.\");\n  }\n  if (accountSASSignatureValues.encryptionScope && version < \"2020-12-06\") {\n    throw RangeError(\"'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.\");\n  }\n  const parsedPermissions = AccountSASPermissions.parse(accountSASSignatureValues.permissions.toString());\n  const parsedServices = AccountSASServices.parse(accountSASSignatureValues.services).toString();\n  const parsedResourceTypes = AccountSASResourceTypes.parse(accountSASSignatureValues.resourceTypes).toString();\n  let stringToSign;\n  if (version >= \"2020-12-06\") {\n    stringToSign = [sharedKeyCredential.accountName, parsedPermissions, parsedServices, parsedResourceTypes, accountSASSignatureValues.startsOn ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false) : \"\", truncatedISO8061Date(accountSASSignatureValues.expiresOn, false), accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : \"\", accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\", version, accountSASSignatureValues.encryptionScope ? accountSASSignatureValues.encryptionScope : \"\", \"\" // Account SAS requires an additional newline character\n    ].join(\"\\n\");\n  } else {\n    stringToSign = [sharedKeyCredential.accountName, parsedPermissions, parsedServices, parsedResourceTypes, accountSASSignatureValues.startsOn ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false) : \"\", truncatedISO8061Date(accountSASSignatureValues.expiresOn, false), accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : \"\", accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\", version, \"\" // Account SAS requires an additional newline character\n    ].join(\"\\n\");\n  }\n  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n  return new SASQueryParameters(version, signature, parsedPermissions.toString(), parsedServices, parsedResourceTypes, accountSASSignatureValues.protocol, accountSASSignatureValues.startsOn, accountSASSignatureValues.expiresOn, accountSASSignatureValues.ipRange, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, accountSASSignatureValues.encryptionScope);\n}","map":{"version":3,"names":["AccountSASPermissions","AccountSASResourceTypes","AccountSASServices","ipRangeToString","SASQueryParameters","SERVICE_VERSION","truncatedISO8061Date","generateAccountSASQueryParameters","accountSASSignatureValues","sharedKeyCredential","version","permissions","setImmutabilityPolicy","RangeError","deleteVersion","permanentDelete","tag","filter","encryptionScope","parsedPermissions","parse","toString","parsedServices","services","parsedResourceTypes","resourceTypes","stringToSign","accountName","startsOn","expiresOn","ipRange","protocol","join","signature","computeHMACSHA256","undefined"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\sas\\AccountSASSignatureValues.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccountSASPermissions } from \"./AccountSASPermissions\";\nimport { AccountSASResourceTypes } from \"./AccountSASResourceTypes\";\nimport { AccountSASServices } from \"./AccountSASServices\";\nimport { StorageSharedKeyCredential } from \"../credentials/StorageSharedKeyCredential\";\nimport { SasIPRange, ipRangeToString } from \"./SasIPRange\";\nimport { SASProtocol, SASQueryParameters } from \"./SASQueryParameters\";\nimport { SERVICE_VERSION } from \"../utils/constants\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * AccountSASSignatureValues is used to generate a Shared Access Signature (SAS) for an Azure Storage account. Once\n * all the values here are set appropriately, call {@link generateAccountSASQueryParameters} to obtain a representation\n * of the SAS which can actually be applied to blob urls. Note: that both this class and {@link SASQueryParameters}\n * exist because the former is mutable and a logical representation while the latter is immutable and used to generate\n * actual REST requests.\n *\n * @see https://docs.microsoft.com/en-us/azure/storage/common/storage-dotnet-shared-access-signature-part-1\n * for more conceptual information on SAS\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n * for descriptions of the parameters, including which are required\n */\nexport interface AccountSASSignatureValues {\n  /**\n   * If not provided, this defaults to the service version targeted by this version of the library.\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols allowed.\n   */\n  protocol?: SASProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   */\n  startsOn?: Date;\n\n  /**\n   * The time after which the SAS will no longer work.\n   */\n  expiresOn: Date;\n\n  /**\n   * Specifies which operations the SAS user may perform. Please refer to {@link AccountSASPermissions} for help\n   * constructing the permissions string.\n   */\n  permissions: AccountSASPermissions;\n\n  /**\n   * Optional. IP range allowed.\n   */\n  ipRange?: SasIPRange;\n\n  /**\n   * The values that indicate the services accessible with this SAS. Please refer to {@link AccountSASServices} to\n   * construct this value.\n   */\n  services: string;\n\n  /**\n   * The values that indicate the resource types accessible with this SAS. Please refer\n   * to {@link AccountSASResourceTypes} to construct this value.\n   */\n  resourceTypes: string;\n\n  /**\n   * Optional. Encryption scope to use when sending requests authorized with this SAS URI.\n   */\n  encryptionScope?: string;\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Generates a {@link SASQueryParameters} object which contains all SAS query parameters needed to make an actual\n * REST request.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n *\n * @param accountSASSignatureValues -\n * @param sharedKeyCredential -\n */\nexport function generateAccountSASQueryParameters(\n  accountSASSignatureValues: AccountSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters {\n  const version = accountSASSignatureValues.version\n    ? accountSASSignatureValues.version\n    : SERVICE_VERSION;\n\n  if (\n    accountSASSignatureValues.permissions &&\n    accountSASSignatureValues.permissions.setImmutabilityPolicy &&\n    version < \"2020-08-04\"\n  ) {\n    throw RangeError(\"'version' must be >= '2020-08-04' when provided 'i' permission.\");\n  }\n\n  if (\n    accountSASSignatureValues.permissions &&\n    accountSASSignatureValues.permissions.deleteVersion &&\n    version < \"2019-10-10\"\n  ) {\n    throw RangeError(\"'version' must be >= '2019-10-10' when provided 'x' permission.\");\n  }\n\n  if (\n    accountSASSignatureValues.permissions &&\n    accountSASSignatureValues.permissions.permanentDelete &&\n    version < \"2019-10-10\"\n  ) {\n    throw RangeError(\"'version' must be >= '2019-10-10' when provided 'y' permission.\");\n  }\n\n  if (\n    accountSASSignatureValues.permissions &&\n    accountSASSignatureValues.permissions.tag &&\n    version < \"2019-12-12\"\n  ) {\n    throw RangeError(\"'version' must be >= '2019-12-12' when provided 't' permission.\");\n  }\n\n  if (\n    accountSASSignatureValues.permissions &&\n    accountSASSignatureValues.permissions.filter &&\n    version < \"2019-12-12\"\n  ) {\n    throw RangeError(\"'version' must be >= '2019-12-12' when provided 'f' permission.\");\n  }\n\n  if (accountSASSignatureValues.encryptionScope && version < \"2020-12-06\") {\n    throw RangeError(\"'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.\");\n  }\n\n  const parsedPermissions = AccountSASPermissions.parse(\n    accountSASSignatureValues.permissions.toString()\n  );\n  const parsedServices = AccountSASServices.parse(accountSASSignatureValues.services).toString();\n  const parsedResourceTypes = AccountSASResourceTypes.parse(\n    accountSASSignatureValues.resourceTypes\n  ).toString();\n\n  let stringToSign: string;\n\n  if (version >= \"2020-12-06\") {\n    stringToSign = [\n      sharedKeyCredential.accountName,\n      parsedPermissions,\n      parsedServices,\n      parsedResourceTypes,\n      accountSASSignatureValues.startsOn\n        ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false)\n        : \"\",\n      truncatedISO8061Date(accountSASSignatureValues.expiresOn, false),\n      accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : \"\",\n      accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\",\n      version,\n      accountSASSignatureValues.encryptionScope ? accountSASSignatureValues.encryptionScope : \"\",\n      \"\", // Account SAS requires an additional newline character\n    ].join(\"\\n\");\n  } else {\n    stringToSign = [\n      sharedKeyCredential.accountName,\n      parsedPermissions,\n      parsedServices,\n      parsedResourceTypes,\n      accountSASSignatureValues.startsOn\n        ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false)\n        : \"\",\n      truncatedISO8061Date(accountSASSignatureValues.expiresOn, false),\n      accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : \"\",\n      accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\",\n      version,\n      \"\", // Account SAS requires an additional newline character\n    ].join(\"\\n\");\n  }\n\n  const signature: string = sharedKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    version,\n    signature,\n    parsedPermissions.toString(),\n    parsedServices,\n    parsedResourceTypes,\n    accountSASSignatureValues.protocol,\n    accountSASSignatureValues.startsOn,\n    accountSASSignatureValues.expiresOn,\n    accountSASSignatureValues.ipRange,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    accountSASSignatureValues.encryptionScope\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}