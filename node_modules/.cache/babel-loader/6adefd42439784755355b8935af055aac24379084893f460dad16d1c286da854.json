{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { HttpHeaders } from \"../httpHeaders\";\n/**\n * Authenticates to a service using an API key.\n */\nexport class ApiKeyCredentials {\n  /**\n   * @param options - Specifies the options to be provided for auth. Either header or query needs to be provided.\n   */\n  constructor(options) {\n    if (!options || options && !options.inHeader && !options.inQuery) {\n      throw new Error(`options cannot be null or undefined. Either \"inHeader\" or \"inQuery\" property of the options object needs to be provided.`);\n    }\n    this.inHeader = options.inHeader;\n    this.inQuery = options.inQuery;\n  }\n  /**\n   * Signs a request with the values provided in the inHeader and inQuery parameter.\n   *\n   * @param webResource - The WebResourceLike to be signed.\n   * @returns The signed request object.\n   */\n  signRequest(webResource) {\n    if (!webResource) {\n      return Promise.reject(new Error(`webResource cannot be null or undefined and must be of type \"object\".`));\n    }\n    if (this.inHeader) {\n      if (!webResource.headers) {\n        webResource.headers = new HttpHeaders();\n      }\n      for (const headerName in this.inHeader) {\n        webResource.headers.set(headerName, this.inHeader[headerName]);\n      }\n    }\n    if (this.inQuery) {\n      if (!webResource.url) {\n        return Promise.reject(new Error(`url cannot be null in the request object.`));\n      }\n      if (webResource.url.indexOf(\"?\") < 0) {\n        webResource.url += \"?\";\n      }\n      for (const key in this.inQuery) {\n        if (!webResource.url.endsWith(\"?\")) {\n          webResource.url += \"&\";\n        }\n        webResource.url += `${key}=${this.inQuery[key]}`;\n      }\n    }\n    return Promise.resolve(webResource);\n  }\n}","map":{"version":3,"names":["HttpHeaders","ApiKeyCredentials","constructor","options","inHeader","inQuery","Error","signRequest","webResource","Promise","reject","headers","headerName","set","url","indexOf","key","endsWith","resolve"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\credentials\\apiKeyCredentials.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { ServiceClientCredentials } from \"./serviceClientCredentials\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Describes the options to be provided while creating an instance of ApiKeyCredentials\n */\nexport interface ApiKeyCredentialOptions {\n  /**\n   * A key value pair of the header parameters that need to be applied to the request.\n   */\n  inHeader?: { [x: string]: any };\n  /**\n   * A key value pair of the query parameters that need to be applied to the request.\n   */\n  inQuery?: { [x: string]: any };\n}\n\n/**\n * Authenticates to a service using an API key.\n */\nexport class ApiKeyCredentials implements ServiceClientCredentials {\n  /**\n   * A key value pair of the header parameters that need to be applied to the request.\n   */\n  private readonly inHeader?: { [x: string]: any };\n  /**\n   * A key value pair of the query parameters that need to be applied to the request.\n   */\n  private readonly inQuery?: { [x: string]: any };\n\n  /**\n   * @param options - Specifies the options to be provided for auth. Either header or query needs to be provided.\n   */\n  constructor(options: ApiKeyCredentialOptions) {\n    if (!options || (options && !options.inHeader && !options.inQuery)) {\n      throw new Error(\n        `options cannot be null or undefined. Either \"inHeader\" or \"inQuery\" property of the options object needs to be provided.`\n      );\n    }\n    this.inHeader = options.inHeader;\n    this.inQuery = options.inQuery;\n  }\n\n  /**\n   * Signs a request with the values provided in the inHeader and inQuery parameter.\n   *\n   * @param webResource - The WebResourceLike to be signed.\n   * @returns The signed request object.\n   */\n  signRequest(webResource: WebResourceLike): Promise<WebResourceLike> {\n    if (!webResource) {\n      return Promise.reject(\n        new Error(`webResource cannot be null or undefined and must be of type \"object\".`)\n      );\n    }\n\n    if (this.inHeader) {\n      if (!webResource.headers) {\n        webResource.headers = new HttpHeaders();\n      }\n      for (const headerName in this.inHeader) {\n        webResource.headers.set(headerName, this.inHeader[headerName]);\n      }\n    }\n\n    if (this.inQuery) {\n      if (!webResource.url) {\n        return Promise.reject(new Error(`url cannot be null in the request object.`));\n      }\n      if (webResource.url.indexOf(\"?\") < 0) {\n        webResource.url += \"?\";\n      }\n      for (const key in this.inQuery) {\n        if (!webResource.url.endsWith(\"?\")) {\n          webResource.url += \"&\";\n        }\n        webResource.url += `${key}=${this.inQuery[key]}`;\n      }\n    }\n\n    return Promise.resolve(webResource);\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,WAAW,QAAQ,gBAAgB;AAkB5C;;;AAGA,OAAM,MAAOC,iBAAiB;EAU5B;;;EAGAC,YAAYC,OAAgC;IAC1C,IAAI,CAACA,OAAO,IAAKA,OAAO,IAAI,CAACA,OAAO,CAACC,QAAQ,IAAI,CAACD,OAAO,CAACE,OAAQ,EAAE;MAClE,MAAM,IAAIC,KAAK,CACb,0HAA0H,CAC3H;;IAEH,IAAI,CAACF,QAAQ,GAAGD,OAAO,CAACC,QAAQ;IAChC,IAAI,CAACC,OAAO,GAAGF,OAAO,CAACE,OAAO;EAChC;EAEA;;;;;;EAMAE,WAAWA,CAACC,WAA4B;IACtC,IAAI,CAACA,WAAW,EAAE;MAChB,OAAOC,OAAO,CAACC,MAAM,CACnB,IAAIJ,KAAK,CAAC,uEAAuE,CAAC,CACnF;;IAGH,IAAI,IAAI,CAACF,QAAQ,EAAE;MACjB,IAAI,CAACI,WAAW,CAACG,OAAO,EAAE;QACxBH,WAAW,CAACG,OAAO,GAAG,IAAIX,WAAW,EAAE;;MAEzC,KAAK,MAAMY,UAAU,IAAI,IAAI,CAACR,QAAQ,EAAE;QACtCI,WAAW,CAACG,OAAO,CAACE,GAAG,CAACD,UAAU,EAAE,IAAI,CAACR,QAAQ,CAACQ,UAAU,CAAC,CAAC;;;IAIlE,IAAI,IAAI,CAACP,OAAO,EAAE;MAChB,IAAI,CAACG,WAAW,CAACM,GAAG,EAAE;QACpB,OAAOL,OAAO,CAACC,MAAM,CAAC,IAAIJ,KAAK,CAAC,2CAA2C,CAAC,CAAC;;MAE/E,IAAIE,WAAW,CAACM,GAAG,CAACC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACpCP,WAAW,CAACM,GAAG,IAAI,GAAG;;MAExB,KAAK,MAAME,GAAG,IAAI,IAAI,CAACX,OAAO,EAAE;QAC9B,IAAI,CAACG,WAAW,CAACM,GAAG,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;UAClCT,WAAW,CAACM,GAAG,IAAI,GAAG;;QAExBN,WAAW,CAACM,GAAG,IAAI,GAAGE,GAAG,IAAI,IAAI,CAACX,OAAO,CAACW,GAAG,CAAC,EAAE;;;IAIpD,OAAOP,OAAO,CAACS,OAAO,CAACV,WAAW,CAAC;EACrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}