{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that service. Once all the\n * values are set, this should be serialized with toString and set as the services field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but\n * the order of the services is particular and this class guarantees correctness.\n */\nexport class AccountSASServices {\n  constructor() {\n    /**\n     * Permission to access blob resources granted.\n     */\n    this.blob = false;\n    /**\n     * Permission to access file resources granted.\n     */\n    this.file = false;\n    /**\n     * Permission to access queue resources granted.\n     */\n    this.queue = false;\n    /**\n     * Permission to access table resources granted.\n     */\n    this.table = false;\n  }\n  /**\n   * Creates an {@link AccountSASServices} from the specified services string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid service.\n   *\n   * @param services -\n   */\n  static parse(services) {\n    const accountSASServices = new AccountSASServices();\n    for (const c of services) {\n      switch (c) {\n        case \"b\":\n          accountSASServices.blob = true;\n          break;\n        case \"f\":\n          accountSASServices.file = true;\n          break;\n        case \"q\":\n          accountSASServices.queue = true;\n          break;\n        case \"t\":\n          accountSASServices.table = true;\n          break;\n        default:\n          throw new RangeError(`Invalid service character: ${c}`);\n      }\n    }\n    return accountSASServices;\n  }\n  /**\n   * Converts the given services to a string.\n   *\n   */\n  toString() {\n    const services = [];\n    if (this.blob) {\n      services.push(\"b\");\n    }\n    if (this.table) {\n      services.push(\"t\");\n    }\n    if (this.queue) {\n      services.push(\"q\");\n    }\n    if (this.file) {\n      services.push(\"f\");\n    }\n    return services.join(\"\");\n  }\n}","map":{"version":3,"names":["AccountSASServices","constructor","blob","file","queue","table","parse","services","accountSASServices","c","RangeError","toString","push","join"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\sas\\AccountSASServices.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that service. Once all the\n * values are set, this should be serialized with toString and set as the services field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but\n * the order of the services is particular and this class guarantees correctness.\n */\nexport class AccountSASServices {\n  /**\n   * Creates an {@link AccountSASServices} from the specified services string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid service.\n   *\n   * @param services -\n   */\n  public static parse(services: string): AccountSASServices {\n    const accountSASServices = new AccountSASServices();\n\n    for (const c of services) {\n      switch (c) {\n        case \"b\":\n          accountSASServices.blob = true;\n          break;\n        case \"f\":\n          accountSASServices.file = true;\n          break;\n        case \"q\":\n          accountSASServices.queue = true;\n          break;\n        case \"t\":\n          accountSASServices.table = true;\n          break;\n        default:\n          throw new RangeError(`Invalid service character: ${c}`);\n      }\n    }\n\n    return accountSASServices;\n  }\n\n  /**\n   * Permission to access blob resources granted.\n   */\n  public blob: boolean = false;\n\n  /**\n   * Permission to access file resources granted.\n   */\n  public file: boolean = false;\n\n  /**\n   * Permission to access queue resources granted.\n   */\n  public queue: boolean = false;\n\n  /**\n   * Permission to access table resources granted.\n   */\n  public table: boolean = false;\n\n  /**\n   * Converts the given services to a string.\n   *\n   */\n  public toString(): string {\n    const services: string[] = [];\n    if (this.blob) {\n      services.push(\"b\");\n    }\n    if (this.table) {\n      services.push(\"t\");\n    }\n    if (this.queue) {\n      services.push(\"q\");\n    }\n    if (this.file) {\n      services.push(\"f\");\n    }\n    return services.join(\"\");\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA;;;;;;;;;AASA,OAAM,MAAOA,kBAAkB;EAA/BC,YAAA;IAgCE;;;IAGO,KAAAC,IAAI,GAAY,KAAK;IAE5B;;;IAGO,KAAAC,IAAI,GAAY,KAAK;IAE5B;;;IAGO,KAAAC,KAAK,GAAY,KAAK;IAE7B;;;IAGO,KAAAC,KAAK,GAAY,KAAK;EAsB/B;EAvEE;;;;;;EAMO,OAAOC,KAAKA,CAACC,QAAgB;IAClC,MAAMC,kBAAkB,GAAG,IAAIR,kBAAkB,EAAE;IAEnD,KAAK,MAAMS,CAAC,IAAIF,QAAQ,EAAE;MACxB,QAAQE,CAAC;QACP,KAAK,GAAG;UACND,kBAAkB,CAACN,IAAI,GAAG,IAAI;UAC9B;QACF,KAAK,GAAG;UACNM,kBAAkB,CAACL,IAAI,GAAG,IAAI;UAC9B;QACF,KAAK,GAAG;UACNK,kBAAkB,CAACJ,KAAK,GAAG,IAAI;UAC/B;QACF,KAAK,GAAG;UACNI,kBAAkB,CAACH,KAAK,GAAG,IAAI;UAC/B;QACF;UACE,MAAM,IAAIK,UAAU,CAAC,8BAA8BD,CAAC,EAAE,CAAC;;;IAI7D,OAAOD,kBAAkB;EAC3B;EAsBA;;;;EAIOG,QAAQA,CAAA;IACb,MAAMJ,QAAQ,GAAa,EAAE;IAC7B,IAAI,IAAI,CAACL,IAAI,EAAE;MACbK,QAAQ,CAACK,IAAI,CAAC,GAAG,CAAC;;IAEpB,IAAI,IAAI,CAACP,KAAK,EAAE;MACdE,QAAQ,CAACK,IAAI,CAAC,GAAG,CAAC;;IAEpB,IAAI,IAAI,CAACR,KAAK,EAAE;MACdG,QAAQ,CAACK,IAAI,CAAC,GAAG,CAAC;;IAEpB,IAAI,IAAI,CAACT,IAAI,EAAE;MACbI,QAAQ,CAACK,IAAI,CAAC,GAAG,CAAC;;IAEpB,OAAOL,QAAQ,CAACM,IAAI,CAAC,EAAE,CAAC;EAC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}