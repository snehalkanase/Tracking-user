{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a container.\n * Setting a value to true means that any SAS which uses these permissions will grant permissions for that operation.\n * Once all the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class ContainerSASPermissions {\n  constructor() {\n    /**\n     * Specifies Read access granted.\n     */\n    this.read = false;\n    /**\n     * Specifies Add access granted.\n     */\n    this.add = false;\n    /**\n     * Specifies Create access granted.\n     */\n    this.create = false;\n    /**\n     * Specifies Write access granted.\n     */\n    this.write = false;\n    /**\n     * Specifies Delete access granted.\n     */\n    this.delete = false;\n    /**\n     * Specifies Delete version access granted.\n     */\n    this.deleteVersion = false;\n    /**\n     * Specifies List access granted.\n     */\n    this.list = false;\n    /**\n     * Specfies Tag access granted.\n     */\n    this.tag = false;\n    /**\n     * Specifies Move access granted.\n     */\n    this.move = false;\n    /**\n     * Specifies Execute access granted.\n     */\n    this.execute = false;\n    /**\n     * Specifies SetImmutabilityPolicy access granted.\n     */\n    this.setImmutabilityPolicy = false;\n    /**\n     * Specifies that Permanent Delete is permitted.\n     */\n    this.permanentDelete = false;\n    /**\n     * Specifies that Filter Blobs by Tags is permitted.\n     */\n    this.filterByTags = false;\n  }\n  /**\n   * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n  static parse(permissions) {\n    const containerSASPermissions = new ContainerSASPermissions();\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          containerSASPermissions.read = true;\n          break;\n        case \"a\":\n          containerSASPermissions.add = true;\n          break;\n        case \"c\":\n          containerSASPermissions.create = true;\n          break;\n        case \"w\":\n          containerSASPermissions.write = true;\n          break;\n        case \"d\":\n          containerSASPermissions.delete = true;\n          break;\n        case \"l\":\n          containerSASPermissions.list = true;\n          break;\n        case \"t\":\n          containerSASPermissions.tag = true;\n          break;\n        case \"x\":\n          containerSASPermissions.deleteVersion = true;\n          break;\n        case \"m\":\n          containerSASPermissions.move = true;\n          break;\n        case \"e\":\n          containerSASPermissions.execute = true;\n          break;\n        case \"i\":\n          containerSASPermissions.setImmutabilityPolicy = true;\n          break;\n        case \"y\":\n          containerSASPermissions.permanentDelete = true;\n          break;\n        case \"f\":\n          containerSASPermissions.filterByTags = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission ${char}`);\n      }\n    }\n    return containerSASPermissions;\n  }\n  /**\n   * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n  static from(permissionLike) {\n    const containerSASPermissions = new ContainerSASPermissions();\n    if (permissionLike.read) {\n      containerSASPermissions.read = true;\n    }\n    if (permissionLike.add) {\n      containerSASPermissions.add = true;\n    }\n    if (permissionLike.create) {\n      containerSASPermissions.create = true;\n    }\n    if (permissionLike.write) {\n      containerSASPermissions.write = true;\n    }\n    if (permissionLike.delete) {\n      containerSASPermissions.delete = true;\n    }\n    if (permissionLike.list) {\n      containerSASPermissions.list = true;\n    }\n    if (permissionLike.deleteVersion) {\n      containerSASPermissions.deleteVersion = true;\n    }\n    if (permissionLike.tag) {\n      containerSASPermissions.tag = true;\n    }\n    if (permissionLike.move) {\n      containerSASPermissions.move = true;\n    }\n    if (permissionLike.execute) {\n      containerSASPermissions.execute = true;\n    }\n    if (permissionLike.setImmutabilityPolicy) {\n      containerSASPermissions.setImmutabilityPolicy = true;\n    }\n    if (permissionLike.permanentDelete) {\n      containerSASPermissions.permanentDelete = true;\n    }\n    if (permissionLike.filterByTags) {\n      containerSASPermissions.filterByTags = true;\n    }\n    return containerSASPermissions;\n  }\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * The order of the characters should be as specified here to ensure correctness.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n   *\n   */\n  toString() {\n    const permissions = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n    if (this.list) {\n      permissions.push(\"l\");\n    }\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n    if (this.move) {\n      permissions.push(\"m\");\n    }\n    if (this.execute) {\n      permissions.push(\"e\");\n    }\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n    if (this.filterByTags) {\n      permissions.push(\"f\");\n    }\n    return permissions.join(\"\");\n  }\n}","map":{"version":3,"names":["ContainerSASPermissions","constructor","read","add","create","write","delete","deleteVersion","list","tag","move","execute","setImmutabilityPolicy","permanentDelete","filterByTags","parse","permissions","containerSASPermissions","char","RangeError","from","permissionLike","toString","push","join"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\sas\\ContainerSASPermissions.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a container.\n * Setting a value to true means that any SAS which uses these permissions will grant permissions for that operation.\n * Once all the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class ContainerSASPermissions {\n  /**\n   * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n  public static parse(permissions: string): ContainerSASPermissions {\n    const containerSASPermissions = new ContainerSASPermissions();\n\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          containerSASPermissions.read = true;\n          break;\n        case \"a\":\n          containerSASPermissions.add = true;\n          break;\n        case \"c\":\n          containerSASPermissions.create = true;\n          break;\n        case \"w\":\n          containerSASPermissions.write = true;\n          break;\n        case \"d\":\n          containerSASPermissions.delete = true;\n          break;\n        case \"l\":\n          containerSASPermissions.list = true;\n          break;\n        case \"t\":\n          containerSASPermissions.tag = true;\n          break;\n        case \"x\":\n          containerSASPermissions.deleteVersion = true;\n          break;\n        case \"m\":\n          containerSASPermissions.move = true;\n          break;\n        case \"e\":\n          containerSASPermissions.execute = true;\n          break;\n        case \"i\":\n          containerSASPermissions.setImmutabilityPolicy = true;\n          break;\n        case \"y\":\n          containerSASPermissions.permanentDelete = true;\n          break;\n        case \"f\":\n          containerSASPermissions.filterByTags = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission ${char}`);\n      }\n    }\n\n    return containerSASPermissions;\n  }\n\n  /**\n   * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n  public static from(permissionLike: ContainerSASPermissionsLike): ContainerSASPermissions {\n    const containerSASPermissions = new ContainerSASPermissions();\n    if (permissionLike.read) {\n      containerSASPermissions.read = true;\n    }\n    if (permissionLike.add) {\n      containerSASPermissions.add = true;\n    }\n    if (permissionLike.create) {\n      containerSASPermissions.create = true;\n    }\n    if (permissionLike.write) {\n      containerSASPermissions.write = true;\n    }\n    if (permissionLike.delete) {\n      containerSASPermissions.delete = true;\n    }\n    if (permissionLike.list) {\n      containerSASPermissions.list = true;\n    }\n    if (permissionLike.deleteVersion) {\n      containerSASPermissions.deleteVersion = true;\n    }\n    if (permissionLike.tag) {\n      containerSASPermissions.tag = true;\n    }\n    if (permissionLike.move) {\n      containerSASPermissions.move = true;\n    }\n    if (permissionLike.execute) {\n      containerSASPermissions.execute = true;\n    }\n    if (permissionLike.setImmutabilityPolicy) {\n      containerSASPermissions.setImmutabilityPolicy = true;\n    }\n    if (permissionLike.permanentDelete) {\n      containerSASPermissions.permanentDelete = true;\n    }\n    if (permissionLike.filterByTags) {\n      containerSASPermissions.filterByTags = true;\n    }\n    return containerSASPermissions;\n  }\n\n  /**\n   * Specifies Read access granted.\n   */\n  public read: boolean = false;\n\n  /**\n   * Specifies Add access granted.\n   */\n  public add: boolean = false;\n\n  /**\n   * Specifies Create access granted.\n   */\n  public create: boolean = false;\n\n  /**\n   * Specifies Write access granted.\n   */\n  public write: boolean = false;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  public delete: boolean = false;\n\n  /**\n   * Specifies Delete version access granted.\n   */\n  public deleteVersion: boolean = false;\n\n  /**\n   * Specifies List access granted.\n   */\n  public list: boolean = false;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  public tag: boolean = false;\n\n  /**\n   * Specifies Move access granted.\n   */\n  public move: boolean = false;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  public execute: boolean = false;\n\n  /**\n   * Specifies SetImmutabilityPolicy access granted.\n   */\n  public setImmutabilityPolicy: boolean = false;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  public permanentDelete: boolean = false;\n\n  /**\n   * Specifies that Filter Blobs by Tags is permitted.\n   */\n  public filterByTags: boolean = false;\n\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * The order of the characters should be as specified here to ensure correctness.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n   *\n   */\n  public toString(): string {\n    const permissions: string[] = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n    if (this.list) {\n      permissions.push(\"l\");\n    }\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n    if (this.move) {\n      permissions.push(\"m\");\n    }\n    if (this.execute) {\n      permissions.push(\"e\");\n    }\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n    if (this.filterByTags) {\n      permissions.push(\"f\");\n    }\n    return permissions.join(\"\");\n  }\n}\n\n/**\n * A type that looks like a Container SAS permission.\n * Used in {@link ContainerSASPermissions} to parse SAS permissions from raw objects.\n */\nexport interface ContainerSASPermissionsLike {\n  /**\n   * Specifies Read access granted.\n   */\n  read?: boolean;\n\n  /**\n   * Specifies Add access granted.\n   */\n  add?: boolean;\n\n  /**\n   * Specifies Create access granted.\n   */\n  create?: boolean;\n\n  /**\n   * Specifies Write access granted.\n   */\n  write?: boolean;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  delete?: boolean;\n\n  /**\n   * Specifies Delete version access granted.\n   */\n  deleteVersion?: boolean;\n\n  /**\n   * Specifies List access granted.\n   */\n  list?: boolean;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  tag?: boolean;\n\n  /**\n   * Specifies Move access granted.\n   */\n  move?: boolean;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  execute?: boolean;\n\n  /**\n   * Specifies SetImmutabilityPolicy access granted.\n   */\n  setImmutabilityPolicy?: boolean;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  permanentDelete?: boolean;\n\n  /**\n   * Specifies that Filter Blobs by Tags is permitted.\n   */\n  filterByTags?: boolean;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}