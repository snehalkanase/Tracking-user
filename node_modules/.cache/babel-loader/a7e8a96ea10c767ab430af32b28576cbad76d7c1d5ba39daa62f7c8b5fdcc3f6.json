{"ast":null,"code":"import _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { URLBuilder } from \"@azure/core-http\";\nimport { BaseRequestPolicy } from \"@azure/core-http\";\nimport { delay } from \"@azure/core-http\";\n/**\n * A set of constants used internally when processing requests.\n */\nvar Constants = {\n  DefaultScope: \"/.default\",\n  /**\n   * Defines constants for use with HTTP headers.\n   */\n  HeaderConstants: {\n    /**\n     * The Authorization header.\n     */\n    AUTHORIZATION: \"authorization\"\n  }\n};\n// Default options for the cycler if none are provided\nvar DEFAULT_CYCLER_OPTIONS = {\n  forcedRefreshWindowInMs: 1000,\n  retryIntervalInMs: 3000,\n  refreshWindowInMs: 1000 * 60 * 2 // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - a function that produces a promise of an access\n * token that may fail by returning null\n * @param retryIntervalInMs - the time (in milliseconds) to wait between retry\n * attempts\n * @param timeoutInMs - the timestamp after which the refresh attempt will fail,\n * throwing an exception\n * @returns - a promise that, if it resolves, will resolve with an access token\n */\nfunction beginRefresh(_x, _x2, _x3) {\n  return _beginRefresh.apply(this, arguments);\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param scopes - the scopes to request authorization for\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction _beginRefresh() {\n  _beginRefresh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(getAccessToken, retryIntervalInMs, timeoutInMs) {\n    var tryGetAccessToken, _tryGetAccessToken, token;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _tryGetAccessToken = function _tryGetAccessToken3() {\n            _tryGetAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n              var finalToken;\n              return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                while (1) switch (_context3.prev = _context3.next) {\n                  case 0:\n                    if (!(Date.now() < timeoutInMs)) {\n                      _context3.next = 12;\n                      break;\n                    }\n                    _context3.prev = 1;\n                    _context3.next = 4;\n                    return getAccessToken();\n                  case 4:\n                    return _context3.abrupt(\"return\", _context3.sent);\n                  case 7:\n                    _context3.prev = 7;\n                    _context3.t0 = _context3[\"catch\"](1);\n                    return _context3.abrupt(\"return\", null);\n                  case 10:\n                    _context3.next = 18;\n                    break;\n                  case 12:\n                    _context3.next = 14;\n                    return getAccessToken();\n                  case 14:\n                    finalToken = _context3.sent;\n                    if (!(finalToken === null)) {\n                      _context3.next = 17;\n                      break;\n                    }\n                    throw new Error(\"Failed to refresh access token.\");\n                  case 17:\n                    return _context3.abrupt(\"return\", finalToken);\n                  case 18:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }, _callee3, null, [[1, 7]]);\n            }));\n            return _tryGetAccessToken.apply(this, arguments);\n          };\n          tryGetAccessToken = function _tryGetAccessToken2() {\n            return _tryGetAccessToken.apply(this, arguments);\n          }; // This wrapper handles exceptions gracefully as long as we haven't exceeded\n          // the timeout.\n          _context4.next = 4;\n          return tryGetAccessToken();\n        case 4:\n          token = _context4.sent;\n        case 5:\n          if (!(token === null)) {\n            _context4.next = 13;\n            break;\n          }\n          _context4.next = 8;\n          return delay(retryIntervalInMs);\n        case 8:\n          _context4.next = 10;\n          return tryGetAccessToken();\n        case 10:\n          token = _context4.sent;\n          _context4.next = 5;\n          break;\n        case 13:\n          return _context4.abrupt(\"return\", token);\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _beginRefresh.apply(this, arguments);\n}\nfunction createTokenCycler(credential, scopes, tokenCyclerOptions) {\n  var refreshWorker = null;\n  var token = null;\n  var options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n  var cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing() {\n      return refreshWorker !== null;\n    },\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh() {\n      var _a;\n      return !cycler.isRefreshing && ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();\n    },\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh() {\n      return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();\n    }\n  };\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n  function refresh(getTokenOptions) {\n    var _a;\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      var tryGetAccessToken = function tryGetAccessToken() {\n        return credential.getToken(scopes, getTokenOptions);\n      };\n      // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n      refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs,\n      // If we don't have a token, then we should timeout immediately\n      (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then(function (_token) {\n        refreshWorker = null;\n        token = _token;\n        return token;\n      }).catch(function (reason) {\n        // We also should reset the refresher if we enter a failed state.  All\n        // existing awaiters will throw, but subsequent requests will start a\n        // new retry chain.\n        refreshWorker = null;\n        token = null;\n        throw reason;\n      });\n    }\n    return refreshWorker;\n  }\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(tokenOptions) {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!cycler.mustRefresh) {\n              _context.next = 2;\n              break;\n            }\n            return _context.abrupt(\"return\", refresh(tokenOptions));\n          case 2:\n            if (cycler.shouldRefresh) {\n              refresh(tokenOptions);\n            }\n            return _context.abrupt(\"return\", token);\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response) {\n  var challenge = response.headers.get(\"WWW-Authenticate\");\n  if (response.status === 401 && challenge) {\n    return challenge;\n  }\n  return;\n}\n/**\n * Converts: `Bearer a=\"b\" c=\"d\"`.\n * Into: `[ { a: 'b', c: 'd' }]`.\n *\n * @internal\n */\nfunction parseChallenge(challenge) {\n  var bearerChallenge = challenge.slice(\"Bearer \".length);\n  var challengeParts = \"\".concat(bearerChallenge.trim(), \" \").split(\" \").filter(function (x) {\n    return x;\n  });\n  var keyValuePairs = challengeParts.map(function (keyValue) {\n    return function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        value = _ref3[1];\n      return _defineProperty({}, key, value);\n    }(keyValue.trim().split(\"=\"));\n  });\n  // Key-value pairs to plain object:\n  return keyValuePairs.reduce(function (a, b) {\n    return Object.assign(Object.assign({}, a), b);\n  }, {});\n}\n// #endregion\n/**\n * Creates a new factory for a RequestPolicy that applies a bearer token to\n * the requests' `Authorization` headers.\n *\n * @param credential - The TokenCredential implementation that can supply the bearer token.\n * @param scopes - The scopes for which the bearer token applies.\n */\nexport function storageBearerTokenChallengeAuthenticationPolicy(credential, scopes) {\n  // This simple function encapsulates the entire process of reliably retrieving the token\n  var getToken = createTokenCycler(credential, scopes);\n  var StorageBearerTokenChallengeAuthenticationPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {\n    _inherits(StorageBearerTokenChallengeAuthenticationPolicy, _BaseRequestPolicy);\n    var _super = _createSuper(StorageBearerTokenChallengeAuthenticationPolicy);\n    function StorageBearerTokenChallengeAuthenticationPolicy(nextPolicy, options) {\n      _classCallCheck(this, StorageBearerTokenChallengeAuthenticationPolicy);\n      return _super.call(this, nextPolicy, options);\n    }\n    _createClass(StorageBearerTokenChallengeAuthenticationPolicy, [{\n      key: \"sendRequest\",\n      value: function () {\n        var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(webResource) {\n          var getTokenInternal, token, response, challenge, challengeInfo, challengeScopes, parsedAuthUri, pathSegments, tenantId, getTokenForChallenge, tokenForChallenge;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                if (webResource.url.toLowerCase().startsWith(\"https://\")) {\n                  _context2.next = 2;\n                  break;\n                }\n                throw new Error(\"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\");\n              case 2:\n                getTokenInternal = getToken;\n                _context2.next = 5;\n                return getTokenInternal({\n                  abortSignal: webResource.abortSignal,\n                  tracingOptions: {\n                    tracingContext: webResource.tracingContext\n                  }\n                });\n              case 5:\n                token = _context2.sent.token;\n                webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, \"Bearer \".concat(token));\n                _context2.next = 9;\n                return this._nextPolicy.sendRequest(webResource);\n              case 9:\n                response = _context2.sent;\n                if (!((response === null || response === void 0 ? void 0 : response.status) === 401)) {\n                  _context2.next = 25;\n                  break;\n                }\n                challenge = getChallenge(response);\n                if (!challenge) {\n                  _context2.next = 25;\n                  break;\n                }\n                challengeInfo = parseChallenge(challenge);\n                challengeScopes = challengeInfo.resource_id + Constants.DefaultScope;\n                parsedAuthUri = URLBuilder.parse(challengeInfo.authorization_uri);\n                pathSegments = parsedAuthUri.getPath().split(\"/\");\n                tenantId = pathSegments[1];\n                getTokenForChallenge = createTokenCycler(credential, challengeScopes);\n                _context2.next = 21;\n                return getTokenForChallenge({\n                  abortSignal: webResource.abortSignal,\n                  tracingOptions: {\n                    tracingContext: webResource.tracingContext\n                  },\n                  tenantId: tenantId\n                });\n              case 21:\n                tokenForChallenge = _context2.sent.token;\n                getToken = getTokenForChallenge;\n                webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, \"Bearer \".concat(tokenForChallenge));\n                return _context2.abrupt(\"return\", this._nextPolicy.sendRequest(webResource));\n              case 25:\n                return _context2.abrupt(\"return\", response);\n              case 26:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2, this);\n        }));\n        function sendRequest(_x5) {\n          return _sendRequest.apply(this, arguments);\n        }\n        return sendRequest;\n      }()\n    }]);\n    return StorageBearerTokenChallengeAuthenticationPolicy;\n  }(BaseRequestPolicy);\n  return {\n    create: function create(nextPolicy, options) {\n      return new StorageBearerTokenChallengeAuthenticationPolicy(nextPolicy, options);\n    }\n  };\n}","map":{"version":3,"names":["URLBuilder","BaseRequestPolicy","delay","Constants","DefaultScope","HeaderConstants","AUTHORIZATION","DEFAULT_CYCLER_OPTIONS","forcedRefreshWindowInMs","retryIntervalInMs","refreshWindowInMs","beginRefresh","_x","_x2","_x3","_beginRefresh","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee4","getAccessToken","timeoutInMs","tryGetAccessToken","_tryGetAccessToken","token","wrap","_callee4$","_context4","prev","next","_tryGetAccessToken3","_callee3","finalToken","_callee3$","_context3","Date","now","abrupt","sent","t0","Error","stop","_tryGetAccessToken2","createTokenCycler","credential","scopes","tokenCyclerOptions","refreshWorker","options","Object","assign","cycler","isRefreshing","shouldRefresh","_a","expiresOnTimestamp","mustRefresh","refresh","getTokenOptions","getToken","then","_token","catch","reason","_ref","_callee","tokenOptions","_callee$","_context","_x4","getChallenge","response","challenge","headers","get","status","parseChallenge","bearerChallenge","slice","length","challengeParts","concat","trim","split","filter","x","keyValuePairs","map","keyValue","_ref2","_ref3","_slicedToArray","key","value","_defineProperty","reduce","a","b","storageBearerTokenChallengeAuthenticationPolicy","StorageBearerTokenChallengeAuthenticationPolicy","_BaseRequestPolicy","_inherits","_super","_createSuper","nextPolicy","_classCallCheck","call","_createClass","_sendRequest","_callee2","webResource","getTokenInternal","challengeInfo","challengeScopes","parsedAuthUri","pathSegments","tenantId","getTokenForChallenge","tokenForChallenge","_callee2$","_context2","url","toLowerCase","startsWith","abortSignal","tracingOptions","tracingContext","set","_nextPolicy","sendRequest","resource_id","parse","authorization_uri","getPath","_x5","create"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\policies\\StorageBearerTokenChallengeAuthenticationPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential, URLBuilder } from \"@azure/core-http\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"@azure/core-http\";\nimport { HttpOperationResponse } from \"@azure/core-http\";\nimport { WebResourceLike } from \"@azure/core-http\";\nimport { delay } from \"@azure/core-http\";\n\n/**\n * A set of constants used internally when processing requests.\n */\nconst Constants = {\n  DefaultScope: \"/.default\",\n  /**\n   * Defines constants for use with HTTP headers.\n   */\n  HeaderConstants: {\n    /**\n     * The Authorization header.\n     */\n    AUTHORIZATION: \"authorization\",\n  },\n};\n\n// #region Access Token Cycler\n\n/**\n * A function that gets a promise of an access token and allows providing\n * options.\n *\n * @param options - the options to pass to the underlying token provider\n */\ntype AccessTokenGetter = (options: GetTokenOptions) => Promise<AccessToken>;\n\ninterface TokenCyclerOptions {\n  /**\n   * The window of time before token expiration during which the token will be\n   * considered unusable due to risk of the token expiring before sending the\n   * request.\n   *\n   * This will only become meaningful if the refresh fails for over\n   * (refreshWindow - forcedRefreshWindow) milliseconds.\n   */\n  forcedRefreshWindowInMs: number;\n  /**\n   * Interval in milliseconds to retry failed token refreshes.\n   */\n  retryIntervalInMs: number;\n  /**\n   * The window of time before token expiration during which\n   * we will attempt to refresh the token.\n   */\n  refreshWindowInMs: number;\n}\n\n// Default options for the cycler if none are provided\nconst DEFAULT_CYCLER_OPTIONS: TokenCyclerOptions = {\n  forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n  retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n  refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - a function that produces a promise of an access\n * token that may fail by returning null\n * @param retryIntervalInMs - the time (in milliseconds) to wait between retry\n * attempts\n * @param timeoutInMs - the timestamp after which the refresh attempt will fail,\n * throwing an exception\n * @returns - a promise that, if it resolves, will resolve with an access token\n */\nasync function beginRefresh(\n  getAccessToken: () => Promise<AccessToken | null>,\n  retryIntervalInMs: number,\n  timeoutInMs: number\n): Promise<AccessToken> {\n  // This wrapper handles exceptions gracefully as long as we haven't exceeded\n  // the timeout.\n  async function tryGetAccessToken(): Promise<AccessToken | null> {\n    if (Date.now() < timeoutInMs) {\n      try {\n        return await getAccessToken();\n      } catch {\n        return null;\n      }\n    } else {\n      const finalToken = await getAccessToken();\n\n      // Timeout is up, so throw if it's still null\n      if (finalToken === null) {\n        throw new Error(\"Failed to refresh access token.\");\n      }\n\n      return finalToken;\n    }\n  }\n\n  let token: AccessToken | null = await tryGetAccessToken();\n\n  while (token === null) {\n    await delay(retryIntervalInMs);\n\n    token = await tryGetAccessToken();\n  }\n\n  return token;\n}\n\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param scopes - the scopes to request authorization for\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction createTokenCycler(\n  credential: TokenCredential,\n  scopes: string | string[],\n  tokenCyclerOptions?: Partial<TokenCyclerOptions>\n): AccessTokenGetter {\n  let refreshWorker: Promise<AccessToken> | null = null;\n  let token: AccessToken | null = null;\n\n  const options = {\n    ...DEFAULT_CYCLER_OPTIONS,\n    ...tokenCyclerOptions,\n  };\n\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing(): boolean {\n      return refreshWorker !== null;\n    },\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh(): boolean {\n      return (\n        !cycler.isRefreshing &&\n        (token?.expiresOnTimestamp ?? 0) - options.refreshWindowInMs < Date.now()\n      );\n    },\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh(): boolean {\n      return (\n        token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now()\n      );\n    },\n  };\n\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n  function refresh(getTokenOptions: GetTokenOptions): Promise<AccessToken> {\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = (): Promise<AccessToken | null> =>\n        credential.getToken(scopes, getTokenOptions);\n\n      // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n      refreshWorker = beginRefresh(\n        tryGetAccessToken,\n        options.retryIntervalInMs,\n        // If we don't have a token, then we should timeout immediately\n        token?.expiresOnTimestamp ?? Date.now()\n      )\n        .then((_token) => {\n          refreshWorker = null;\n          token = _token;\n          return token;\n        })\n        .catch((reason) => {\n          // We also should reset the refresher if we enter a failed state.  All\n          // existing awaiters will throw, but subsequent requests will start a\n          // new retry chain.\n          refreshWorker = null;\n          token = null;\n          throw reason;\n        });\n    }\n\n    return refreshWorker as Promise<AccessToken>;\n  }\n\n  return async (tokenOptions: GetTokenOptions): Promise<AccessToken> => {\n    //\n    // Simple rules:\n    // - If we MUST refresh, then return the refresh task, blocking\n    //   the pipeline until a token is available.\n    // - If we SHOULD refresh, then run refresh but don't return it\n    //   (we can still use the cached token).\n    // - Return the token, since it's fine if we didn't return in\n    //   step 1.\n    //\n\n    if (cycler.mustRefresh) return refresh(tokenOptions);\n\n    if (cycler.shouldRefresh) {\n      refresh(tokenOptions);\n    }\n\n    return token as AccessToken;\n  };\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response: HttpOperationResponse): string | undefined {\n  const challenge = response.headers.get(\"WWW-Authenticate\");\n  if (response.status === 401 && challenge) {\n    return challenge;\n  }\n  return;\n}\n\n/**\n * Challenge structure\n */\ninterface Challenge {\n  authorization_uri: string;\n  resource_id: string;\n}\n\n/**\n * Converts: `Bearer a=\"b\" c=\"d\"`.\n * Into: `[ { a: 'b', c: 'd' }]`.\n *\n * @internal\n */\nfunction parseChallenge(challenge: string): any {\n  const bearerChallenge = challenge.slice(\"Bearer \".length);\n  const challengeParts = `${bearerChallenge.trim()} `.split(\" \").filter((x) => x);\n  const keyValuePairs = challengeParts.map((keyValue) =>\n    (([key, value]) => ({ [key]: value }))(keyValue.trim().split(\"=\"))\n  );\n  // Key-value pairs to plain object:\n  return keyValuePairs.reduce((a, b) => ({ ...a, ...b }), {});\n}\n\n// #endregion\n\n/**\n * Creates a new factory for a RequestPolicy that applies a bearer token to\n * the requests' `Authorization` headers.\n *\n * @param credential - The TokenCredential implementation that can supply the bearer token.\n * @param scopes - The scopes for which the bearer token applies.\n */\n\nexport function storageBearerTokenChallengeAuthenticationPolicy(\n  credential: TokenCredential,\n  scopes: string | string[]\n): RequestPolicyFactory {\n  // This simple function encapsulates the entire process of reliably retrieving the token\n  let getToken = createTokenCycler(credential, scopes);\n\n  class StorageBearerTokenChallengeAuthenticationPolicy extends BaseRequestPolicy {\n    public constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n      super(nextPolicy, options);\n    }\n\n    public async sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse> {\n      if (!webResource.url.toLowerCase().startsWith(\"https://\")) {\n        throw new Error(\n          \"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\"\n        );\n      }\n\n      const getTokenInternal = getToken;\n      const token = (\n        await getTokenInternal({\n          abortSignal: webResource.abortSignal,\n          tracingOptions: {\n            tracingContext: webResource.tracingContext,\n          },\n        })\n      ).token;\n      webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${token}`);\n\n      const response = await this._nextPolicy.sendRequest(webResource);\n\n      if (response?.status === 401) {\n        const challenge = getChallenge(response);\n        if (challenge) {\n          const challengeInfo: Challenge = parseChallenge(challenge);\n          const challengeScopes = challengeInfo.resource_id + Constants.DefaultScope;\n          const parsedAuthUri = URLBuilder.parse(challengeInfo.authorization_uri);\n          const pathSegments = parsedAuthUri.getPath()!.split(\"/\");\n          const tenantId = pathSegments[1];\n          const getTokenForChallenge = createTokenCycler(credential, challengeScopes);\n\n          const tokenForChallenge = (\n            await getTokenForChallenge({\n              abortSignal: webResource.abortSignal,\n              tracingOptions: {\n                tracingContext: webResource.tracingContext,\n              },\n              tenantId: tenantId,\n            })\n          ).token;\n\n          getToken = getTokenForChallenge;\n          webResource.headers.set(\n            Constants.HeaderConstants.AUTHORIZATION,\n            `Bearer ${tokenForChallenge}`\n          );\n          return this._nextPolicy.sendRequest(webResource);\n        }\n      }\n\n      return response;\n    }\n  }\n\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new StorageBearerTokenChallengeAuthenticationPolicy(nextPolicy, options);\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}