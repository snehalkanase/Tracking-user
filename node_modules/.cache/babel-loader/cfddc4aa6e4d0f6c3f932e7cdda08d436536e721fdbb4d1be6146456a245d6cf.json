{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n// BaseRequestPolicy has a protected constructor.\n/* eslint-disable @typescript-eslint/no-useless-constructor */\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nexport function ndJsonPolicy() {\n  return {\n    create: (nextPolicy, options) => {\n      return new NdJsonPolicy(nextPolicy, options);\n    }\n  };\n}\n/**\n * NdJsonPolicy that formats a JSON array as newline-delimited JSON\n */\nclass NdJsonPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of KeepAlivePolicy.\n   */\n  constructor(nextPolicy, options) {\n    super(nextPolicy, options);\n  }\n  /**\n   * Sends a request.\n   */\n  async sendRequest(request) {\n    // There currently isn't a good way to bypass the serializer\n    if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n      const body = JSON.parse(request.body);\n      if (Array.isArray(body)) {\n        request.body = body.map(item => JSON.stringify(item) + \"\\n\").join(\"\");\n      }\n    }\n    return this._nextPolicy.sendRequest(request);\n  }\n}","map":{"version":3,"names":["BaseRequestPolicy","ndJsonPolicy","create","nextPolicy","options","NdJsonPolicy","constructor","sendRequest","request","body","startsWith","JSON","parse","Array","isArray","map","item","stringify","join","_nextPolicy"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\policies\\ndJsonPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// BaseRequestPolicy has a protected constructor.\n/* eslint-disable @typescript-eslint/no-useless-constructor */\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\n\nexport function ndJsonPolicy(): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new NdJsonPolicy(nextPolicy, options);\n    },\n  };\n}\n\n/**\n * NdJsonPolicy that formats a JSON array as newline-delimited JSON\n */\nclass NdJsonPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of KeepAlivePolicy.\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends a request.\n   */\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    // There currently isn't a good way to bypass the serializer\n    if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n      const body = JSON.parse(request.body);\n      if (Array.isArray(body)) {\n        request.body = body.map((item) => JSON.stringify(item) + \"\\n\").join(\"\");\n      }\n    }\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA;AACA;AAEA,SACEA,iBAAiB,QAIZ,iBAAiB;AAIxB,OAAM,SAAUC,YAAYA,CAAA;EAC1B,OAAO;IACLC,MAAM,EAAEA,CAACC,UAAyB,EAAEC,OAA6B,KAAI;MACnE,OAAO,IAAIC,YAAY,CAACF,UAAU,EAAEC,OAAO,CAAC;IAC9C;GACD;AACH;AAEA;;;AAGA,MAAMC,YAAa,SAAQL,iBAAiB;EAC1C;;;EAGAM,YAAYH,UAAyB,EAAEC,OAA6B;IAClE,KAAK,CAACD,UAAU,EAAEC,OAAO,CAAC;EAC5B;EAEA;;;EAGO,MAAMG,WAAWA,CAACC,OAAwB;IAC/C;IACA,IAAI,OAAOA,OAAO,CAACC,IAAI,KAAK,QAAQ,IAAID,OAAO,CAACC,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;MACpE,MAAMD,IAAI,GAAGE,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACC,IAAI,CAAC;MACrC,IAAII,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,EAAE;QACvBD,OAAO,CAACC,IAAI,GAAGA,IAAI,CAACM,GAAG,CAAEC,IAAI,IAAKL,IAAI,CAACM,SAAS,CAACD,IAAI,CAAC,GAAG,IAAI,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC;;;IAG3E,OAAO,IAAI,CAACC,WAAW,CAACZ,WAAW,CAACC,OAAO,CAAC;EAC9C"},"metadata":{},"sourceType":"module","externalDependencies":[]}