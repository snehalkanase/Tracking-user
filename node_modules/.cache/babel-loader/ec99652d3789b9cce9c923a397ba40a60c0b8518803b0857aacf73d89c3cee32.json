{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\n/**\n * Creates a policy that signs outgoing requests by calling to the provided `authenticationProvider`'s `signRequest` method.\n * @param authenticationProvider - The authentication provider.\n * @returns An instance of the {@link SigningPolicy}.\n */\nexport function signingPolicy(authenticationProvider) {\n  return {\n    create: (nextPolicy, options) => {\n      return new SigningPolicy(nextPolicy, options, authenticationProvider);\n    }\n  };\n}\n/**\n * A policy that signs outgoing requests by calling to the provided `authenticationProvider`'s `signRequest` method.\n */\nexport class SigningPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy, options, authenticationProvider) {\n    super(nextPolicy, options);\n    this.authenticationProvider = authenticationProvider;\n  }\n  signRequest(request) {\n    return this.authenticationProvider.signRequest(request);\n  }\n  sendRequest(request) {\n    return this.signRequest(request).then(nextRequest => this._nextPolicy.sendRequest(nextRequest));\n  }\n}","map":{"version":3,"names":["BaseRequestPolicy","signingPolicy","authenticationProvider","create","nextPolicy","options","SigningPolicy","constructor","signRequest","request","sendRequest","then","nextRequest","_nextPolicy"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\policies\\signingPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { ServiceClientCredentials } from \"../credentials/serviceClientCredentials\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Creates a policy that signs outgoing requests by calling to the provided `authenticationProvider`'s `signRequest` method.\n * @param authenticationProvider - The authentication provider.\n * @returns An instance of the {@link SigningPolicy}.\n */\nexport function signingPolicy(\n  authenticationProvider: ServiceClientCredentials\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new SigningPolicy(nextPolicy, options, authenticationProvider);\n    },\n  };\n}\n\n/**\n * A policy that signs outgoing requests by calling to the provided `authenticationProvider`'s `signRequest` method.\n */\nexport class SigningPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    public authenticationProvider: ServiceClientCredentials\n  ) {\n    super(nextPolicy, options);\n  }\n\n  signRequest(request: WebResourceLike): Promise<WebResourceLike> {\n    return this.authenticationProvider.signRequest(request);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this.signRequest(request).then((nextRequest) =>\n      this._nextPolicy.sendRequest(nextRequest)\n    );\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA,SACEA,iBAAiB,QAIZ,iBAAiB;AAKxB;;;;;AAKA,OAAM,SAAUC,aAAaA,CAC3BC,sBAAgD;EAEhD,OAAO;IACLC,MAAM,EAAEA,CAACC,UAAyB,EAAEC,OAA6B,KAAI;MACnE,OAAO,IAAIC,aAAa,CAACF,UAAU,EAAEC,OAAO,EAAEH,sBAAsB,CAAC;IACvE;GACD;AACH;AAEA;;;AAGA,OAAM,MAAOI,aAAc,SAAQN,iBAAiB;EAClDO,YACEH,UAAyB,EACzBC,OAA6B,EACtBH,sBAAgD;IAEvD,KAAK,CAACE,UAAU,EAAEC,OAAO,CAAC;IAFnB,KAAAH,sBAAsB,GAAtBA,sBAAsB;EAG/B;EAEAM,WAAWA,CAACC,OAAwB;IAClC,OAAO,IAAI,CAACP,sBAAsB,CAACM,WAAW,CAACC,OAAO,CAAC;EACzD;EAEOC,WAAWA,CAACD,OAAwB;IACzC,OAAO,IAAI,CAACD,WAAW,CAACC,OAAO,CAAC,CAACE,IAAI,CAAEC,WAAW,IAChD,IAAI,CAACC,WAAW,CAACH,WAAW,CAACE,WAAW,CAAC,CAC1C;EACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}