{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a container.\n * Setting a value to true means that any SAS which uses these permissions will grant permissions for that operation.\n * Once all the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport var ContainerSASPermissions = /*#__PURE__*/function () {\n  function ContainerSASPermissions() {\n    _classCallCheck(this, ContainerSASPermissions);\n    /**\n     * Specifies Read access granted.\n     */\n    this.read = false;\n    /**\n     * Specifies Add access granted.\n     */\n    this.add = false;\n    /**\n     * Specifies Create access granted.\n     */\n    this.create = false;\n    /**\n     * Specifies Write access granted.\n     */\n    this.write = false;\n    /**\n     * Specifies Delete access granted.\n     */\n    this.delete = false;\n    /**\n     * Specifies Delete version access granted.\n     */\n    this.deleteVersion = false;\n    /**\n     * Specifies List access granted.\n     */\n    this.list = false;\n    /**\n     * Specfies Tag access granted.\n     */\n    this.tag = false;\n    /**\n     * Specifies Move access granted.\n     */\n    this.move = false;\n    /**\n     * Specifies Execute access granted.\n     */\n    this.execute = false;\n    /**\n     * Specifies SetImmutabilityPolicy access granted.\n     */\n    this.setImmutabilityPolicy = false;\n    /**\n     * Specifies that Permanent Delete is permitted.\n     */\n    this.permanentDelete = false;\n    /**\n     * Specifies that Filter Blobs by Tags is permitted.\n     */\n    this.filterByTags = false;\n  }\n  /**\n   * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n  _createClass(ContainerSASPermissions, [{\n    key: \"toString\",\n    value:\n    /**\n     * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n     * order accepted by the service.\n     *\n     * The order of the characters should be as specified here to ensure correctness.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     */\n    function toString() {\n      var permissions = [];\n      if (this.read) {\n        permissions.push(\"r\");\n      }\n      if (this.add) {\n        permissions.push(\"a\");\n      }\n      if (this.create) {\n        permissions.push(\"c\");\n      }\n      if (this.write) {\n        permissions.push(\"w\");\n      }\n      if (this.delete) {\n        permissions.push(\"d\");\n      }\n      if (this.deleteVersion) {\n        permissions.push(\"x\");\n      }\n      if (this.list) {\n        permissions.push(\"l\");\n      }\n      if (this.tag) {\n        permissions.push(\"t\");\n      }\n      if (this.move) {\n        permissions.push(\"m\");\n      }\n      if (this.execute) {\n        permissions.push(\"e\");\n      }\n      if (this.setImmutabilityPolicy) {\n        permissions.push(\"i\");\n      }\n      if (this.permanentDelete) {\n        permissions.push(\"y\");\n      }\n      if (this.filterByTags) {\n        permissions.push(\"f\");\n      }\n      return permissions.join(\"\");\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(permissions) {\n      var containerSASPermissions = new ContainerSASPermissions();\n      var _iterator = _createForOfIteratorHelper(permissions),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var char = _step.value;\n          switch (char) {\n            case \"r\":\n              containerSASPermissions.read = true;\n              break;\n            case \"a\":\n              containerSASPermissions.add = true;\n              break;\n            case \"c\":\n              containerSASPermissions.create = true;\n              break;\n            case \"w\":\n              containerSASPermissions.write = true;\n              break;\n            case \"d\":\n              containerSASPermissions.delete = true;\n              break;\n            case \"l\":\n              containerSASPermissions.list = true;\n              break;\n            case \"t\":\n              containerSASPermissions.tag = true;\n              break;\n            case \"x\":\n              containerSASPermissions.deleteVersion = true;\n              break;\n            case \"m\":\n              containerSASPermissions.move = true;\n              break;\n            case \"e\":\n              containerSASPermissions.execute = true;\n              break;\n            case \"i\":\n              containerSASPermissions.setImmutabilityPolicy = true;\n              break;\n            case \"y\":\n              containerSASPermissions.permanentDelete = true;\n              break;\n            case \"f\":\n              containerSASPermissions.filterByTags = true;\n              break;\n            default:\n              throw new RangeError(\"Invalid permission \".concat(char));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return containerSASPermissions;\n    }\n    /**\n     * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it\n     * and boolean values for them.\n     *\n     * @param permissionLike -\n     */\n  }, {\n    key: \"from\",\n    value: function from(permissionLike) {\n      var containerSASPermissions = new ContainerSASPermissions();\n      if (permissionLike.read) {\n        containerSASPermissions.read = true;\n      }\n      if (permissionLike.add) {\n        containerSASPermissions.add = true;\n      }\n      if (permissionLike.create) {\n        containerSASPermissions.create = true;\n      }\n      if (permissionLike.write) {\n        containerSASPermissions.write = true;\n      }\n      if (permissionLike.delete) {\n        containerSASPermissions.delete = true;\n      }\n      if (permissionLike.list) {\n        containerSASPermissions.list = true;\n      }\n      if (permissionLike.deleteVersion) {\n        containerSASPermissions.deleteVersion = true;\n      }\n      if (permissionLike.tag) {\n        containerSASPermissions.tag = true;\n      }\n      if (permissionLike.move) {\n        containerSASPermissions.move = true;\n      }\n      if (permissionLike.execute) {\n        containerSASPermissions.execute = true;\n      }\n      if (permissionLike.setImmutabilityPolicy) {\n        containerSASPermissions.setImmutabilityPolicy = true;\n      }\n      if (permissionLike.permanentDelete) {\n        containerSASPermissions.permanentDelete = true;\n      }\n      if (permissionLike.filterByTags) {\n        containerSASPermissions.filterByTags = true;\n      }\n      return containerSASPermissions;\n    }\n  }]);\n  return ContainerSASPermissions;\n}();","map":{"version":3,"names":["ContainerSASPermissions","_classCallCheck","read","add","create","write","delete","deleteVersion","list","tag","move","execute","setImmutabilityPolicy","permanentDelete","filterByTags","_createClass","key","value","toString","permissions","push","join","parse","containerSASPermissions","_iterator","_createForOfIteratorHelper","_step","s","n","done","char","RangeError","concat","err","e","f","from","permissionLike"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\sas\\ContainerSASPermissions.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a container.\n * Setting a value to true means that any SAS which uses these permissions will grant permissions for that operation.\n * Once all the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class ContainerSASPermissions {\n  /**\n   * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n  public static parse(permissions: string): ContainerSASPermissions {\n    const containerSASPermissions = new ContainerSASPermissions();\n\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          containerSASPermissions.read = true;\n          break;\n        case \"a\":\n          containerSASPermissions.add = true;\n          break;\n        case \"c\":\n          containerSASPermissions.create = true;\n          break;\n        case \"w\":\n          containerSASPermissions.write = true;\n          break;\n        case \"d\":\n          containerSASPermissions.delete = true;\n          break;\n        case \"l\":\n          containerSASPermissions.list = true;\n          break;\n        case \"t\":\n          containerSASPermissions.tag = true;\n          break;\n        case \"x\":\n          containerSASPermissions.deleteVersion = true;\n          break;\n        case \"m\":\n          containerSASPermissions.move = true;\n          break;\n        case \"e\":\n          containerSASPermissions.execute = true;\n          break;\n        case \"i\":\n          containerSASPermissions.setImmutabilityPolicy = true;\n          break;\n        case \"y\":\n          containerSASPermissions.permanentDelete = true;\n          break;\n        case \"f\":\n          containerSASPermissions.filterByTags = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission ${char}`);\n      }\n    }\n\n    return containerSASPermissions;\n  }\n\n  /**\n   * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n  public static from(permissionLike: ContainerSASPermissionsLike): ContainerSASPermissions {\n    const containerSASPermissions = new ContainerSASPermissions();\n    if (permissionLike.read) {\n      containerSASPermissions.read = true;\n    }\n    if (permissionLike.add) {\n      containerSASPermissions.add = true;\n    }\n    if (permissionLike.create) {\n      containerSASPermissions.create = true;\n    }\n    if (permissionLike.write) {\n      containerSASPermissions.write = true;\n    }\n    if (permissionLike.delete) {\n      containerSASPermissions.delete = true;\n    }\n    if (permissionLike.list) {\n      containerSASPermissions.list = true;\n    }\n    if (permissionLike.deleteVersion) {\n      containerSASPermissions.deleteVersion = true;\n    }\n    if (permissionLike.tag) {\n      containerSASPermissions.tag = true;\n    }\n    if (permissionLike.move) {\n      containerSASPermissions.move = true;\n    }\n    if (permissionLike.execute) {\n      containerSASPermissions.execute = true;\n    }\n    if (permissionLike.setImmutabilityPolicy) {\n      containerSASPermissions.setImmutabilityPolicy = true;\n    }\n    if (permissionLike.permanentDelete) {\n      containerSASPermissions.permanentDelete = true;\n    }\n    if (permissionLike.filterByTags) {\n      containerSASPermissions.filterByTags = true;\n    }\n    return containerSASPermissions;\n  }\n\n  /**\n   * Specifies Read access granted.\n   */\n  public read: boolean = false;\n\n  /**\n   * Specifies Add access granted.\n   */\n  public add: boolean = false;\n\n  /**\n   * Specifies Create access granted.\n   */\n  public create: boolean = false;\n\n  /**\n   * Specifies Write access granted.\n   */\n  public write: boolean = false;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  public delete: boolean = false;\n\n  /**\n   * Specifies Delete version access granted.\n   */\n  public deleteVersion: boolean = false;\n\n  /**\n   * Specifies List access granted.\n   */\n  public list: boolean = false;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  public tag: boolean = false;\n\n  /**\n   * Specifies Move access granted.\n   */\n  public move: boolean = false;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  public execute: boolean = false;\n\n  /**\n   * Specifies SetImmutabilityPolicy access granted.\n   */\n  public setImmutabilityPolicy: boolean = false;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  public permanentDelete: boolean = false;\n\n  /**\n   * Specifies that Filter Blobs by Tags is permitted.\n   */\n  public filterByTags: boolean = false;\n\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * The order of the characters should be as specified here to ensure correctness.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n   *\n   */\n  public toString(): string {\n    const permissions: string[] = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n    if (this.list) {\n      permissions.push(\"l\");\n    }\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n    if (this.move) {\n      permissions.push(\"m\");\n    }\n    if (this.execute) {\n      permissions.push(\"e\");\n    }\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n    if (this.filterByTags) {\n      permissions.push(\"f\");\n    }\n    return permissions.join(\"\");\n  }\n}\n\n/**\n * A type that looks like a Container SAS permission.\n * Used in {@link ContainerSASPermissions} to parse SAS permissions from raw objects.\n */\nexport interface ContainerSASPermissionsLike {\n  /**\n   * Specifies Read access granted.\n   */\n  read?: boolean;\n\n  /**\n   * Specifies Add access granted.\n   */\n  add?: boolean;\n\n  /**\n   * Specifies Create access granted.\n   */\n  create?: boolean;\n\n  /**\n   * Specifies Write access granted.\n   */\n  write?: boolean;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  delete?: boolean;\n\n  /**\n   * Specifies Delete version access granted.\n   */\n  deleteVersion?: boolean;\n\n  /**\n   * Specifies List access granted.\n   */\n  list?: boolean;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  tag?: boolean;\n\n  /**\n   * Specifies Move access granted.\n   */\n  move?: boolean;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  execute?: boolean;\n\n  /**\n   * Specifies SetImmutabilityPolicy access granted.\n   */\n  setImmutabilityPolicy?: boolean;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  permanentDelete?: boolean;\n\n  /**\n   * Specifies that Filter Blobs by Tags is permitted.\n   */\n  filterByTags?: boolean;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}