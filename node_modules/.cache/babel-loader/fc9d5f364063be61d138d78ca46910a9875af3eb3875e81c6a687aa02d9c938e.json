{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that service. Once all the\n * values are set, this should be serialized with toString and set as the services field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but\n * the order of the services is particular and this class guarantees correctness.\n */\nexport var AccountSASServices = /*#__PURE__*/function () {\n  function AccountSASServices() {\n    _classCallCheck(this, AccountSASServices);\n    /**\n     * Permission to access blob resources granted.\n     */\n    this.blob = false;\n    /**\n     * Permission to access file resources granted.\n     */\n    this.file = false;\n    /**\n     * Permission to access queue resources granted.\n     */\n    this.queue = false;\n    /**\n     * Permission to access table resources granted.\n     */\n    this.table = false;\n  }\n  /**\n   * Creates an {@link AccountSASServices} from the specified services string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid service.\n   *\n   * @param services -\n   */\n  _createClass(AccountSASServices, [{\n    key: \"toString\",\n    value:\n    /**\n     * Converts the given services to a string.\n     *\n     */\n    function toString() {\n      var services = [];\n      if (this.blob) {\n        services.push(\"b\");\n      }\n      if (this.table) {\n        services.push(\"t\");\n      }\n      if (this.queue) {\n        services.push(\"q\");\n      }\n      if (this.file) {\n        services.push(\"f\");\n      }\n      return services.join(\"\");\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(services) {\n      var accountSASServices = new AccountSASServices();\n      var _iterator = _createForOfIteratorHelper(services),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var c = _step.value;\n          switch (c) {\n            case \"b\":\n              accountSASServices.blob = true;\n              break;\n            case \"f\":\n              accountSASServices.file = true;\n              break;\n            case \"q\":\n              accountSASServices.queue = true;\n              break;\n            case \"t\":\n              accountSASServices.table = true;\n              break;\n            default:\n              throw new RangeError(\"Invalid service character: \".concat(c));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return accountSASServices;\n    }\n  }]);\n  return AccountSASServices;\n}();","map":{"version":3,"names":["AccountSASServices","_classCallCheck","blob","file","queue","table","_createClass","key","value","toString","services","push","join","parse","accountSASServices","_iterator","_createForOfIteratorHelper","_step","s","n","done","c","RangeError","concat","err","e","f"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\sas\\AccountSASServices.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that service. Once all the\n * values are set, this should be serialized with toString and set as the services field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but\n * the order of the services is particular and this class guarantees correctness.\n */\nexport class AccountSASServices {\n  /**\n   * Creates an {@link AccountSASServices} from the specified services string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid service.\n   *\n   * @param services -\n   */\n  public static parse(services: string): AccountSASServices {\n    const accountSASServices = new AccountSASServices();\n\n    for (const c of services) {\n      switch (c) {\n        case \"b\":\n          accountSASServices.blob = true;\n          break;\n        case \"f\":\n          accountSASServices.file = true;\n          break;\n        case \"q\":\n          accountSASServices.queue = true;\n          break;\n        case \"t\":\n          accountSASServices.table = true;\n          break;\n        default:\n          throw new RangeError(`Invalid service character: ${c}`);\n      }\n    }\n\n    return accountSASServices;\n  }\n\n  /**\n   * Permission to access blob resources granted.\n   */\n  public blob: boolean = false;\n\n  /**\n   * Permission to access file resources granted.\n   */\n  public file: boolean = false;\n\n  /**\n   * Permission to access queue resources granted.\n   */\n  public queue: boolean = false;\n\n  /**\n   * Permission to access table resources granted.\n   */\n  public table: boolean = false;\n\n  /**\n   * Converts the given services to a string.\n   *\n   */\n  public toString(): string {\n    const services: string[] = [];\n    if (this.blob) {\n      services.push(\"b\");\n    }\n    if (this.table) {\n      services.push(\"t\");\n    }\n    if (this.queue) {\n      services.push(\"q\");\n    }\n    if (this.file) {\n      services.push(\"f\");\n    }\n    return services.join(\"\");\n  }\n}\n"],"mappings":";;;AAAA;AACA;AAEA;;;;;;;;;AASA,WAAaA,kBAAkB;EAA/B,SAAAA,mBAAA;IAAAC,eAAA,OAAAD,kBAAA;IAgCE;;;IAGO,KAAAE,IAAI,GAAY,KAAK;IAE5B;;;IAGO,KAAAC,IAAI,GAAY,KAAK;IAE5B;;;IAGO,KAAAC,KAAK,GAAY,KAAK;IAE7B;;;IAGO,KAAAC,KAAK,GAAY,KAAK;EAsB/B;EAvEE;;;;;;EAAAC,YAAA,CAAAN,kBAAA;IAAAO,GAAA;IAAAC,KAAA;IAmDA;;;;IAIO,SAAAC,SAAA,EAAQ;MACb,IAAMC,QAAQ,GAAa,EAAE;MAC7B,IAAI,IAAI,CAACR,IAAI,EAAE;QACbQ,QAAQ,CAACC,IAAI,CAAC,GAAG,CAAC;;MAEpB,IAAI,IAAI,CAACN,KAAK,EAAE;QACdK,QAAQ,CAACC,IAAI,CAAC,GAAG,CAAC;;MAEpB,IAAI,IAAI,CAACP,KAAK,EAAE;QACdM,QAAQ,CAACC,IAAI,CAAC,GAAG,CAAC;;MAEpB,IAAI,IAAI,CAACR,IAAI,EAAE;QACbO,QAAQ,CAACC,IAAI,CAAC,GAAG,CAAC;;MAEpB,OAAOD,QAAQ,CAACE,IAAI,CAAC,EAAE,CAAC;IAC1B;EAAC;IAAAL,GAAA;IAAAC,KAAA,EAhEM,SAAAK,MAAaH,QAAgB;MAClC,IAAMI,kBAAkB,GAAG,IAAId,kBAAkB,EAAE;MAAC,IAAAe,SAAA,GAAAC,0BAAA,CAEpCN,QAAQ;QAAAO,KAAA;MAAA;QAAxB,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA0B;UAAA,IAAfC,CAAC,GAAAJ,KAAA,CAAAT,KAAA;UACV,QAAQa,CAAC;YACP,KAAK,GAAG;cACNP,kBAAkB,CAACZ,IAAI,GAAG,IAAI;cAC9B;YACF,KAAK,GAAG;cACNY,kBAAkB,CAACX,IAAI,GAAG,IAAI;cAC9B;YACF,KAAK,GAAG;cACNW,kBAAkB,CAACV,KAAK,GAAG,IAAI;cAC/B;YACF,KAAK,GAAG;cACNU,kBAAkB,CAACT,KAAK,GAAG,IAAI;cAC/B;YACF;cACE,MAAM,IAAIiB,UAAU,+BAAAC,MAAA,CAA+BF,CAAC,CAAE,CAAC;;;MAE5D,SAAAG,GAAA;QAAAT,SAAA,CAAAU,CAAA,CAAAD,GAAA;MAAA;QAAAT,SAAA,CAAAW,CAAA;MAAA;MAED,OAAOZ,kBAAkB;IAC3B;EAAC;EAAA,OAAAd,kBAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}