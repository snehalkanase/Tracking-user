{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport * as base64 from \"../util/base64\";\nimport { Constants } from \"../util/constants\";\nimport { HttpHeaders } from \"../httpHeaders\";\nconst HeaderConstants = Constants.HeaderConstants;\nconst DEFAULT_AUTHORIZATION_SCHEME = \"Basic\";\n/**\n * A simple {@link ServiceClientCredential} that authenticates with a username and a password.\n */\nexport class BasicAuthenticationCredentials {\n  /**\n   * Creates a new BasicAuthenticationCredentials object.\n   *\n   * @param userName - User name.\n   * @param password - Password.\n   * @param authorizationScheme - The authorization scheme.\n   */\n  constructor(userName, password) {\n    let authorizationScheme = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_AUTHORIZATION_SCHEME;\n    /**\n     * Authorization scheme. Defaults to \"Basic\".\n     * More information about authorization schemes is available here: https://developer.mozilla.org/docs/Web/HTTP/Authentication#authentication_schemes\n     */\n    this.authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;\n    if (userName === null || userName === undefined || typeof userName.valueOf() !== \"string\") {\n      throw new Error(\"userName cannot be null or undefined and must be of type string.\");\n    }\n    if (password === null || password === undefined || typeof password.valueOf() !== \"string\") {\n      throw new Error(\"password cannot be null or undefined and must be of type string.\");\n    }\n    this.userName = userName;\n    this.password = password;\n    this.authorizationScheme = authorizationScheme;\n  }\n  /**\n   * Signs a request with the Authentication header.\n   *\n   * @param webResource - The WebResourceLike to be signed.\n   * @returns The signed request object.\n   */\n  signRequest(webResource) {\n    const credentials = `${this.userName}:${this.password}`;\n    const encodedCredentials = `${this.authorizationScheme} ${base64.encodeString(credentials)}`;\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n    webResource.headers.set(HeaderConstants.AUTHORIZATION, encodedCredentials);\n    return Promise.resolve(webResource);\n  }\n}","map":{"version":3,"names":["base64","Constants","HttpHeaders","HeaderConstants","DEFAULT_AUTHORIZATION_SCHEME","BasicAuthenticationCredentials","constructor","userName","password","authorizationScheme","arguments","length","undefined","valueOf","Error","signRequest","webResource","credentials","encodedCredentials","encodeString","headers","set","AUTHORIZATION","Promise","resolve"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\credentials\\basicAuthenticationCredentials.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as base64 from \"../util/base64\";\nimport { Constants } from \"../util/constants\";\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { ServiceClientCredentials } from \"./serviceClientCredentials\";\nimport { WebResourceLike } from \"../webResource\";\n\nconst HeaderConstants = Constants.HeaderConstants;\nconst DEFAULT_AUTHORIZATION_SCHEME = \"Basic\";\n\n/**\n * A simple {@link ServiceClientCredential} that authenticates with a username and a password.\n */\nexport class BasicAuthenticationCredentials implements ServiceClientCredentials {\n  /**\n   * Username\n   */\n  userName: string;\n\n  /**\n   * Password\n   */\n  password: string;\n\n  /**\n   * Authorization scheme. Defaults to \"Basic\".\n   * More information about authorization schemes is available here: https://developer.mozilla.org/docs/Web/HTTP/Authentication#authentication_schemes\n   */\n  authorizationScheme: string = DEFAULT_AUTHORIZATION_SCHEME;\n\n  /**\n   * Creates a new BasicAuthenticationCredentials object.\n   *\n   * @param userName - User name.\n   * @param password - Password.\n   * @param authorizationScheme - The authorization scheme.\n   */\n  constructor(\n    userName: string,\n    password: string,\n    authorizationScheme: string = DEFAULT_AUTHORIZATION_SCHEME\n  ) {\n    if (userName === null || userName === undefined || typeof userName.valueOf() !== \"string\") {\n      throw new Error(\"userName cannot be null or undefined and must be of type string.\");\n    }\n    if (password === null || password === undefined || typeof password.valueOf() !== \"string\") {\n      throw new Error(\"password cannot be null or undefined and must be of type string.\");\n    }\n    this.userName = userName;\n    this.password = password;\n    this.authorizationScheme = authorizationScheme;\n  }\n\n  /**\n   * Signs a request with the Authentication header.\n   *\n   * @param webResource - The WebResourceLike to be signed.\n   * @returns The signed request object.\n   */\n  signRequest(webResource: WebResourceLike): Promise<WebResourceLike> {\n    const credentials = `${this.userName}:${this.password}`;\n    const encodedCredentials = `${this.authorizationScheme} ${base64.encodeString(credentials)}`;\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n    webResource.headers.set(HeaderConstants.AUTHORIZATION, encodedCredentials);\n    return Promise.resolve(webResource);\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA,OAAO,KAAKA,MAAM,MAAM,gBAAgB;AACxC,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,WAAW,QAAQ,gBAAgB;AAI5C,MAAMC,eAAe,GAAGF,SAAS,CAACE,eAAe;AACjD,MAAMC,4BAA4B,GAAG,OAAO;AAE5C;;;AAGA,OAAM,MAAOC,8BAA8B;EAiBzC;;;;;;;EAOAC,YACEC,QAAgB,EAChBC,QAAgB,EAC0C;IAAA,IAA1DC,mBAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA8BN,4BAA4B;IAhB5D;;;;IAIA,KAAAK,mBAAmB,GAAWL,4BAA4B;IAcxD,IAAIG,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAKK,SAAS,IAAI,OAAOL,QAAQ,CAACM,OAAO,EAAE,KAAK,QAAQ,EAAE;MACzF,MAAM,IAAIC,KAAK,CAAC,kEAAkE,CAAC;;IAErF,IAAIN,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAKI,SAAS,IAAI,OAAOJ,QAAQ,CAACK,OAAO,EAAE,KAAK,QAAQ,EAAE;MACzF,MAAM,IAAIC,KAAK,CAAC,kEAAkE,CAAC;;IAErF,IAAI,CAACP,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB;EAChD;EAEA;;;;;;EAMAM,WAAWA,CAACC,WAA4B;IACtC,MAAMC,WAAW,GAAG,GAAG,IAAI,CAACV,QAAQ,IAAI,IAAI,CAACC,QAAQ,EAAE;IACvD,MAAMU,kBAAkB,GAAG,GAAG,IAAI,CAACT,mBAAmB,IAAIT,MAAM,CAACmB,YAAY,CAACF,WAAW,CAAC,EAAE;IAC5F,IAAI,CAACD,WAAW,CAACI,OAAO,EAAEJ,WAAW,CAACI,OAAO,GAAG,IAAIlB,WAAW,EAAE;IACjEc,WAAW,CAACI,OAAO,CAACC,GAAG,CAAClB,eAAe,CAACmB,aAAa,EAAEJ,kBAAkB,CAAC;IAC1E,OAAOK,OAAO,CAACC,OAAO,CAACR,WAAW,CAAC;EACrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}