{"ast":null,"code":"import _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\n/**\n * Creates a policy that assigns a unique request id to outgoing requests.\n * @param requestIdHeaderName - The name of the header to use when assigning the unique id to the request.\n */\nexport function generateClientRequestIdPolicy() {\n  var requestIdHeaderName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"x-ms-client-request-id\";\n  return {\n    create: function create(nextPolicy, options) {\n      return new GenerateClientRequestIdPolicy(nextPolicy, options, requestIdHeaderName);\n    }\n  };\n}\nexport var GenerateClientRequestIdPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {\n  _inherits(GenerateClientRequestIdPolicy, _BaseRequestPolicy);\n  var _super = _createSuper(GenerateClientRequestIdPolicy);\n  function GenerateClientRequestIdPolicy(nextPolicy, options, _requestIdHeaderName) {\n    var _this;\n    _classCallCheck(this, GenerateClientRequestIdPolicy);\n    _this = _super.call(this, nextPolicy, options);\n    _this._requestIdHeaderName = _requestIdHeaderName;\n    return _this;\n  }\n  _createClass(GenerateClientRequestIdPolicy, [{\n    key: \"sendRequest\",\n    value: function sendRequest(request) {\n      if (!request.headers.contains(this._requestIdHeaderName)) {\n        request.headers.set(this._requestIdHeaderName, request.requestId);\n      }\n      return this._nextPolicy.sendRequest(request);\n    }\n  }]);\n  return GenerateClientRequestIdPolicy;\n}(BaseRequestPolicy);","map":{"version":3,"names":["BaseRequestPolicy","generateClientRequestIdPolicy","requestIdHeaderName","arguments","length","undefined","create","nextPolicy","options","GenerateClientRequestIdPolicy","_BaseRequestPolicy","_inherits","_super","_createSuper","_requestIdHeaderName","_this","_classCallCheck","call","_createClass","key","value","sendRequest","request","headers","contains","set","requestId","_nextPolicy"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\policies\\generateClientRequestIdPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Creates a policy that assigns a unique request id to outgoing requests.\n * @param requestIdHeaderName - The name of the header to use when assigning the unique id to the request.\n */\nexport function generateClientRequestIdPolicy(\n  requestIdHeaderName = \"x-ms-client-request-id\"\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new GenerateClientRequestIdPolicy(nextPolicy, options, requestIdHeaderName);\n    },\n  };\n}\n\nexport class GenerateClientRequestIdPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private _requestIdHeaderName: string\n  ) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!request.headers.contains(this._requestIdHeaderName)) {\n      request.headers.set(this._requestIdHeaderName, request.requestId);\n    }\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n"],"mappings":";;;;AAAA;AACA;AAEA,SACEA,iBAAiB,QAIZ,iBAAiB;AAIxB;;;;AAIA,OAAM,SAAUC,6BAA6BA,CAAA,EACG;EAAA,IAA9CC,mBAAmB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,wBAAwB;EAE9C,OAAO;IACLG,MAAM,EAAE,SAAAA,OAACC,UAAyB,EAAEC,OAA6B,EAAI;MACnE,OAAO,IAAIC,6BAA6B,CAACF,UAAU,EAAEC,OAAO,EAAEN,mBAAmB,CAAC;IACpF;GACD;AACH;AAEA,WAAaO,6BAA8B,0BAAAC,kBAAA;EAAAC,SAAA,CAAAF,6BAAA,EAAAC,kBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,6BAAA;EACzC,SAAAA,8BACEF,UAAyB,EACzBC,OAA6B,EACrBM,oBAA4B;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,6BAAA;IAEpCM,KAAA,GAAAH,MAAA,CAAAK,IAAA,OAAMV,UAAU,EAAEC,OAAO;IAFjBO,KAAA,CAAAD,oBAAoB,GAApBA,oBAAoB;IAAQ,OAAAC,KAAA;EAGtC;EAACG,YAAA,CAAAT,6BAAA;IAAAU,GAAA;IAAAC,KAAA,EAEM,SAAAC,YAAYC,OAAwB;MACzC,IAAI,CAACA,OAAO,CAACC,OAAO,CAACC,QAAQ,CAAC,IAAI,CAACV,oBAAoB,CAAC,EAAE;QACxDQ,OAAO,CAACC,OAAO,CAACE,GAAG,CAAC,IAAI,CAACX,oBAAoB,EAAEQ,OAAO,CAACI,SAAS,CAAC;;MAEnE,OAAO,IAAI,CAACC,WAAW,CAACN,WAAW,CAACC,OAAO,CAAC;IAC9C;EAAC;EAAA,OAAAb,6BAAA;AAAA,EAdgDT,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}