{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport { Constants } from \"../util/constants\";\nimport { DEFAULT_CLIENT_MAX_RETRY_COUNT } from \"../util/throttlingRetryStrategy\";\nimport { delay } from \"@azure/core-util\";\nvar StatusCodes = Constants.HttpConstants.StatusCodes;\n/**\n * Creates a policy that re-sends the request if the response indicates the request failed because of throttling reasons.\n * For example, if the response contains a `Retry-After` header, it will retry sending the request based on the value of that header.\n *\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n * @returns\n */\nexport function throttlingRetryPolicy() {\n  return {\n    create: function create(nextPolicy, options) {\n      return new ThrottlingRetryPolicy(nextPolicy, options);\n    }\n  };\n}\nvar StandardAbortMessage = \"The operation was aborted.\";\n/**\n * Creates a policy that re-sends the request if the response indicates the request failed because of throttling reasons.\n * For example, if the response contains a `Retry-After` header, it will retry sending the request based on the value of that header.\n *\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\nexport var ThrottlingRetryPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {\n  _inherits(ThrottlingRetryPolicy, _BaseRequestPolicy);\n  var _super = _createSuper(ThrottlingRetryPolicy);\n  function ThrottlingRetryPolicy(nextPolicy, options, _handleResponse) {\n    var _this;\n    _classCallCheck(this, ThrottlingRetryPolicy);\n    _this = _super.call(this, nextPolicy, options);\n    _this.numberOfRetries = 0;\n    _this._handleResponse = _handleResponse || _this._defaultResponseHandler;\n    return _this;\n  }\n  _createClass(ThrottlingRetryPolicy, [{\n    key: \"sendRequest\",\n    value: function () {\n      var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(httpRequest) {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this._nextPolicy.sendRequest(httpRequest.clone());\n            case 2:\n              response = _context.sent;\n              if (!(response.status !== StatusCodes.TooManyRequests && response.status !== StatusCodes.ServiceUnavailable)) {\n                _context.next = 7;\n                break;\n              }\n              return _context.abrupt(\"return\", response);\n            case 7:\n              return _context.abrupt(\"return\", this._handleResponse(httpRequest, response));\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function sendRequest(_x) {\n        return _sendRequest.apply(this, arguments);\n      }\n      return sendRequest;\n    }()\n  }, {\n    key: \"_defaultResponseHandler\",\n    value: function () {\n      var _defaultResponseHandler2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(httpRequest, httpResponse) {\n        var _a, retryAfterHeader, delayInMs;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              retryAfterHeader = httpResponse.headers.get(Constants.HeaderConstants.RETRY_AFTER);\n              if (!retryAfterHeader) {\n                _context2.next = 14;\n                break;\n              }\n              delayInMs = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);\n              if (!delayInMs) {\n                _context2.next = 14;\n                break;\n              }\n              this.numberOfRetries += 1;\n              _context2.next = 7;\n              return delay(delayInMs, {\n                abortSignal: httpRequest.abortSignal,\n                abortErrorMsg: StandardAbortMessage\n              });\n            case 7:\n              if (!((_a = httpRequest.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted)) {\n                _context2.next = 9;\n                break;\n              }\n              throw new AbortError(StandardAbortMessage);\n            case 9:\n              if (!(this.numberOfRetries < DEFAULT_CLIENT_MAX_RETRY_COUNT)) {\n                _context2.next = 13;\n                break;\n              }\n              return _context2.abrupt(\"return\", this.sendRequest(httpRequest));\n            case 13:\n              return _context2.abrupt(\"return\", this._nextPolicy.sendRequest(httpRequest));\n            case 14:\n              return _context2.abrupt(\"return\", httpResponse);\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _defaultResponseHandler(_x2, _x3) {\n        return _defaultResponseHandler2.apply(this, arguments);\n      }\n      return _defaultResponseHandler;\n    }()\n  }], [{\n    key: \"parseRetryAfterHeader\",\n    value: function parseRetryAfterHeader(headerValue) {\n      var retryAfterInSeconds = Number(headerValue);\n      if (Number.isNaN(retryAfterInSeconds)) {\n        return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n      } else {\n        return retryAfterInSeconds * 1000;\n      }\n    }\n  }, {\n    key: \"parseDateRetryAfterHeader\",\n    value: function parseDateRetryAfterHeader(headerValue) {\n      try {\n        var now = Date.now();\n        var date = Date.parse(headerValue);\n        var diff = date - now;\n        return Number.isNaN(diff) ? undefined : diff;\n      } catch (error) {\n        return undefined;\n      }\n    }\n  }]);\n  return ThrottlingRetryPolicy;\n}(BaseRequestPolicy);","map":{"version":3,"names":["BaseRequestPolicy","AbortError","Constants","DEFAULT_CLIENT_MAX_RETRY_COUNT","delay","StatusCodes","HttpConstants","throttlingRetryPolicy","create","nextPolicy","options","ThrottlingRetryPolicy","StandardAbortMessage","_BaseRequestPolicy","_inherits","_super","_createSuper","_handleResponse","_this","_classCallCheck","call","numberOfRetries","_defaultResponseHandler","_createClass","key","value","_sendRequest","_asyncToGenerator","_regeneratorRuntime","mark","_callee","httpRequest","response","wrap","_callee$","_context","prev","next","_nextPolicy","sendRequest","clone","sent","status","TooManyRequests","ServiceUnavailable","abrupt","stop","_x","apply","arguments","_defaultResponseHandler2","_callee2","httpResponse","_a","retryAfterHeader","delayInMs","_callee2$","_context2","headers","get","HeaderConstants","RETRY_AFTER","parseRetryAfterHeader","abortSignal","abortErrorMsg","aborted","_x2","_x3","headerValue","retryAfterInSeconds","Number","isNaN","parseDateRetryAfterHeader","now","Date","date","parse","diff","undefined","error"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\policies\\throttlingRetryPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport { Constants } from \"../util/constants\";\nimport { DEFAULT_CLIENT_MAX_RETRY_COUNT } from \"../util/throttlingRetryStrategy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport { delay } from \"@azure/core-util\";\n\ntype ResponseHandler = (\n  httpRequest: WebResourceLike,\n  response: HttpOperationResponse\n) => Promise<HttpOperationResponse>;\nconst StatusCodes = Constants.HttpConstants.StatusCodes;\n\n/**\n * Creates a policy that re-sends the request if the response indicates the request failed because of throttling reasons.\n * For example, if the response contains a `Retry-After` header, it will retry sending the request based on the value of that header.\n *\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n * @returns\n */\nexport function throttlingRetryPolicy(): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ThrottlingRetryPolicy(nextPolicy, options);\n    },\n  };\n}\n\nconst StandardAbortMessage = \"The operation was aborted.\";\n\n/**\n * Creates a policy that re-sends the request if the response indicates the request failed because of throttling reasons.\n * For example, if the response contains a `Retry-After` header, it will retry sending the request based on the value of that header.\n *\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\nexport class ThrottlingRetryPolicy extends BaseRequestPolicy {\n  private _handleResponse: ResponseHandler;\n  private numberOfRetries = 0;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    _handleResponse?: ResponseHandler\n  ) {\n    super(nextPolicy, options);\n    this._handleResponse = _handleResponse || this._defaultResponseHandler;\n  }\n\n  public async sendRequest(httpRequest: WebResourceLike): Promise<HttpOperationResponse> {\n    const response = await this._nextPolicy.sendRequest(httpRequest.clone());\n    if (\n      response.status !== StatusCodes.TooManyRequests &&\n      response.status !== StatusCodes.ServiceUnavailable\n    ) {\n      return response;\n    } else {\n      return this._handleResponse(httpRequest, response);\n    }\n  }\n\n  private async _defaultResponseHandler(\n    httpRequest: WebResourceLike,\n    httpResponse: HttpOperationResponse\n  ): Promise<HttpOperationResponse> {\n    const retryAfterHeader: string | undefined = httpResponse.headers.get(\n      Constants.HeaderConstants.RETRY_AFTER\n    );\n\n    if (retryAfterHeader) {\n      const delayInMs: number | undefined =\n        ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);\n      if (delayInMs) {\n        this.numberOfRetries += 1;\n\n        await delay(delayInMs, {\n          abortSignal: httpRequest.abortSignal,\n          abortErrorMsg: StandardAbortMessage,\n        });\n\n        if (httpRequest.abortSignal?.aborted) {\n          throw new AbortError(StandardAbortMessage);\n        }\n\n        if (this.numberOfRetries < DEFAULT_CLIENT_MAX_RETRY_COUNT) {\n          return this.sendRequest(httpRequest);\n        } else {\n          return this._nextPolicy.sendRequest(httpRequest);\n        }\n      }\n    }\n\n    return httpResponse;\n  }\n\n  public static parseRetryAfterHeader(headerValue: string): number | undefined {\n    const retryAfterInSeconds = Number(headerValue);\n    if (Number.isNaN(retryAfterInSeconds)) {\n      return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n    } else {\n      return retryAfterInSeconds * 1000;\n    }\n  }\n\n  public static parseDateRetryAfterHeader(headerValue: string): number | undefined {\n    try {\n      const now: number = Date.now();\n      const date: number = Date.parse(headerValue);\n      const diff = date - now;\n\n      return Number.isNaN(diff) ? undefined : diff;\n    } catch (error: any) {\n      return undefined;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}