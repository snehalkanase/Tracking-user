{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { URLBuilder, URLQuery } from \"../url\";\nimport { isObject } from \"./utils\";\nconst RedactedString = \"REDACTED\";\nconst defaultAllowedHeaderNames = [\"x-ms-client-request-id\", \"x-ms-return-client-request-id\", \"x-ms-useragent\", \"x-ms-correlation-request-id\", \"x-ms-request-id\", \"client-request-id\", \"ms-cv\", \"return-client-request-id\", \"traceparent\", \"Access-Control-Allow-Credentials\", \"Access-Control-Allow-Headers\", \"Access-Control-Allow-Methods\", \"Access-Control-Allow-Origin\", \"Access-Control-Expose-Headers\", \"Access-Control-Max-Age\", \"Access-Control-Request-Headers\", \"Access-Control-Request-Method\", \"Origin\", \"Accept\", \"Accept-Encoding\", \"Cache-Control\", \"Connection\", \"Content-Length\", \"Content-Type\", \"Date\", \"ETag\", \"Expires\", \"If-Match\", \"If-Modified-Since\", \"If-None-Match\", \"If-Unmodified-Since\", \"Last-Modified\", \"Pragma\", \"Request-Id\", \"Retry-After\", \"Server\", \"Transfer-Encoding\", \"User-Agent\", \"WWW-Authenticate\"];\nconst defaultAllowedQueryParameters = [\"api-version\"];\nexport class Sanitizer {\n  constructor() {\n    let {\n      allowedHeaderNames = [],\n      allowedQueryParameters = []\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    allowedHeaderNames = Array.isArray(allowedHeaderNames) ? defaultAllowedHeaderNames.concat(allowedHeaderNames) : defaultAllowedHeaderNames;\n    allowedQueryParameters = Array.isArray(allowedQueryParameters) ? defaultAllowedQueryParameters.concat(allowedQueryParameters) : defaultAllowedQueryParameters;\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map(n => n.toLowerCase()));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map(p => p.toLowerCase()));\n  }\n  sanitize(obj) {\n    const seen = new Set();\n    return JSON.stringify(obj, (key, value) => {\n      // Ensure Errors include their interesting non-enumerable members\n      if (value instanceof Error) {\n        return Object.assign(Object.assign({}, value), {\n          name: value.name,\n          message: value.message\n        });\n      }\n      if (key === \"_headersMap\") {\n        return this.sanitizeHeaders(value);\n      } else if (key === \"url\") {\n        return this.sanitizeUrl(value);\n      } else if (key === \"query\") {\n        return this.sanitizeQuery(value);\n      } else if (key === \"body\") {\n        // Don't log the request body\n        return undefined;\n      } else if (key === \"response\") {\n        // Don't log response again\n        return undefined;\n      } else if (key === \"operationSpec\") {\n        // When using sendOperationRequest, the request carries a massive\n        // field with the autorest spec. No need to log it.\n        return undefined;\n      } else if (Array.isArray(value) || isObject(value)) {\n        if (seen.has(value)) {\n          return \"[Circular]\";\n        }\n        seen.add(value);\n      }\n      return value;\n    }, 2);\n  }\n  sanitizeHeaders(value) {\n    return this.sanitizeObject(value, this.allowedHeaderNames, (v, k) => v[k].value);\n  }\n  sanitizeQuery(value) {\n    return this.sanitizeObject(value, this.allowedQueryParameters, (v, k) => v[k]);\n  }\n  sanitizeObject(value, allowedKeys, accessor) {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n    const sanitized = {};\n    for (const k of Object.keys(value)) {\n      if (allowedKeys.has(k.toLowerCase())) {\n        sanitized[k] = accessor(value, k);\n      } else {\n        sanitized[k] = RedactedString;\n      }\n    }\n    return sanitized;\n  }\n  sanitizeUrl(value) {\n    if (typeof value !== \"string\" || value === null) {\n      return value;\n    }\n    const urlBuilder = URLBuilder.parse(value);\n    const queryString = urlBuilder.getQuery();\n    if (!queryString) {\n      return value;\n    }\n    const query = URLQuery.parse(queryString);\n    for (const k of query.keys()) {\n      if (!this.allowedQueryParameters.has(k.toLowerCase())) {\n        query.set(k, RedactedString);\n      }\n    }\n    urlBuilder.setQuery(query.toString());\n    return urlBuilder.toString();\n  }\n}","map":{"version":3,"names":["URLBuilder","URLQuery","isObject","RedactedString","defaultAllowedHeaderNames","defaultAllowedQueryParameters","Sanitizer","constructor","allowedHeaderNames","allowedQueryParameters","arguments","length","undefined","Array","isArray","concat","Set","map","n","toLowerCase","p","sanitize","obj","seen","JSON","stringify","key","value","Error","Object","assign","name","message","sanitizeHeaders","sanitizeUrl","sanitizeQuery","has","add","sanitizeObject","v","k","allowedKeys","accessor","sanitized","keys","urlBuilder","parse","queryString","getQuery","query","set","setQuery","toString"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\util\\sanitizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { URLBuilder, URLQuery } from \"../url\";\nimport { UnknownObject, isObject } from \"./utils\";\n\nexport interface SanitizerOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  allowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  allowedQueryParameters?: string[];\n}\n\nconst RedactedString = \"REDACTED\";\n\nconst defaultAllowedHeaderNames = [\n  \"x-ms-client-request-id\",\n  \"x-ms-return-client-request-id\",\n  \"x-ms-useragent\",\n  \"x-ms-correlation-request-id\",\n  \"x-ms-request-id\",\n  \"client-request-id\",\n  \"ms-cv\",\n  \"return-client-request-id\",\n  \"traceparent\",\n\n  \"Access-Control-Allow-Credentials\",\n  \"Access-Control-Allow-Headers\",\n  \"Access-Control-Allow-Methods\",\n  \"Access-Control-Allow-Origin\",\n  \"Access-Control-Expose-Headers\",\n  \"Access-Control-Max-Age\",\n  \"Access-Control-Request-Headers\",\n  \"Access-Control-Request-Method\",\n  \"Origin\",\n\n  \"Accept\",\n  \"Accept-Encoding\",\n  \"Cache-Control\",\n  \"Connection\",\n  \"Content-Length\",\n  \"Content-Type\",\n  \"Date\",\n  \"ETag\",\n  \"Expires\",\n  \"If-Match\",\n  \"If-Modified-Since\",\n  \"If-None-Match\",\n  \"If-Unmodified-Since\",\n  \"Last-Modified\",\n  \"Pragma\",\n  \"Request-Id\",\n  \"Retry-After\",\n  \"Server\",\n  \"Transfer-Encoding\",\n  \"User-Agent\",\n  \"WWW-Authenticate\",\n];\n\nconst defaultAllowedQueryParameters: string[] = [\"api-version\"];\n\nexport class Sanitizer {\n  public allowedHeaderNames: Set<string>;\n  public allowedQueryParameters: Set<string>;\n\n  constructor({ allowedHeaderNames = [], allowedQueryParameters = [] }: SanitizerOptions = {}) {\n    allowedHeaderNames = Array.isArray(allowedHeaderNames)\n      ? defaultAllowedHeaderNames.concat(allowedHeaderNames)\n      : defaultAllowedHeaderNames;\n\n    allowedQueryParameters = Array.isArray(allowedQueryParameters)\n      ? defaultAllowedQueryParameters.concat(allowedQueryParameters)\n      : defaultAllowedQueryParameters;\n\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n  }\n\n  public sanitize(obj: unknown): string {\n    const seen = new Set<unknown>();\n    return JSON.stringify(\n      obj,\n      (key: string, value: unknown) => {\n        // Ensure Errors include their interesting non-enumerable members\n        if (value instanceof Error) {\n          return {\n            ...value,\n            name: value.name,\n            message: value.message,\n          };\n        }\n\n        if (key === \"_headersMap\") {\n          return this.sanitizeHeaders(value as UnknownObject);\n        } else if (key === \"url\") {\n          return this.sanitizeUrl(value as string);\n        } else if (key === \"query\") {\n          return this.sanitizeQuery(value as UnknownObject);\n        } else if (key === \"body\") {\n          // Don't log the request body\n          return undefined;\n        } else if (key === \"response\") {\n          // Don't log response again\n          return undefined;\n        } else if (key === \"operationSpec\") {\n          // When using sendOperationRequest, the request carries a massive\n          // field with the autorest spec. No need to log it.\n          return undefined;\n        } else if (Array.isArray(value) || isObject(value)) {\n          if (seen.has(value)) {\n            return \"[Circular]\";\n          }\n          seen.add(value);\n        }\n\n        return value;\n      },\n      2\n    );\n  }\n\n  private sanitizeHeaders(value: UnknownObject): UnknownObject {\n    return this.sanitizeObject(value, this.allowedHeaderNames, (v, k) => v[k].value);\n  }\n\n  private sanitizeQuery(value: UnknownObject): UnknownObject {\n    return this.sanitizeObject(value, this.allowedQueryParameters, (v, k) => v[k]);\n  }\n\n  private sanitizeObject(\n    value: UnknownObject,\n    allowedKeys: Set<string>,\n    accessor: (value: any, key: string) => any\n  ): UnknownObject {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    const sanitized: UnknownObject = {};\n\n    for (const k of Object.keys(value)) {\n      if (allowedKeys.has(k.toLowerCase())) {\n        sanitized[k] = accessor(value, k);\n      } else {\n        sanitized[k] = RedactedString;\n      }\n    }\n\n    return sanitized;\n  }\n\n  private sanitizeUrl(value: string): string {\n    if (typeof value !== \"string\" || value === null) {\n      return value;\n    }\n\n    const urlBuilder = URLBuilder.parse(value);\n    const queryString = urlBuilder.getQuery();\n\n    if (!queryString) {\n      return value;\n    }\n\n    const query = URLQuery.parse(queryString);\n    for (const k of query.keys()) {\n      if (!this.allowedQueryParameters.has(k.toLowerCase())) {\n        query.set(k, RedactedString);\n      }\n    }\n\n    urlBuilder.setQuery(query.toString());\n    return urlBuilder.toString();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}