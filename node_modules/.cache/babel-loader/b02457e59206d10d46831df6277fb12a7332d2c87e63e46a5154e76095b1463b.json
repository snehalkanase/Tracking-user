{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from \"tslib\";\n/**\n * returns an async iterator that iterates over results. It also has a `byPage`\n * method that returns pages of items at once.\n *\n * @param pagedResult - an object that specifies how to get pages.\n * @returns a paged async iterator that iterates over results.\n */\nexport function getPagedAsyncIterator(pagedResult) {\n  var _a;\n  const iter = getItemAsyncIterator(pagedResult);\n  return {\n    next() {\n      return iter.next();\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n    byPage: (_a = pagedResult === null || pagedResult === void 0 ? void 0 : pagedResult.byPage) !== null && _a !== void 0 ? _a : settings => {\n      const {\n        continuationToken,\n        maxPageSize\n      } = settings !== null && settings !== void 0 ? settings : {};\n      return getPageAsyncIterator(pagedResult, {\n        pageLink: continuationToken,\n        maxPageSize\n      });\n    }\n  };\n}\nfunction getItemAsyncIterator(pagedResult) {\n  return __asyncGenerator(this, arguments, function* getItemAsyncIterator_1() {\n    var e_1, _a, e_2, _b;\n    const pages = getPageAsyncIterator(pagedResult);\n    const firstVal = yield __await(pages.next());\n    // if the result does not have an array shape, i.e. TPage = TElement, then we return it as is\n    if (!Array.isArray(firstVal.value)) {\n      // can extract elements from this page\n      const {\n        toElements\n      } = pagedResult;\n      if (toElements) {\n        yield __await(yield* __asyncDelegator(__asyncValues(toElements(firstVal.value))));\n        try {\n          for (var pages_1 = __asyncValues(pages), pages_1_1; pages_1_1 = yield __await(pages_1.next()), !pages_1_1.done;) {\n            const page = pages_1_1.value;\n            yield __await(yield* __asyncDelegator(__asyncValues(toElements(page))));\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (pages_1_1 && !pages_1_1.done && (_a = pages_1.return)) yield __await(_a.call(pages_1));\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      } else {\n        yield yield __await(firstVal.value);\n        // `pages` is of type `AsyncIterableIterator<TPage>` but TPage = TElement in this case\n        yield __await(yield* __asyncDelegator(__asyncValues(pages)));\n      }\n    } else {\n      yield __await(yield* __asyncDelegator(__asyncValues(firstVal.value)));\n      try {\n        for (var pages_2 = __asyncValues(pages), pages_2_1; pages_2_1 = yield __await(pages_2.next()), !pages_2_1.done;) {\n          const page = pages_2_1.value;\n          // pages is of type `AsyncIterableIterator<TPage>` so `page` is of type `TPage`. In this branch,\n          // it must be the case that `TPage = TElement[]`\n          yield __await(yield* __asyncDelegator(__asyncValues(page)));\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (pages_2_1 && !pages_2_1.done && (_b = pages_2.return)) yield __await(_b.call(pages_2));\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n  });\n}\nfunction getPageAsyncIterator(pagedResult) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return __asyncGenerator(this, arguments, function* getPageAsyncIterator_1() {\n    const {\n      pageLink,\n      maxPageSize\n    } = options;\n    let response = yield __await(pagedResult.getPage(pageLink !== null && pageLink !== void 0 ? pageLink : pagedResult.firstPageLink, maxPageSize));\n    if (!response) {\n      return yield __await(void 0);\n    }\n    yield yield __await(response.page);\n    while (response.nextPageLink) {\n      response = yield __await(pagedResult.getPage(response.nextPageLink, maxPageSize));\n      if (!response) {\n        return yield __await(void 0);\n      }\n      yield yield __await(response.page);\n    }\n  });\n}","map":{"version":3,"names":["getPagedAsyncIterator","pagedResult","iter","getItemAsyncIterator","next","Symbol","asyncIterator","byPage","_a","settings","continuationToken","maxPageSize","getPageAsyncIterator","pageLink","pages","firstVal","__await","Array","isArray","value","toElements","__asyncDelegator","__asyncValues","pages_1","pages_1_1","done","page","pages_2","pages_2_1","options","arguments","length","undefined","response","getPage","firstPageLink","nextPageLink"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-paging\\src\\getPagedAsyncIterator.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PageSettings, PagedAsyncIterableIterator, PagedResult } from \"./models\";\n\n/**\n * returns an async iterator that iterates over results. It also has a `byPage`\n * method that returns pages of items at once.\n *\n * @param pagedResult - an object that specifies how to get pages.\n * @returns a paged async iterator that iterates over results.\n */\n\nexport function getPagedAsyncIterator<\n  TElement,\n  TPage = TElement[],\n  TPageSettings = PageSettings,\n  TLink = string\n>(\n  pagedResult: PagedResult<TPage, TPageSettings, TLink>\n): PagedAsyncIterableIterator<TElement, TPage, TPageSettings> {\n  const iter = getItemAsyncIterator<TElement, TPage, TLink, TPageSettings>(pagedResult);\n  return {\n    next() {\n      return iter.next();\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n    byPage:\n      pagedResult?.byPage ??\n      (((settings?: PageSettings) => {\n        const { continuationToken, maxPageSize } = settings ?? {};\n        return getPageAsyncIterator(pagedResult, {\n          pageLink: continuationToken as unknown as TLink | undefined,\n          maxPageSize,\n        });\n      }) as unknown as (settings?: TPageSettings) => AsyncIterableIterator<TPage>),\n  };\n}\n\nasync function* getItemAsyncIterator<TElement, TPage, TLink, TPageSettings>(\n  pagedResult: PagedResult<TPage, TPageSettings, TLink>\n): AsyncIterableIterator<TElement> {\n  const pages = getPageAsyncIterator(pagedResult);\n  const firstVal = await pages.next();\n  // if the result does not have an array shape, i.e. TPage = TElement, then we return it as is\n  if (!Array.isArray(firstVal.value)) {\n    // can extract elements from this page\n    const { toElements } = pagedResult;\n    if (toElements) {\n      yield* toElements(firstVal.value) as TElement[];\n      for await (const page of pages) {\n        yield* toElements(page) as TElement[];\n      }\n    } else {\n      yield firstVal.value;\n      // `pages` is of type `AsyncIterableIterator<TPage>` but TPage = TElement in this case\n      yield* pages as unknown as AsyncIterableIterator<TElement>;\n    }\n  } else {\n    yield* firstVal.value;\n    for await (const page of pages) {\n      // pages is of type `AsyncIterableIterator<TPage>` so `page` is of type `TPage`. In this branch,\n      // it must be the case that `TPage = TElement[]`\n      yield* page as unknown as TElement[];\n    }\n  }\n}\n\nasync function* getPageAsyncIterator<TPage, TLink, TPageSettings>(\n  pagedResult: PagedResult<TPage, TPageSettings, TLink>,\n  options: {\n    maxPageSize?: number;\n    pageLink?: TLink;\n  } = {}\n): AsyncIterableIterator<TPage> {\n  const { pageLink, maxPageSize } = options;\n  let response = await pagedResult.getPage(pageLink ?? pagedResult.firstPageLink, maxPageSize);\n  if (!response) {\n    return;\n  }\n  yield response.page;\n  while (response.nextPageLink) {\n    response = await pagedResult.getPage(response.nextPageLink, maxPageSize);\n    if (!response) {\n      return;\n    }\n    yield response.page;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}