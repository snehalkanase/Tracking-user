{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { DEFAULT_CLIENT_MAX_RETRY_INTERVAL, DEFAULT_CLIENT_MIN_RETRY_INTERVAL, DEFAULT_CLIENT_RETRY_COUNT, DEFAULT_CLIENT_RETRY_INTERVAL, isNumber, shouldRetry, updateRetryData } from \"../util/exponentialBackoffStrategy\";\nimport { delay } from \"@azure/core-util\";\n/**\n * A policy that retries when there's a system error, identified by the codes \"ETIMEDOUT\", \"ESOCKETTIMEDOUT\", \"ECONNREFUSED\", \"ECONNRESET\" or \"ENOENT\".\n * @param retryCount - Maximum number of retries.\n * @param retryInterval - The client retry interval, in milliseconds.\n * @param minRetryInterval - The minimum retry interval, in milliseconds.\n * @param maxRetryInterval - The maximum retry interval, in milliseconds.\n * @returns An instance of the {@link SystemErrorRetryPolicy}\n */\nexport function systemErrorRetryPolicy(retryCount, retryInterval, minRetryInterval, maxRetryInterval) {\n  return {\n    create: (nextPolicy, options) => {\n      return new SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);\n    }\n  };\n}\n/**\n * A policy that retries when there's a system error, identified by the codes \"ETIMEDOUT\", \"ESOCKETTIMEDOUT\", \"ECONNREFUSED\", \"ECONNRESET\" or \"ENOENT\".\n * @param retryCount - The client retry count.\n * @param retryInterval - The client retry interval, in milliseconds.\n * @param minRetryInterval - The minimum retry interval, in milliseconds.\n * @param maxRetryInterval - The maximum retry interval, in milliseconds.\n */\nexport class SystemErrorRetryPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval) {\n    super(nextPolicy, options);\n    this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.minRetryInterval = isNumber(minRetryInterval) ? minRetryInterval : DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    this.maxRetryInterval = isNumber(maxRetryInterval) ? maxRetryInterval : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n  sendRequest(request) {\n    return this._nextPolicy.sendRequest(request.clone()).catch(error => retry(this, request, error.response, error));\n  }\n}\nasync function retry(policy, request, operationResponse, err, retryData) {\n  retryData = updateRetryData(policy, retryData, err);\n  function shouldPolicyRetry(_response, error) {\n    if (error && error.code && (error.code === \"ETIMEDOUT\" || error.code === \"ESOCKETTIMEDOUT\" || error.code === \"ECONNREFUSED\" || error.code === \"ECONNRESET\" || error.code === \"ENOENT\")) {\n      return true;\n    }\n    return false;\n  }\n  if (shouldRetry(policy.retryCount, shouldPolicyRetry, retryData, operationResponse, err)) {\n    // If previous operation ended with an error and the policy allows a retry, do that\n    try {\n      await delay(retryData.retryInterval);\n      return policy._nextPolicy.sendRequest(request.clone());\n    } catch (nestedErr) {\n      return retry(policy, request, operationResponse, nestedErr, retryData);\n    }\n  } else {\n    if (err) {\n      // If the operation failed in the end, return all errors instead of just the last one\n      return Promise.reject(retryData.error);\n    }\n    return operationResponse;\n  }\n}","map":{"version":3,"names":["BaseRequestPolicy","DEFAULT_CLIENT_MAX_RETRY_INTERVAL","DEFAULT_CLIENT_MIN_RETRY_INTERVAL","DEFAULT_CLIENT_RETRY_COUNT","DEFAULT_CLIENT_RETRY_INTERVAL","isNumber","shouldRetry","updateRetryData","delay","systemErrorRetryPolicy","retryCount","retryInterval","minRetryInterval","maxRetryInterval","create","nextPolicy","options","SystemErrorRetryPolicy","constructor","sendRequest","request","_nextPolicy","clone","catch","error","retry","response","policy","operationResponse","err","retryData","shouldPolicyRetry","_response","code","nestedErr","Promise","reject"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\policies\\systemErrorRetryPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport {\n  DEFAULT_CLIENT_MAX_RETRY_INTERVAL,\n  DEFAULT_CLIENT_MIN_RETRY_INTERVAL,\n  DEFAULT_CLIENT_RETRY_COUNT,\n  DEFAULT_CLIENT_RETRY_INTERVAL,\n  RetryData,\n  RetryError,\n  isNumber,\n  shouldRetry,\n  updateRetryData,\n} from \"../util/exponentialBackoffStrategy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport { delay } from \"@azure/core-util\";\n\n/**\n * A policy that retries when there's a system error, identified by the codes \"ETIMEDOUT\", \"ESOCKETTIMEDOUT\", \"ECONNREFUSED\", \"ECONNRESET\" or \"ENOENT\".\n * @param retryCount - Maximum number of retries.\n * @param retryInterval - The client retry interval, in milliseconds.\n * @param minRetryInterval - The minimum retry interval, in milliseconds.\n * @param maxRetryInterval - The maximum retry interval, in milliseconds.\n * @returns An instance of the {@link SystemErrorRetryPolicy}\n */\nexport function systemErrorRetryPolicy(\n  retryCount?: number,\n  retryInterval?: number,\n  minRetryInterval?: number,\n  maxRetryInterval?: number\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new SystemErrorRetryPolicy(\n        nextPolicy,\n        options,\n        retryCount,\n        retryInterval,\n        minRetryInterval,\n        maxRetryInterval\n      );\n    },\n  };\n}\n\n/**\n * A policy that retries when there's a system error, identified by the codes \"ETIMEDOUT\", \"ESOCKETTIMEDOUT\", \"ECONNREFUSED\", \"ECONNRESET\" or \"ENOENT\".\n * @param retryCount - The client retry count.\n * @param retryInterval - The client retry interval, in milliseconds.\n * @param minRetryInterval - The minimum retry interval, in milliseconds.\n * @param maxRetryInterval - The maximum retry interval, in milliseconds.\n */\nexport class SystemErrorRetryPolicy extends BaseRequestPolicy {\n  retryCount: number;\n  retryInterval: number;\n  minRetryInterval: number;\n  maxRetryInterval: number;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryCount?: number,\n    retryInterval?: number,\n    minRetryInterval?: number,\n    maxRetryInterval?: number\n  ) {\n    super(nextPolicy, options);\n    this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.minRetryInterval = isNumber(minRetryInterval)\n      ? minRetryInterval\n      : DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    this.maxRetryInterval = isNumber(maxRetryInterval)\n      ? maxRetryInterval\n      : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .catch((error) => retry(this, request, error.response, error));\n  }\n}\n\nasync function retry(\n  policy: SystemErrorRetryPolicy,\n  request: WebResourceLike,\n  operationResponse: HttpOperationResponse,\n  err?: RetryError,\n  retryData?: RetryData\n): Promise<HttpOperationResponse> {\n  retryData = updateRetryData(policy, retryData, err);\n\n  function shouldPolicyRetry(_response?: HttpOperationResponse, error?: RetryError): boolean {\n    if (\n      error &&\n      error.code &&\n      (error.code === \"ETIMEDOUT\" ||\n        error.code === \"ESOCKETTIMEDOUT\" ||\n        error.code === \"ECONNREFUSED\" ||\n        error.code === \"ECONNRESET\" ||\n        error.code === \"ENOENT\")\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  if (shouldRetry(policy.retryCount, shouldPolicyRetry, retryData, operationResponse, err)) {\n    // If previous operation ended with an error and the policy allows a retry, do that\n    try {\n      await delay(retryData.retryInterval);\n      return policy._nextPolicy.sendRequest(request.clone());\n    } catch (nestedErr: any) {\n      return retry(policy, request, operationResponse, nestedErr, retryData);\n    }\n  } else {\n    if (err) {\n      // If the operation failed in the end, return all errors instead of just the last one\n      return Promise.reject(retryData.error);\n    }\n    return operationResponse;\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA,SACEA,iBAAiB,QAIZ,iBAAiB;AACxB,SACEC,iCAAiC,EACjCC,iCAAiC,EACjCC,0BAA0B,EAC1BC,6BAA6B,EAG7BC,QAAQ,EACRC,WAAW,EACXC,eAAe,QACV,oCAAoC;AAG3C,SAASC,KAAK,QAAQ,kBAAkB;AAExC;;;;;;;;AAQA,OAAM,SAAUC,sBAAsBA,CACpCC,UAAmB,EACnBC,aAAsB,EACtBC,gBAAyB,EACzBC,gBAAyB;EAEzB,OAAO;IACLC,MAAM,EAAEA,CAACC,UAAyB,EAAEC,OAA6B,KAAI;MACnE,OAAO,IAAIC,sBAAsB,CAC/BF,UAAU,EACVC,OAAO,EACPN,UAAU,EACVC,aAAa,EACbC,gBAAgB,EAChBC,gBAAgB,CACjB;IACH;GACD;AACH;AAEA;;;;;;;AAOA,OAAM,MAAOI,sBAAuB,SAAQjB,iBAAiB;EAM3DkB,YACEH,UAAyB,EACzBC,OAA6B,EAC7BN,UAAmB,EACnBC,aAAsB,EACtBC,gBAAyB,EACzBC,gBAAyB;IAEzB,KAAK,CAACE,UAAU,EAAEC,OAAO,CAAC;IAC1B,IAAI,CAACN,UAAU,GAAGL,QAAQ,CAACK,UAAU,CAAC,GAAGA,UAAU,GAAGP,0BAA0B;IAChF,IAAI,CAACQ,aAAa,GAAGN,QAAQ,CAACM,aAAa,CAAC,GAAGA,aAAa,GAAGP,6BAA6B;IAC5F,IAAI,CAACQ,gBAAgB,GAAGP,QAAQ,CAACO,gBAAgB,CAAC,GAC9CA,gBAAgB,GAChBV,iCAAiC;IACrC,IAAI,CAACW,gBAAgB,GAAGR,QAAQ,CAACQ,gBAAgB,CAAC,GAC9CA,gBAAgB,GAChBZ,iCAAiC;EACvC;EAEOkB,WAAWA,CAACC,OAAwB;IACzC,OAAO,IAAI,CAACC,WAAW,CACpBF,WAAW,CAACC,OAAO,CAACE,KAAK,EAAE,CAAC,CAC5BC,KAAK,CAAEC,KAAK,IAAKC,KAAK,CAAC,IAAI,EAAEL,OAAO,EAAEI,KAAK,CAACE,QAAQ,EAAEF,KAAK,CAAC,CAAC;EAClE;;AAGF,eAAeC,KAAKA,CAClBE,MAA8B,EAC9BP,OAAwB,EACxBQ,iBAAwC,EACxCC,GAAgB,EAChBC,SAAqB;EAErBA,SAAS,GAAGvB,eAAe,CAACoB,MAAM,EAAEG,SAAS,EAAED,GAAG,CAAC;EAEnD,SAASE,iBAAiBA,CAACC,SAAiC,EAAER,KAAkB;IAC9E,IACEA,KAAK,IACLA,KAAK,CAACS,IAAI,KACTT,KAAK,CAACS,IAAI,KAAK,WAAW,IACzBT,KAAK,CAACS,IAAI,KAAK,iBAAiB,IAChCT,KAAK,CAACS,IAAI,KAAK,cAAc,IAC7BT,KAAK,CAACS,IAAI,KAAK,YAAY,IAC3BT,KAAK,CAACS,IAAI,KAAK,QAAQ,CAAC,EAC1B;MACA,OAAO,IAAI;;IAEb,OAAO,KAAK;EACd;EAEA,IAAI3B,WAAW,CAACqB,MAAM,CAACjB,UAAU,EAAEqB,iBAAiB,EAAED,SAAS,EAAEF,iBAAiB,EAAEC,GAAG,CAAC,EAAE;IACxF;IACA,IAAI;MACF,MAAMrB,KAAK,CAACsB,SAAS,CAACnB,aAAa,CAAC;MACpC,OAAOgB,MAAM,CAACN,WAAW,CAACF,WAAW,CAACC,OAAO,CAACE,KAAK,EAAE,CAAC;KACvD,CAAC,OAAOY,SAAc,EAAE;MACvB,OAAOT,KAAK,CAACE,MAAM,EAAEP,OAAO,EAAEQ,iBAAiB,EAAEM,SAAS,EAAEJ,SAAS,CAAC;;GAEzE,MAAM;IACL,IAAID,GAAG,EAAE;MACP;MACA,OAAOM,OAAO,CAACC,MAAM,CAACN,SAAS,CAACN,KAAK,CAAC;;IAExC,OAAOI,iBAAiB;;AAE5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}