{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant permissions for that operation. Once all the\n * values are set, this should be serialized with toString and set as the permissions field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class AccountSASPermissions {\n  constructor() {\n    /**\n     * Permission to read resources and list queues and tables granted.\n     */\n    this.read = false;\n    /**\n     * Permission to write resources granted.\n     */\n    this.write = false;\n    /**\n     * Permission to create blobs and files granted.\n     */\n    this.delete = false;\n    /**\n     * Permission to delete versions granted.\n     */\n    this.deleteVersion = false;\n    /**\n     * Permission to list blob containers, blobs, shares, directories, and files granted.\n     */\n    this.list = false;\n    /**\n     * Permission to add messages, table entities, and append to blobs granted.\n     */\n    this.add = false;\n    /**\n     * Permission to create blobs and files granted.\n     */\n    this.create = false;\n    /**\n     * Permissions to update messages and table entities granted.\n     */\n    this.update = false;\n    /**\n     * Permission to get and delete messages granted.\n     */\n    this.process = false;\n    /**\n     * Specfies Tag access granted.\n     */\n    this.tag = false;\n    /**\n     * Permission to filter blobs.\n     */\n    this.filter = false;\n    /**\n     * Permission to set immutability policy.\n     */\n    this.setImmutabilityPolicy = false;\n    /**\n     * Specifies that Permanent Delete is permitted.\n     */\n    this.permanentDelete = false;\n  }\n  /**\n   * Parse initializes the AccountSASPermissions fields from a string.\n   *\n   * @param permissions -\n   */\n  static parse(permissions) {\n    const accountSASPermissions = new AccountSASPermissions();\n    for (const c of permissions) {\n      switch (c) {\n        case \"r\":\n          accountSASPermissions.read = true;\n          break;\n        case \"w\":\n          accountSASPermissions.write = true;\n          break;\n        case \"d\":\n          accountSASPermissions.delete = true;\n          break;\n        case \"x\":\n          accountSASPermissions.deleteVersion = true;\n          break;\n        case \"l\":\n          accountSASPermissions.list = true;\n          break;\n        case \"a\":\n          accountSASPermissions.add = true;\n          break;\n        case \"c\":\n          accountSASPermissions.create = true;\n          break;\n        case \"u\":\n          accountSASPermissions.update = true;\n          break;\n        case \"p\":\n          accountSASPermissions.process = true;\n          break;\n        case \"t\":\n          accountSASPermissions.tag = true;\n          break;\n        case \"f\":\n          accountSASPermissions.filter = true;\n          break;\n        case \"i\":\n          accountSASPermissions.setImmutabilityPolicy = true;\n          break;\n        case \"y\":\n          accountSASPermissions.permanentDelete = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission character: ${c}`);\n      }\n    }\n    return accountSASPermissions;\n  }\n  /**\n   * Creates a {@link AccountSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n  static from(permissionLike) {\n    const accountSASPermissions = new AccountSASPermissions();\n    if (permissionLike.read) {\n      accountSASPermissions.read = true;\n    }\n    if (permissionLike.write) {\n      accountSASPermissions.write = true;\n    }\n    if (permissionLike.delete) {\n      accountSASPermissions.delete = true;\n    }\n    if (permissionLike.deleteVersion) {\n      accountSASPermissions.deleteVersion = true;\n    }\n    if (permissionLike.filter) {\n      accountSASPermissions.filter = true;\n    }\n    if (permissionLike.tag) {\n      accountSASPermissions.tag = true;\n    }\n    if (permissionLike.list) {\n      accountSASPermissions.list = true;\n    }\n    if (permissionLike.add) {\n      accountSASPermissions.add = true;\n    }\n    if (permissionLike.create) {\n      accountSASPermissions.create = true;\n    }\n    if (permissionLike.update) {\n      accountSASPermissions.update = true;\n    }\n    if (permissionLike.process) {\n      accountSASPermissions.process = true;\n    }\n    if (permissionLike.setImmutabilityPolicy) {\n      accountSASPermissions.setImmutabilityPolicy = true;\n    }\n    if (permissionLike.permanentDelete) {\n      accountSASPermissions.permanentDelete = true;\n    }\n    return accountSASPermissions;\n  }\n  /**\n   * Produces the SAS permissions string for an Azure Storage account.\n   * Call this method to set AccountSASSignatureValues Permissions field.\n   *\n   * Using this method will guarantee the resource types are in\n   * an order accepted by the service.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n   *\n   */\n  toString() {\n    // The order of the characters should be as specified here to ensure correctness:\n    // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n    // Use a string array instead of string concatenating += operator for performance\n    const permissions = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n    if (this.filter) {\n      permissions.push(\"f\");\n    }\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n    if (this.list) {\n      permissions.push(\"l\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.update) {\n      permissions.push(\"u\");\n    }\n    if (this.process) {\n      permissions.push(\"p\");\n    }\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n    return permissions.join(\"\");\n  }\n}","map":{"version":3,"names":["AccountSASPermissions","constructor","read","write","delete","deleteVersion","list","add","create","update","process","tag","filter","setImmutabilityPolicy","permanentDelete","parse","permissions","accountSASPermissions","c","RangeError","from","permissionLike","toString","push","join"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\sas\\AccountSASPermissions.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant permissions for that operation. Once all the\n * values are set, this should be serialized with toString and set as the permissions field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class AccountSASPermissions {\n  /**\n   * Parse initializes the AccountSASPermissions fields from a string.\n   *\n   * @param permissions -\n   */\n  public static parse(permissions: string): AccountSASPermissions {\n    const accountSASPermissions = new AccountSASPermissions();\n\n    for (const c of permissions) {\n      switch (c) {\n        case \"r\":\n          accountSASPermissions.read = true;\n          break;\n        case \"w\":\n          accountSASPermissions.write = true;\n          break;\n        case \"d\":\n          accountSASPermissions.delete = true;\n          break;\n        case \"x\":\n          accountSASPermissions.deleteVersion = true;\n          break;\n        case \"l\":\n          accountSASPermissions.list = true;\n          break;\n        case \"a\":\n          accountSASPermissions.add = true;\n          break;\n        case \"c\":\n          accountSASPermissions.create = true;\n          break;\n        case \"u\":\n          accountSASPermissions.update = true;\n          break;\n        case \"p\":\n          accountSASPermissions.process = true;\n          break;\n        case \"t\":\n          accountSASPermissions.tag = true;\n          break;\n        case \"f\":\n          accountSASPermissions.filter = true;\n          break;\n        case \"i\":\n          accountSASPermissions.setImmutabilityPolicy = true;\n          break;\n        case \"y\":\n          accountSASPermissions.permanentDelete = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission character: ${c}`);\n      }\n    }\n\n    return accountSASPermissions;\n  }\n\n  /**\n   * Creates a {@link AccountSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n  public static from(permissionLike: AccountSASPermissionsLike): AccountSASPermissions {\n    const accountSASPermissions = new AccountSASPermissions();\n    if (permissionLike.read) {\n      accountSASPermissions.read = true;\n    }\n    if (permissionLike.write) {\n      accountSASPermissions.write = true;\n    }\n    if (permissionLike.delete) {\n      accountSASPermissions.delete = true;\n    }\n    if (permissionLike.deleteVersion) {\n      accountSASPermissions.deleteVersion = true;\n    }\n    if (permissionLike.filter) {\n      accountSASPermissions.filter = true;\n    }\n    if (permissionLike.tag) {\n      accountSASPermissions.tag = true;\n    }\n    if (permissionLike.list) {\n      accountSASPermissions.list = true;\n    }\n    if (permissionLike.add) {\n      accountSASPermissions.add = true;\n    }\n    if (permissionLike.create) {\n      accountSASPermissions.create = true;\n    }\n    if (permissionLike.update) {\n      accountSASPermissions.update = true;\n    }\n    if (permissionLike.process) {\n      accountSASPermissions.process = true;\n    }\n    if (permissionLike.setImmutabilityPolicy) {\n      accountSASPermissions.setImmutabilityPolicy = true;\n    }\n    if (permissionLike.permanentDelete) {\n      accountSASPermissions.permanentDelete = true;\n    }\n    return accountSASPermissions;\n  }\n\n  /**\n   * Permission to read resources and list queues and tables granted.\n   */\n  public read: boolean = false;\n\n  /**\n   * Permission to write resources granted.\n   */\n  public write: boolean = false;\n\n  /**\n   * Permission to create blobs and files granted.\n   */\n  public delete: boolean = false;\n\n  /**\n   * Permission to delete versions granted.\n   */\n  public deleteVersion: boolean = false;\n\n  /**\n   * Permission to list blob containers, blobs, shares, directories, and files granted.\n   */\n  public list: boolean = false;\n\n  /**\n   * Permission to add messages, table entities, and append to blobs granted.\n   */\n  public add: boolean = false;\n\n  /**\n   * Permission to create blobs and files granted.\n   */\n  public create: boolean = false;\n\n  /**\n   * Permissions to update messages and table entities granted.\n   */\n  public update: boolean = false;\n\n  /**\n   * Permission to get and delete messages granted.\n   */\n  public process: boolean = false;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  public tag: boolean = false;\n\n  /**\n   * Permission to filter blobs.\n   */\n  public filter: boolean = false;\n\n  /**\n   * Permission to set immutability policy.\n   */\n  public setImmutabilityPolicy: boolean = false;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  public permanentDelete: boolean = false;\n\n  /**\n   * Produces the SAS permissions string for an Azure Storage account.\n   * Call this method to set AccountSASSignatureValues Permissions field.\n   *\n   * Using this method will guarantee the resource types are in\n   * an order accepted by the service.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n   *\n   */\n  public toString(): string {\n    // The order of the characters should be as specified here to ensure correctness:\n    // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n    // Use a string array instead of string concatenating += operator for performance\n    const permissions: string[] = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n    if (this.filter) {\n      permissions.push(\"f\");\n    }\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n    if (this.list) {\n      permissions.push(\"l\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.update) {\n      permissions.push(\"u\");\n    }\n    if (this.process) {\n      permissions.push(\"p\");\n    }\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n    return permissions.join(\"\");\n  }\n}\n\n/**\n * A type that looks like an account SAS permission.\n * Used in {@link AccountSASPermissions} to parse SAS permissions from raw objects.\n */\nexport interface AccountSASPermissionsLike {\n  /**\n   * Permission to read resources and list queues and tables granted.\n   */\n  read?: boolean;\n\n  /**\n   * Permission to write resources granted.\n   */\n  write?: boolean;\n\n  /**\n   * Permission to delete blobs and files granted.\n   */\n  delete?: boolean;\n\n  /**\n   * Permission to delete versions granted.\n   */\n  deleteVersion?: boolean;\n\n  /**\n   * Permission to list blob containers, blobs, shares, directories, and files granted.\n   */\n  list?: boolean;\n\n  /**\n   * Permission to add messages, table entities, and append to blobs granted.\n   */\n  add?: boolean;\n\n  /**\n   * Permission to create blobs and files granted.\n   */\n  create?: boolean;\n\n  /**\n   * Permissions to update messages and table entities granted.\n   */\n  update?: boolean;\n\n  /**\n   * Permission to get and delete messages granted.\n   */\n  process?: boolean;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  tag?: boolean;\n\n  /**\n   * Permission to filter blobs.\n   */\n  filter?: boolean;\n\n  /**\n   * Permission to set immutability policy.\n   */\n  setImmutabilityPolicy?: boolean;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  permanentDelete?: boolean;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}