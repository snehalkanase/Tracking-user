{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { URLBuilder } from \"../url\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\nexport const DefaultRedirectOptions = {\n  handleRedirects: true,\n  maxRetries: 20\n};\n/**\n * Creates a redirect policy, which sends a repeats the request to a new destination if a response arrives with a \"location\" header, and a status code between 300 and 307.\n * @param maximumRetries - Maximum number of redirects to follow.\n * @returns An instance of the {@link RedirectPolicy}\n */\nexport function redirectPolicy() {\n  let maximumRetries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 20;\n  return {\n    create: (nextPolicy, options) => {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    }\n  };\n}\n/**\n * Resends the request to a new destination if a response arrives with a \"location\" header, and a status code between 300 and 307.\n */\nexport class RedirectPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy, options) {\n    let maxRetries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;\n    super(nextPolicy, options);\n    this.maxRetries = maxRetries;\n  }\n  sendRequest(request) {\n    return this._nextPolicy.sendRequest(request).then(response => handleRedirect(this, response, 0));\n  }\n}\nfunction handleRedirect(policy, response, currentRetries) {\n  const {\n    request,\n    status\n  } = response;\n  const locationHeader = response.headers.get(\"location\");\n  if (locationHeader && (status === 300 || status === 301 && allowedRedirect.includes(request.method) || status === 302 && allowedRedirect.includes(request.method) || status === 303 && request.method === \"POST\" || status === 307) && (!policy.maxRetries || currentRetries < policy.maxRetries)) {\n    const builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString();\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n      delete request.body;\n    }\n    return policy._nextPolicy.sendRequest(request).then(res => handleRedirect(policy, res, currentRetries + 1));\n  }\n  return Promise.resolve(response);\n}","map":{"version":3,"names":["BaseRequestPolicy","URLBuilder","allowedRedirect","DefaultRedirectOptions","handleRedirects","maxRetries","redirectPolicy","maximumRetries","arguments","length","undefined","create","nextPolicy","options","RedirectPolicy","constructor","sendRequest","request","_nextPolicy","then","response","handleRedirect","policy","currentRetries","status","locationHeader","headers","get","includes","method","builder","parse","url","setPath","toString","body","res","Promise","resolve"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\policies\\redirectPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { URLBuilder } from \"../url\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n\n/**\n * Options for how redirect responses are handled.\n */\nexport interface RedirectOptions {\n  /**\n   * When true, redirect responses are followed.  Defaults to true.\n   */\n  handleRedirects: boolean;\n\n  /**\n   * The maximum number of times the redirect URL will be tried before\n   * failing.  Defaults to 20.\n   */\n  maxRetries?: number;\n}\n\nexport const DefaultRedirectOptions: RedirectOptions = {\n  handleRedirects: true,\n  maxRetries: 20,\n};\n\n/**\n * Creates a redirect policy, which sends a repeats the request to a new destination if a response arrives with a \"location\" header, and a status code between 300 and 307.\n * @param maximumRetries - Maximum number of redirects to follow.\n * @returns An instance of the {@link RedirectPolicy}\n */\nexport function redirectPolicy(maximumRetries = 20): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    },\n  };\n}\n\n/**\n * Resends the request to a new destination if a response arrives with a \"location\" header, and a status code between 300 and 307.\n */\nexport class RedirectPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, readonly maxRetries = 20) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request)\n      .then((response) => handleRedirect(this, response, 0));\n  }\n}\n\nfunction handleRedirect(\n  policy: RedirectPolicy,\n  response: HttpOperationResponse,\n  currentRetries: number\n): Promise<HttpOperationResponse> {\n  const { request, status } = response;\n  const locationHeader = response.headers.get(\"location\");\n  if (\n    locationHeader &&\n    (status === 300 ||\n      (status === 301 && allowedRedirect.includes(request.method)) ||\n      (status === 302 && allowedRedirect.includes(request.method)) ||\n      (status === 303 && request.method === \"POST\") ||\n      status === 307) &&\n    (!policy.maxRetries || currentRetries < policy.maxRetries)\n  ) {\n    const builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString();\n\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n      delete request.body;\n    }\n\n    return policy._nextPolicy\n      .sendRequest(request)\n      .then((res) => handleRedirect(policy, res, currentRetries + 1));\n  }\n\n  return Promise.resolve(response);\n}\n"],"mappings":"AAAA;AACA;AAEA,SACEA,iBAAiB,QAIZ,iBAAiB;AAExB,SAASC,UAAU,QAAQ,QAAQ;AAGnC;;;AAGA,MAAMC,eAAe,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC;AAkBvC,OAAO,MAAMC,sBAAsB,GAAoB;EACrDC,eAAe,EAAE,IAAI;EACrBC,UAAU,EAAE;CACb;AAED;;;;;AAKA,OAAM,SAAUC,cAAcA,CAAA,EAAoB;EAAA,IAAnBC,cAAc,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAChD,OAAO;IACLG,MAAM,EAAEA,CAACC,UAAyB,EAAEC,OAA6B,KAAI;MACnE,OAAO,IAAIC,cAAc,CAACF,UAAU,EAAEC,OAAO,EAAEN,cAAc,CAAC;IAChE;GACD;AACH;AAEA;;;AAGA,OAAM,MAAOO,cAAe,SAAQd,iBAAiB;EACnDe,YAAYH,UAAyB,EAAEC,OAA6B,EAA0B;IAAA,IAAfR,UAAA,GAAAG,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAa,EAAE;IAC5F,KAAK,CAACI,UAAU,EAAEC,OAAO,CAAC;IADmD,KAAAR,UAAU,GAAVA,UAAU;EAEzF;EAEOW,WAAWA,CAACC,OAAwB;IACzC,OAAO,IAAI,CAACC,WAAW,CACpBF,WAAW,CAACC,OAAO,CAAC,CACpBE,IAAI,CAAEC,QAAQ,IAAKC,cAAc,CAAC,IAAI,EAAED,QAAQ,EAAE,CAAC,CAAC,CAAC;EAC1D;;AAGF,SAASC,cAAcA,CACrBC,MAAsB,EACtBF,QAA+B,EAC/BG,cAAsB;EAEtB,MAAM;IAAEN,OAAO;IAAEO;EAAM,CAAE,GAAGJ,QAAQ;EACpC,MAAMK,cAAc,GAAGL,QAAQ,CAACM,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;EACvD,IACEF,cAAc,KACbD,MAAM,KAAK,GAAG,IACZA,MAAM,KAAK,GAAG,IAAItB,eAAe,CAAC0B,QAAQ,CAACX,OAAO,CAACY,MAAM,CAAE,IAC3DL,MAAM,KAAK,GAAG,IAAItB,eAAe,CAAC0B,QAAQ,CAACX,OAAO,CAACY,MAAM,CAAE,IAC3DL,MAAM,KAAK,GAAG,IAAIP,OAAO,CAACY,MAAM,KAAK,MAAO,IAC7CL,MAAM,KAAK,GAAG,CAAC,KAChB,CAACF,MAAM,CAACjB,UAAU,IAAIkB,cAAc,GAAGD,MAAM,CAACjB,UAAU,CAAC,EAC1D;IACA,MAAMyB,OAAO,GAAG7B,UAAU,CAAC8B,KAAK,CAACd,OAAO,CAACe,GAAG,CAAC;IAC7CF,OAAO,CAACG,OAAO,CAACR,cAAc,CAAC;IAC/BR,OAAO,CAACe,GAAG,GAAGF,OAAO,CAACI,QAAQ,EAAE;IAEhC;IACA;IACA,IAAIV,MAAM,KAAK,GAAG,EAAE;MAClBP,OAAO,CAACY,MAAM,GAAG,KAAK;MACtB,OAAOZ,OAAO,CAACkB,IAAI;;IAGrB,OAAOb,MAAM,CAACJ,WAAW,CACtBF,WAAW,CAACC,OAAO,CAAC,CACpBE,IAAI,CAAEiB,GAAG,IAAKf,cAAc,CAACC,MAAM,EAAEc,GAAG,EAAEb,cAAc,GAAG,CAAC,CAAC,CAAC;;EAGnE,OAAOc,OAAO,CAACC,OAAO,CAAClB,QAAQ,CAAC;AAClC"},"metadata":{},"sourceType":"module","externalDependencies":[]}