{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { generateUuid } from \"@azure/core-http\";\nimport { StorageClientContext } from \"./generated/src/index\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { Blob as StorageBlob, Container } from \"./generated/src/operations\";\nimport { ETagNone } from \"./utils/constants\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\n/**\n * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.\n */\nexport var BlobLeaseClient = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of BlobLeaseClient.\n   * @param client - The client to make the lease operation requests.\n   * @param leaseId - Initial proposed lease id.\n   */\n  function BlobLeaseClient(client, leaseId) {\n    _classCallCheck(this, BlobLeaseClient);\n    var clientContext = new StorageClientContext(client.url, client.pipeline.toServiceClientOptions());\n    this._url = client.url;\n    if (client.name === undefined) {\n      this._isContainer = true;\n      this._containerOrBlobOperation = new Container(clientContext);\n    } else {\n      this._isContainer = false;\n      this._containerOrBlobOperation = new StorageBlob(clientContext);\n    }\n    if (!leaseId) {\n      leaseId = generateUuid();\n    }\n    this._leaseId = leaseId;\n  }\n  /**\n   * Gets the lease Id.\n   *\n   * @readonly\n   */\n  _createClass(BlobLeaseClient, [{\n    key: \"leaseId\",\n    get: function get() {\n      return this._leaseId;\n    }\n    /**\n     * Gets the url.\n     *\n     * @readonly\n     */\n  }, {\n    key: \"url\",\n    get: function get() {\n      return this._url;\n    }\n    /**\n     * Establishes and manages a lock on a container for delete operations, or on a blob\n     * for write and delete operations.\n     * The lock duration can be 15 to 60 seconds, or can be infinite.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param duration - Must be between 15 to 60 seconds, or infinite (-1)\n     * @param options - option to configure lease management operations.\n     * @returns Response data for acquire lease operation.\n     */\n  }, {\n    key: \"acquireLease\",\n    value: function () {\n      var _acquireLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(duration) {\n        var options,\n          _a,\n          _b,\n          _c,\n          _d,\n          _e,\n          _f,\n          _createSpan,\n          span,\n          updatedOptions,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _createSpan = createSpan(\"BlobLeaseClient-acquireLease\", options), span = _createSpan.span, updatedOptions = _createSpan.updatedOptions;\n              if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {\n                _context.next = 4;\n                break;\n              }\n              throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n            case 4:\n              _context.prev = 4;\n              _context.next = 7;\n              return this._containerOrBlobOperation.acquireLease(Object.assign({\n                abortSignal: options.abortSignal,\n                duration: duration,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n                  ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n                }),\n                proposedLeaseId: this._leaseId\n              }, convertTracingToRequestOptionsBase(updatedOptions)));\n            case 7:\n              return _context.abrupt(\"return\", _context.sent);\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](4);\n              span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: _context.t0.message\n              });\n              throw _context.t0;\n            case 14:\n              _context.prev = 14;\n              span.end();\n              return _context.finish(14);\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[4, 10, 14, 17]]);\n      }));\n      function acquireLease(_x) {\n        return _acquireLease.apply(this, arguments);\n      }\n      return acquireLease;\n    }()\n    /**\n     * To change the ID of the lease.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param proposedLeaseId - the proposed new lease Id.\n     * @param options - option to configure lease management operations.\n     * @returns Response data for change lease operation.\n     */\n  }, {\n    key: \"changeLease\",\n    value: function () {\n      var _changeLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(proposedLeaseId) {\n        var options,\n          _a,\n          _b,\n          _c,\n          _d,\n          _e,\n          _f,\n          _createSpan2,\n          span,\n          updatedOptions,\n          response,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n              _createSpan2 = createSpan(\"BlobLeaseClient-changeLease\", options), span = _createSpan2.span, updatedOptions = _createSpan2.updatedOptions;\n              if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {\n                _context2.next = 4;\n                break;\n              }\n              throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n            case 4:\n              _context2.prev = 4;\n              _context2.next = 7;\n              return this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId, Object.assign({\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n                  ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n                })\n              }, convertTracingToRequestOptionsBase(updatedOptions)));\n            case 7:\n              response = _context2.sent;\n              this._leaseId = proposedLeaseId;\n              return _context2.abrupt(\"return\", response);\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](4);\n              span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: _context2.t0.message\n              });\n              throw _context2.t0;\n            case 16:\n              _context2.prev = 16;\n              span.end();\n              return _context2.finish(16);\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[4, 12, 16, 19]]);\n      }));\n      function changeLease(_x2) {\n        return _changeLease.apply(this, arguments);\n      }\n      return changeLease;\n    }()\n    /**\n     * To free the lease if it is no longer needed so that another client may\n     * immediately acquire a lease against the container or the blob.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param options - option to configure lease management operations.\n     * @returns Response data for release lease operation.\n     */\n  }, {\n    key: \"releaseLease\",\n    value: function () {\n      var _releaseLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var options,\n          _a,\n          _b,\n          _c,\n          _d,\n          _e,\n          _f,\n          _createSpan3,\n          span,\n          updatedOptions,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n              _createSpan3 = createSpan(\"BlobLeaseClient-releaseLease\", options), span = _createSpan3.span, updatedOptions = _createSpan3.updatedOptions;\n              if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {\n                _context3.next = 4;\n                break;\n              }\n              throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n            case 4:\n              _context3.prev = 4;\n              _context3.next = 7;\n              return this._containerOrBlobOperation.releaseLease(this._leaseId, Object.assign({\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n                  ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n                })\n              }, convertTracingToRequestOptionsBase(updatedOptions)));\n            case 7:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 10:\n              _context3.prev = 10;\n              _context3.t0 = _context3[\"catch\"](4);\n              span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: _context3.t0.message\n              });\n              throw _context3.t0;\n            case 14:\n              _context3.prev = 14;\n              span.end();\n              return _context3.finish(14);\n            case 17:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[4, 10, 14, 17]]);\n      }));\n      function releaseLease() {\n        return _releaseLease.apply(this, arguments);\n      }\n      return releaseLease;\n    }()\n    /**\n     * To renew the lease.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param options - Optional option to configure lease management operations.\n     * @returns Response data for renew lease operation.\n     */\n  }, {\n    key: \"renewLease\",\n    value: function () {\n      var _renewLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var options,\n          _a,\n          _b,\n          _c,\n          _d,\n          _e,\n          _f,\n          _createSpan4,\n          span,\n          updatedOptions,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              options = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};\n              _createSpan4 = createSpan(\"BlobLeaseClient-renewLease\", options), span = _createSpan4.span, updatedOptions = _createSpan4.updatedOptions;\n              if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {\n                _context4.next = 4;\n                break;\n              }\n              throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n            case 4:\n              _context4.prev = 4;\n              _context4.next = 7;\n              return this._containerOrBlobOperation.renewLease(this._leaseId, Object.assign({\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n                  ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n                })\n              }, convertTracingToRequestOptionsBase(updatedOptions)));\n            case 7:\n              return _context4.abrupt(\"return\", _context4.sent);\n            case 10:\n              _context4.prev = 10;\n              _context4.t0 = _context4[\"catch\"](4);\n              span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: _context4.t0.message\n              });\n              throw _context4.t0;\n            case 14:\n              _context4.prev = 14;\n              span.end();\n              return _context4.finish(14);\n            case 17:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[4, 10, 14, 17]]);\n      }));\n      function renewLease() {\n        return _renewLease.apply(this, arguments);\n      }\n      return renewLease;\n    }()\n    /**\n     * To end the lease but ensure that another client cannot acquire a new lease\n     * until the current lease period has expired.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param breakPeriod - Break period\n     * @param options - Optional options to configure lease management operations.\n     * @returns Response data for break lease operation.\n     */\n  }, {\n    key: \"breakLease\",\n    value: function () {\n      var _breakLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(breakPeriod) {\n        var options,\n          _a,\n          _b,\n          _c,\n          _d,\n          _e,\n          _f,\n          _createSpan5,\n          span,\n          updatedOptions,\n          operationOptions,\n          _args5 = arguments;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n              _createSpan5 = createSpan(\"BlobLeaseClient-breakLease\", options), span = _createSpan5.span, updatedOptions = _createSpan5.updatedOptions;\n              if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {\n                _context5.next = 4;\n                break;\n              }\n              throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n            case 4:\n              _context5.prev = 4;\n              operationOptions = Object.assign({\n                abortSignal: options.abortSignal,\n                breakPeriod: breakPeriod,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n                  ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n                })\n              }, convertTracingToRequestOptionsBase(updatedOptions));\n              _context5.next = 8;\n              return this._containerOrBlobOperation.breakLease(operationOptions);\n            case 8:\n              return _context5.abrupt(\"return\", _context5.sent);\n            case 11:\n              _context5.prev = 11;\n              _context5.t0 = _context5[\"catch\"](4);\n              span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: _context5.t0.message\n              });\n              throw _context5.t0;\n            case 15:\n              _context5.prev = 15;\n              span.end();\n              return _context5.finish(15);\n            case 18:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[4, 11, 15, 18]]);\n      }));\n      function breakLease(_x3) {\n        return _breakLease.apply(this, arguments);\n      }\n      return breakLease;\n    }()\n  }]);\n  return BlobLeaseClient;\n}();","map":{"version":3,"names":["generateUuid","StorageClientContext","SpanStatusCode","Blob","StorageBlob","Container","ETagNone","convertTracingToRequestOptionsBase","createSpan","BlobLeaseClient","client","leaseId","_classCallCheck","clientContext","url","pipeline","toServiceClientOptions","_url","name","undefined","_isContainer","_containerOrBlobOperation","_leaseId","_createClass","key","get","value","_acquireLease","_asyncToGenerator","_regeneratorRuntime","mark","_callee","duration","options","_a","_b","_c","_d","_e","_f","_createSpan","span","updatedOptions","_args","arguments","wrap","_callee$","_context","prev","next","length","conditions","ifMatch","ifNoneMatch","tagConditions","RangeError","acquireLease","Object","assign","abortSignal","modifiedAccessConditions","ifTags","proposedLeaseId","abrupt","sent","t0","setStatus","code","ERROR","message","end","finish","stop","_x","apply","_changeLease","_callee2","_createSpan2","response","_args2","_callee2$","_context2","changeLease","_x2","_releaseLease","_callee3","_createSpan3","_args3","_callee3$","_context3","releaseLease","_renewLease","_callee4","_createSpan4","_args4","_callee4$","_context4","renewLease","_breakLease","_callee5","breakPeriod","_createSpan5","operationOptions","_args5","_callee5$","_context5","breakLease","_x3"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\BlobLeaseClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { generateUuid, HttpResponse } from \"@azure/core-http\";\nimport { StorageClientContext } from \"./generated/src/index\";\nimport { ContainerBreakLeaseOptionalParams } from \"./generatedModels\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { Blob as StorageBlob, Container } from \"./generated/src/operations\";\nimport { ModifiedAccessConditions } from \"./models\";\nimport { CommonOptions } from \"./StorageClient\";\nimport { ETagNone } from \"./utils/constants\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { BlobClient } from \"./Clients\";\nimport { ContainerClient } from \"./ContainerClient\";\n\n/**\n * The details for a specific lease.\n */\nexport interface Lease {\n  /**\n   * The ETag contains a value that you can use to\n   * perform operations conditionally. If the request version is 2011-08-18 or\n   * newer, the ETag value will be in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the container was\n   * last modified. Any operation that modifies the blob, including an update\n   * of the blob's metadata or properties, changes the last-modified time of\n   * the blob.\n   */\n  lastModified?: Date;\n  /**\n   * Uniquely identifies a container's lease\n   */\n  leaseId?: string;\n  /**\n   * Approximate time remaining in the lease\n   * period, in seconds.\n   */\n  leaseTime?: number;\n  /**\n   * This header uniquely identifies the request\n   * that was made and can be used for troubleshooting the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the Blob service used\n   * to execute the request. This header is returned for requests made against\n   * version 2009-09-19 and above.\n   */\n  version?: string;\n  /**\n   * UTC date/time value generated by the service that\n   * indicates the time at which the response was initiated\n   */\n  date?: Date;\n  /**\n   * Error code if any associated with the response that returned\n   * the Lease information.\n   */\n  errorCode?: string;\n}\n\n/**\n * Contains the response data for operations that create, modify, or delete a lease.\n *\n * See {@link BlobLeaseClient}.\n */\nexport type LeaseOperationResponse = Lease & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: HttpResponse & {\n    /**\n     * The parsed HTTP response headers.\n     */\n    parsedHeaders: Lease;\n  };\n};\n\n/**\n * Configures lease operations.\n */\nexport interface LeaseOperationOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when changing the lease.\n   */\n  conditions?: ModifiedAccessConditions;\n}\n\n/**\n * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.\n */\nexport class BlobLeaseClient {\n  private _leaseId: string;\n  private _url: string;\n  private _containerOrBlobOperation: Container | StorageBlob;\n  private _isContainer: boolean;\n\n  /**\n   * Gets the lease Id.\n   *\n   * @readonly\n   */\n  public get leaseId(): string {\n    return this._leaseId;\n  }\n\n  /**\n   * Gets the url.\n   *\n   * @readonly\n   */\n  public get url(): string {\n    return this._url;\n  }\n\n  /**\n   * Creates an instance of BlobLeaseClient.\n   * @param client - The client to make the lease operation requests.\n   * @param leaseId - Initial proposed lease id.\n   */\n  constructor(client: ContainerClient | BlobClient, leaseId?: string) {\n    const clientContext = new StorageClientContext(\n      client.url,\n      (client as any).pipeline.toServiceClientOptions()\n    );\n    this._url = client.url;\n\n    if ((client as BlobClient).name === undefined) {\n      this._isContainer = true;\n      this._containerOrBlobOperation = new Container(clientContext);\n    } else {\n      this._isContainer = false;\n      this._containerOrBlobOperation = new StorageBlob(clientContext);\n    }\n\n    if (!leaseId) {\n      leaseId = generateUuid();\n    }\n    this._leaseId = leaseId;\n  }\n\n  /**\n   * Establishes and manages a lock on a container for delete operations, or on a blob\n   * for write and delete operations.\n   * The lock duration can be 15 to 60 seconds, or can be infinite.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param duration - Must be between 15 to 60 seconds, or infinite (-1)\n   * @param options - option to configure lease management operations.\n   * @returns Response data for acquire lease operation.\n   */\n  public async acquireLease(\n    duration: number,\n    options: LeaseOperationOptions = {}\n  ): Promise<LeaseOperationResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-acquireLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      return await this._containerOrBlobOperation.acquireLease({\n        abortSignal: options.abortSignal,\n        duration,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        proposedLeaseId: this._leaseId,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * To change the ID of the lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param proposedLeaseId - the proposed new lease Id.\n   * @param options - option to configure lease management operations.\n   * @returns Response data for change lease operation.\n   */\n  public async changeLease(\n    proposedLeaseId: string,\n    options: LeaseOperationOptions = {}\n  ): Promise<LeaseOperationResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-changeLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      const response = await this._containerOrBlobOperation.changeLease(\n        this._leaseId,\n        proposedLeaseId,\n        {\n          abortSignal: options.abortSignal,\n          modifiedAccessConditions: {\n            ...options.conditions,\n            ifTags: options.conditions?.tagConditions,\n          },\n          ...convertTracingToRequestOptionsBase(updatedOptions),\n        }\n      );\n      this._leaseId = proposedLeaseId;\n      return response;\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * To free the lease if it is no longer needed so that another client may\n   * immediately acquire a lease against the container or the blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param options - option to configure lease management operations.\n   * @returns Response data for release lease operation.\n   */\n  public async releaseLease(options: LeaseOperationOptions = {}): Promise<LeaseOperationResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-releaseLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      return await this._containerOrBlobOperation.releaseLease(this._leaseId, {\n        abortSignal: options.abortSignal,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * To renew the lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param options - Optional option to configure lease management operations.\n   * @returns Response data for renew lease operation.\n   */\n  public async renewLease(options: LeaseOperationOptions = {}): Promise<Lease> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-renewLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      return await this._containerOrBlobOperation.renewLease(this._leaseId, {\n        abortSignal: options.abortSignal,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * To end the lease but ensure that another client cannot acquire a new lease\n   * until the current lease period has expired.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param breakPeriod - Break period\n   * @param options - Optional options to configure lease management operations.\n   * @returns Response data for break lease operation.\n   */\n  public async breakLease(\n    breakPeriod: number,\n    options: LeaseOperationOptions = {}\n  ): Promise<LeaseOperationResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-breakLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      const operationOptions: ContainerBreakLeaseOptionalParams = {\n        abortSignal: options.abortSignal,\n        breakPeriod,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      };\n      return await this._containerOrBlobOperation.breakLease(operationOptions);\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}