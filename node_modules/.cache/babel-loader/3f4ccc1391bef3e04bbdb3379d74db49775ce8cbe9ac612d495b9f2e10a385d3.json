{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { initHttpOperation, pollHttpOperation } from \"../../http/operation\";\nimport { logger } from \"../../logger\";\nconst createStateProxy = () => ({\n  initState: config => ({\n    config,\n    isStarted: true\n  }),\n  setCanceled: state => state.isCancelled = true,\n  setError: (state, error) => state.error = error,\n  setResult: (state, result) => state.result = result,\n  setRunning: state => state.isStarted = true,\n  setSucceeded: state => state.isCompleted = true,\n  setFailed: () => {\n    /** empty body */\n  },\n  getError: state => state.error,\n  getResult: state => state.result,\n  isCanceled: state => !!state.isCancelled,\n  isFailed: state => !!state.error,\n  isRunning: state => !!state.isStarted,\n  isSucceeded: state => Boolean(state.isCompleted && !state.isCancelled && !state.error)\n});\nexport class GenericPollOperation {\n  constructor(state, lro, setErrorAsResult, lroResourceLocationConfig, processResult, updateState, isDone) {\n    this.state = state;\n    this.lro = lro;\n    this.setErrorAsResult = setErrorAsResult;\n    this.lroResourceLocationConfig = lroResourceLocationConfig;\n    this.processResult = processResult;\n    this.updateState = updateState;\n    this.isDone = isDone;\n  }\n  setPollerConfig(pollerConfig) {\n    this.pollerConfig = pollerConfig;\n  }\n  async update(options) {\n    var _a;\n    const stateProxy = createStateProxy();\n    if (!this.state.isStarted) {\n      this.state = Object.assign(Object.assign({}, this.state), await initHttpOperation({\n        lro: this.lro,\n        stateProxy,\n        resourceLocationConfig: this.lroResourceLocationConfig,\n        processResult: this.processResult,\n        setErrorAsResult: this.setErrorAsResult\n      }));\n    }\n    const updateState = this.updateState;\n    const isDone = this.isDone;\n    if (!this.state.isCompleted && this.state.error === undefined) {\n      await pollHttpOperation({\n        lro: this.lro,\n        state: this.state,\n        stateProxy,\n        processResult: this.processResult,\n        updateState: updateState ? (state, _ref) => {\n          let {\n            rawResponse\n          } = _ref;\n          return updateState(state, rawResponse);\n        } : undefined,\n        isDone: isDone ? (_ref2, state) => {\n          let {\n            flatResponse\n          } = _ref2;\n          return isDone(flatResponse, state);\n        } : undefined,\n        options,\n        setDelay: intervalInMs => {\n          this.pollerConfig.intervalInMs = intervalInMs;\n        },\n        setErrorAsResult: this.setErrorAsResult\n      });\n    }\n    (_a = options === null || options === void 0 ? void 0 : options.fireProgress) === null || _a === void 0 ? void 0 : _a.call(options, this.state);\n    return this;\n  }\n  async cancel() {\n    logger.error(\"`cancelOperation` is deprecated because it wasn't implemented\");\n    return this;\n  }\n  /**\n   * Serializes the Poller operation.\n   */\n  toString() {\n    return JSON.stringify({\n      state: this.state\n    });\n  }\n}","map":{"version":3,"names":["initHttpOperation","pollHttpOperation","logger","createStateProxy","initState","config","isStarted","setCanceled","state","isCancelled","setError","error","setResult","result","setRunning","setSucceeded","isCompleted","setFailed","getError","getResult","isCanceled","isFailed","isRunning","isSucceeded","Boolean","GenericPollOperation","constructor","lro","setErrorAsResult","lroResourceLocationConfig","processResult","updateState","isDone","setPollerConfig","pollerConfig","update","options","stateProxy","Object","assign","resourceLocationConfig","undefined","_ref","rawResponse","_ref2","flatResponse","setDelay","intervalInMs","_a","fireProgress","call","cancel","toString","JSON","stringify"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-lro\\src\\legacy\\lroEngine\\operation.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { LongRunningOperation, LroResourceLocationConfig, RawResponse } from \"../../http/models\";\nimport { PollOperation, PollOperationState } from \"../pollOperation\";\nimport { RestorableOperationState, StateProxy } from \"../../poller/models\";\nimport { initHttpOperation, pollHttpOperation } from \"../../http/operation\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { PollerConfig } from \"./models\";\nimport { logger } from \"../../logger\";\n\nconst createStateProxy: <TResult, TState extends PollOperationState<TResult>>() => StateProxy<\n  TState,\n  TResult\n> = () => ({\n  initState: (config) => ({ config, isStarted: true } as any),\n  setCanceled: (state) => (state.isCancelled = true),\n  setError: (state, error) => (state.error = error),\n  setResult: (state, result) => (state.result = result),\n  setRunning: (state) => (state.isStarted = true),\n  setSucceeded: (state) => (state.isCompleted = true),\n  setFailed: () => {\n    /** empty body */\n  },\n\n  getError: (state) => state.error,\n  getResult: (state) => state.result,\n  isCanceled: (state) => !!state.isCancelled,\n  isFailed: (state) => !!state.error,\n  isRunning: (state) => !!state.isStarted,\n  isSucceeded: (state) => Boolean(state.isCompleted && !state.isCancelled && !state.error),\n});\n\nexport class GenericPollOperation<TResult, TState extends PollOperationState<TResult>>\n  implements PollOperation<TState, TResult>\n{\n  private pollerConfig?: PollerConfig;\n\n  constructor(\n    public state: RestorableOperationState<TState>,\n    private lro: LongRunningOperation,\n    private setErrorAsResult: boolean,\n    private lroResourceLocationConfig?: LroResourceLocationConfig,\n    private processResult?: (result: unknown, state: TState) => TResult,\n    private updateState?: (state: TState, lastResponse: RawResponse) => void,\n    private isDone?: (lastResponse: TResult, state: TState) => boolean\n  ) {}\n\n  public setPollerConfig(pollerConfig: PollerConfig): void {\n    this.pollerConfig = pollerConfig;\n  }\n\n  async update(options?: {\n    abortSignal?: AbortSignalLike;\n    fireProgress?: (state: TState) => void;\n  }): Promise<PollOperation<TState, TResult>> {\n    const stateProxy = createStateProxy<TResult, TState>();\n    if (!this.state.isStarted) {\n      this.state = {\n        ...this.state,\n        ...(await initHttpOperation({\n          lro: this.lro,\n          stateProxy,\n          resourceLocationConfig: this.lroResourceLocationConfig,\n          processResult: this.processResult,\n          setErrorAsResult: this.setErrorAsResult,\n        })),\n      };\n    }\n    const updateState = this.updateState;\n    const isDone = this.isDone;\n\n    if (!this.state.isCompleted && this.state.error === undefined) {\n      await pollHttpOperation({\n        lro: this.lro,\n        state: this.state,\n        stateProxy,\n        processResult: this.processResult,\n        updateState: updateState\n          ? (state, { rawResponse }) => updateState(state, rawResponse)\n          : undefined,\n        isDone: isDone\n          ? ({ flatResponse }, state) => isDone(flatResponse as TResult, state)\n          : undefined,\n        options,\n        setDelay: (intervalInMs) => {\n          this.pollerConfig!.intervalInMs = intervalInMs;\n        },\n        setErrorAsResult: this.setErrorAsResult,\n      });\n    }\n    options?.fireProgress?.(this.state);\n    return this;\n  }\n\n  async cancel(): Promise<PollOperation<TState, TResult>> {\n    logger.error(\"`cancelOperation` is deprecated because it wasn't implemented\");\n    return this;\n  }\n\n  /**\n   * Serializes the Poller operation.\n   */\n  public toString(): string {\n    return JSON.stringify({\n      state: this.state,\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}