{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { HttpHeaders, isHttpHeadersLike } from \"./httpHeaders\";\nimport { Serializer } from \"./serializer\";\nimport { generateUuid } from \"./util/utils\";\nexport function isWebResourceLike(object) {\n  if (object && typeof object === \"object\") {\n    const castObject = object;\n    if (typeof castObject.url === \"string\" && typeof castObject.method === \"string\" && typeof castObject.headers === \"object\" && isHttpHeadersLike(castObject.headers) && typeof castObject.validateRequestProperties === \"function\" && typeof castObject.prepare === \"function\" && typeof castObject.clone === \"function\") {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * Creates a new WebResource object.\n *\n * This class provides an abstraction over a REST call by being library / implementation agnostic and wrapping the necessary\n * properties to initiate a request.\n */\nexport class WebResource {\n  constructor(url, method, body, query, headers, streamResponseBody, withCredentials, abortSignal, timeout, onUploadProgress, onDownloadProgress, proxySettings, keepAlive, decompressResponse, streamResponseStatusCodes) {\n    this.streamResponseBody = streamResponseBody;\n    this.streamResponseStatusCodes = streamResponseStatusCodes;\n    this.url = url || \"\";\n    this.method = method || \"GET\";\n    this.headers = isHttpHeadersLike(headers) ? headers : new HttpHeaders(headers);\n    this.body = body;\n    this.query = query;\n    this.formData = undefined;\n    this.withCredentials = withCredentials || false;\n    this.abortSignal = abortSignal;\n    this.timeout = timeout || 0;\n    this.onUploadProgress = onUploadProgress;\n    this.onDownloadProgress = onDownloadProgress;\n    this.proxySettings = proxySettings;\n    this.keepAlive = keepAlive;\n    this.decompressResponse = decompressResponse;\n    this.requestId = this.headers.get(\"x-ms-client-request-id\") || generateUuid();\n  }\n  /**\n   * Validates that the required properties such as method, url, headers[\"Content-Type\"],\n   * headers[\"accept-language\"] are defined. It will throw an error if one of the above\n   * mentioned properties are not defined.\n   */\n  validateRequestProperties() {\n    if (!this.method) {\n      throw new Error(\"WebResource.method is required.\");\n    }\n    if (!this.url) {\n      throw new Error(\"WebResource.url is required.\");\n    }\n  }\n  /**\n   * Prepares the request.\n   * @param options - Options to provide for preparing the request.\n   * @returns Returns the prepared WebResource (HTTP Request) object that needs to be given to the request pipeline.\n   */\n  prepare(options) {\n    if (!options) {\n      throw new Error(\"options object is required\");\n    }\n    if (options.method === undefined || options.method === null || typeof options.method.valueOf() !== \"string\") {\n      throw new Error(\"options.method must be a string.\");\n    }\n    if (options.url && options.pathTemplate) {\n      throw new Error(\"options.url and options.pathTemplate are mutually exclusive. Please provide exactly one of them.\");\n    }\n    if ((options.pathTemplate === undefined || options.pathTemplate === null || typeof options.pathTemplate.valueOf() !== \"string\") && (options.url === undefined || options.url === null || typeof options.url.valueOf() !== \"string\")) {\n      throw new Error(\"Please provide exactly one of options.pathTemplate or options.url.\");\n    }\n    // set the url if it is provided.\n    if (options.url) {\n      if (typeof options.url !== \"string\") {\n        throw new Error('options.url must be of type \"string\".');\n      }\n      this.url = options.url;\n    }\n    // set the method\n    if (options.method) {\n      const validMethods = [\"GET\", \"PUT\", \"HEAD\", \"DELETE\", \"OPTIONS\", \"POST\", \"PATCH\", \"TRACE\"];\n      if (validMethods.indexOf(options.method.toUpperCase()) === -1) {\n        throw new Error('The provided method \"' + options.method + '\" is invalid. Supported HTTP methods are: ' + JSON.stringify(validMethods));\n      }\n    }\n    this.method = options.method.toUpperCase();\n    // construct the url if path template is provided\n    if (options.pathTemplate) {\n      const {\n        pathTemplate,\n        pathParameters\n      } = options;\n      if (typeof pathTemplate !== \"string\") {\n        throw new Error('options.pathTemplate must be of type \"string\".');\n      }\n      if (!options.baseUrl) {\n        options.baseUrl = \"https://management.azure.com\";\n      }\n      const baseUrl = options.baseUrl;\n      let url = baseUrl + (baseUrl.endsWith(\"/\") ? \"\" : \"/\") + (pathTemplate.startsWith(\"/\") ? pathTemplate.slice(1) : pathTemplate);\n      const segments = url.match(/({[\\w-]*\\s*[\\w-]*})/gi);\n      if (segments && segments.length) {\n        if (!pathParameters) {\n          throw new Error(`pathTemplate: ${pathTemplate} has been provided. Hence, options.pathParameters must also be provided.`);\n        }\n        segments.forEach(function (item) {\n          const pathParamName = item.slice(1, -1);\n          const pathParam = pathParameters[pathParamName];\n          if (pathParam === null || pathParam === undefined || !(typeof pathParam === \"string\" || typeof pathParam === \"object\")) {\n            const stringifiedPathParameters = JSON.stringify(pathParameters, undefined, 2);\n            throw new Error(`pathTemplate: ${pathTemplate} contains the path parameter ${pathParamName}` + ` however, it is not present in parameters: ${stringifiedPathParameters}.` + `The value of the path parameter can either be a \"string\" of the form { ${pathParamName}: \"some sample value\" } or ` + `it can be an \"object\" of the form { \"${pathParamName}\": { value: \"some sample value\", skipUrlEncoding: true } }.`);\n          }\n          if (typeof pathParam.valueOf() === \"string\") {\n            url = url.replace(item, encodeURIComponent(pathParam));\n          }\n          if (typeof pathParam.valueOf() === \"object\") {\n            if (!pathParam.value) {\n              throw new Error(`options.pathParameters[${pathParamName}] is of type \"object\" but it does not contain a \"value\" property.`);\n            }\n            if (pathParam.skipUrlEncoding) {\n              url = url.replace(item, pathParam.value);\n            } else {\n              url = url.replace(item, encodeURIComponent(pathParam.value));\n            }\n          }\n        });\n      }\n      this.url = url;\n    }\n    // append query parameters to the url if they are provided. They can be provided with pathTemplate or url option.\n    if (options.queryParameters) {\n      const queryParameters = options.queryParameters;\n      if (typeof queryParameters !== \"object\") {\n        throw new Error(`options.queryParameters must be of type object. It should be a JSON object ` + `of \"query-parameter-name\" as the key and the \"query-parameter-value\" as the value. ` + `The \"query-parameter-value\" may be fo type \"string\" or an \"object\" of the form { value: \"query-parameter-value\", skipUrlEncoding: true }.`);\n      }\n      // append question mark if it is not present in the url\n      if (this.url && this.url.indexOf(\"?\") === -1) {\n        this.url += \"?\";\n      }\n      // construct queryString\n      const queryParams = [];\n      // We need to populate this.query as a dictionary if the request is being used for Sway's validateRequest().\n      this.query = {};\n      for (const queryParamName in queryParameters) {\n        const queryParam = queryParameters[queryParamName];\n        if (queryParam) {\n          if (typeof queryParam === \"string\") {\n            queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam));\n            this.query[queryParamName] = encodeURIComponent(queryParam);\n          } else if (typeof queryParam === \"object\") {\n            if (!queryParam.value) {\n              throw new Error(`options.queryParameters[${queryParamName}] is of type \"object\" but it does not contain a \"value\" property.`);\n            }\n            if (queryParam.skipUrlEncoding) {\n              queryParams.push(queryParamName + \"=\" + queryParam.value);\n              this.query[queryParamName] = queryParam.value;\n            } else {\n              queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam.value));\n              this.query[queryParamName] = encodeURIComponent(queryParam.value);\n            }\n          }\n        }\n      } // end-of-for\n      // append the queryString\n      this.url += queryParams.join(\"&\");\n    }\n    // add headers to the request if they are provided\n    if (options.headers) {\n      const headers = options.headers;\n      for (const headerName of Object.keys(options.headers)) {\n        this.headers.set(headerName, headers[headerName]);\n      }\n    }\n    // ensure accept-language is set correctly\n    if (!this.headers.get(\"accept-language\")) {\n      this.headers.set(\"accept-language\", \"en-US\");\n    }\n    // ensure the request-id is set correctly\n    if (!this.headers.get(\"x-ms-client-request-id\") && !options.disableClientRequestId) {\n      this.headers.set(\"x-ms-client-request-id\", this.requestId);\n    }\n    // default\n    if (!this.headers.get(\"Content-Type\")) {\n      this.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n    }\n    // set the request body. request.js automatically sets the Content-Length request header, so we need not set it explicitly\n    this.body = options.body;\n    if (options.body !== undefined && options.body !== null) {\n      // body as a stream special case. set the body as-is and check for some special request headers specific to sending a stream.\n      if (options.bodyIsStream) {\n        if (!this.headers.get(\"Transfer-Encoding\")) {\n          this.headers.set(\"Transfer-Encoding\", \"chunked\");\n        }\n        if (this.headers.get(\"Content-Type\") !== \"application/octet-stream\") {\n          this.headers.set(\"Content-Type\", \"application/octet-stream\");\n        }\n      } else {\n        if (options.serializationMapper) {\n          this.body = new Serializer(options.mappers).serialize(options.serializationMapper, options.body, \"requestBody\");\n        }\n        if (!options.disableJsonStringifyOnBody) {\n          this.body = JSON.stringify(options.body);\n        }\n      }\n    }\n    if (options.spanOptions) {\n      this.spanOptions = options.spanOptions;\n    }\n    if (options.tracingContext) {\n      this.tracingContext = options.tracingContext;\n    }\n    this.abortSignal = options.abortSignal;\n    this.onDownloadProgress = options.onDownloadProgress;\n    this.onUploadProgress = options.onUploadProgress;\n    return this;\n  }\n  /**\n   * Clone this WebResource HTTP request object.\n   * @returns The clone of this WebResource HTTP request object.\n   */\n  clone() {\n    const result = new WebResource(this.url, this.method, this.body, this.query, this.headers && this.headers.clone(), this.streamResponseBody, this.withCredentials, this.abortSignal, this.timeout, this.onUploadProgress, this.onDownloadProgress, this.proxySettings, this.keepAlive, this.decompressResponse, this.streamResponseStatusCodes);\n    if (this.formData) {\n      result.formData = this.formData;\n    }\n    if (this.operationSpec) {\n      result.operationSpec = this.operationSpec;\n    }\n    if (this.shouldDeserialize) {\n      result.shouldDeserialize = this.shouldDeserialize;\n    }\n    if (this.operationResponseGetter) {\n      result.operationResponseGetter = this.operationResponseGetter;\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["HttpHeaders","isHttpHeadersLike","Serializer","generateUuid","isWebResourceLike","object","castObject","url","method","headers","validateRequestProperties","prepare","clone","WebResource","constructor","body","query","streamResponseBody","withCredentials","abortSignal","timeout","onUploadProgress","onDownloadProgress","proxySettings","keepAlive","decompressResponse","streamResponseStatusCodes","formData","undefined","requestId","get","Error","options","valueOf","pathTemplate","validMethods","indexOf","toUpperCase","JSON","stringify","pathParameters","baseUrl","endsWith","startsWith","slice","segments","match","length","forEach","item","pathParamName","pathParam","stringifiedPathParameters","replace","encodeURIComponent","value","skipUrlEncoding","queryParameters","queryParams","queryParamName","queryParam","push","join","headerName","Object","keys","set","disableClientRequestId","bodyIsStream","serializationMapper","mappers","serialize","disableJsonStringifyOnBody","spanOptions","tracingContext","result","operationSpec","shouldDeserialize","operationResponseGetter"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\webResource.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Context, SpanOptions } from \"@azure/core-tracing\";\nimport { HttpHeaders, HttpHeadersLike, isHttpHeadersLike } from \"./httpHeaders\";\nimport { Mapper, Serializer } from \"./serializer\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { OperationSpec } from \"./operationSpec\";\nimport { ProxySettings } from \"./serviceClient\";\nimport { SerializerOptions } from \"./util/serializer.common\";\nimport { generateUuid } from \"./util/utils\";\n\n/**\n * List of supported HTTP methods.\n */\nexport type HttpMethods =\n  | \"GET\"\n  | \"PUT\"\n  | \"POST\"\n  | \"DELETE\"\n  | \"PATCH\"\n  | \"HEAD\"\n  | \"OPTIONS\"\n  | \"TRACE\";\n\n/**\n * Possible HTTP request body types\n */\nexport type HttpRequestBody =\n  | Blob\n  | string\n  | ArrayBuffer\n  | ArrayBufferView\n  | (() => NodeJS.ReadableStream);\n\n/**\n * Fired in response to upload or download progress.\n */\nexport type TransferProgressEvent = {\n  /**\n   * The number of bytes loaded so far.\n   */\n  loadedBytes: number;\n};\n\n/**\n * A description of a HTTP request to be made to a remote server.\n */\nexport interface WebResourceLike {\n  /**\n   * The URL being accessed by the request.\n   */\n  url: string;\n  /**\n   * The HTTP method to use when making the request.\n   */\n  method: HttpMethods;\n  /**\n   * The HTTP body contents of the request.\n   */\n  body?: any;\n  /**\n   * The HTTP headers to use when making the request.\n   */\n  headers: HttpHeadersLike;\n  /**\n   * Whether or not the body of the HttpOperationResponse should be treated as a stream.\n   * @deprecated Use streamResponseStatusCodes property instead.\n   */\n  streamResponseBody?: boolean;\n  /**\n   * A list of response status codes whose corresponding HttpOperationResponse body should be treated as a stream.\n   */\n  streamResponseStatusCodes?: Set<number>;\n  /**\n   * Whether or not the HttpOperationResponse should be deserialized. If this is undefined, then the\n   * HttpOperationResponse should be deserialized.\n   */\n  shouldDeserialize?: boolean | ((response: HttpOperationResponse) => boolean);\n  /**\n   * A function that returns the proper OperationResponse for the given OperationSpec and\n   * HttpOperationResponse combination. If this is undefined, then a simple status code lookup will\n   * be used.\n   */\n  operationResponseGetter?: (\n    operationSpec: OperationSpec,\n    response: HttpOperationResponse\n  ) => undefined | OperationResponse;\n  /**\n   * Form data, used to build the request body.\n   */\n  formData?: any;\n  /**\n   * A query string represented as an object.\n   */\n  query?: { [key: string]: any };\n  /**\n   * Used to parse the response.\n   */\n  operationSpec?: OperationSpec;\n  /**\n   * If credentials (cookies) should be sent along during an XHR.\n   */\n  withCredentials: boolean;\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   * If the request is terminated, an `AbortError` is thrown.\n   */\n  timeout: number;\n  /**\n   * Proxy configuration.\n   */\n  proxySettings?: ProxySettings;\n  /**\n   * If the connection should be reused.\n   */\n  keepAlive?: boolean;\n  /**\n   * Whether or not to decompress response according to Accept-Encoding header (node-fetch only)\n   */\n  decompressResponse?: boolean;\n  /**\n   * A unique identifier for the request. Used for logging and tracing.\n   */\n  requestId: string;\n\n  /**\n   * Signal of an abort controller. Can be used to abort both sending a network request and waiting for a response.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Callback which fires upon download progress. */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Tracing: Context used when creating spans.\n   */\n  tracingContext?: Context;\n\n  /**\n   * Validates that the required properties such as method, url, headers[\"Content-Type\"],\n   * headers[\"accept-language\"] are defined. It will throw an error if one of the above\n   * mentioned properties are not defined.\n   */\n  validateRequestProperties(): void;\n\n  /**\n   * Sets options on the request.\n   */\n  prepare(options: RequestPrepareOptions): WebResourceLike;\n  /**\n   * Clone this request object.\n   */\n  clone(): WebResourceLike;\n}\n\nexport function isWebResourceLike(object: unknown): object is WebResourceLike {\n  if (object && typeof object === \"object\") {\n    const castObject = object as {\n      url: unknown;\n      method: unknown;\n      headers: unknown;\n      validateRequestProperties: unknown;\n      prepare: unknown;\n      clone: unknown;\n    };\n    if (\n      typeof castObject.url === \"string\" &&\n      typeof castObject.method === \"string\" &&\n      typeof castObject.headers === \"object\" &&\n      isHttpHeadersLike(castObject.headers) &&\n      typeof castObject.validateRequestProperties === \"function\" &&\n      typeof castObject.prepare === \"function\" &&\n      typeof castObject.clone === \"function\"\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Creates a new WebResource object.\n *\n * This class provides an abstraction over a REST call by being library / implementation agnostic and wrapping the necessary\n * properties to initiate a request.\n */\nexport class WebResource implements WebResourceLike {\n  /**\n   * URL of the outgoing request.\n   */\n  url: string;\n  /**\n   * HTTP method to use.\n   */\n  method: HttpMethods;\n  /**\n   * Request body.\n   */\n  body?: any;\n  /**\n   * HTTP headers.\n   */\n  headers: HttpHeadersLike;\n  /**\n   * Whether or not the body of the HttpOperationResponse should be treated as a stream.\n   * @deprecated Use streamResponseStatusCodes property instead.\n   */\n  streamResponseBody?: boolean;\n  /**\n   * A list of status codes whose corresponding HttpOperationResponse body should be treated as a stream.\n   */\n  streamResponseStatusCodes?: Set<number>;\n  /**\n   * Whether or not the HttpOperationResponse should be deserialized. If this is undefined, then the\n   * HttpOperationResponse should be deserialized.\n   */\n  shouldDeserialize?: boolean | ((response: HttpOperationResponse) => boolean);\n  /**\n   * A function that returns the proper OperationResponse for the given OperationSpec and\n   * HttpOperationResponse combination. If this is undefined, then a simple status code lookup will\n   * be used.\n   */\n  operationResponseGetter?: (\n    operationSpec: OperationSpec,\n    response: HttpOperationResponse\n  ) => undefined | OperationResponse;\n  /**\n   * Form data, used to build the request body.\n   */\n  formData?: any;\n  /**\n   * Query added to the URL.\n   */\n  query?: { [key: string]: any };\n  /**\n   * Specification of the HTTP request.\n   */\n  operationSpec?: OperationSpec;\n  /**\n   * Whether to send credentials (via cookies, authorization headers, or TLS client certificates) when making a request in the browser to a cross-site destination.\n   */\n  withCredentials: boolean;\n  /**\n   * How long to wait in milliseconds before aborting the request.\n   */\n  timeout: number;\n  /**\n   * What proxy to use, if necessary.\n   */\n  proxySettings?: ProxySettings;\n  /**\n   * Whether to keep the HTTP connections alive throughout requests.\n   */\n  keepAlive?: boolean;\n  /**\n   * Whether or not to decompress response according to Accept-Encoding header (node-fetch only)\n   */\n  decompressResponse?: boolean;\n  /**\n   * Unique identifier of the outgoing request.\n   */\n  requestId: string;\n\n  /**\n   * Signal of an abort controller. Can be used to abort both sending a network request and waiting for a response.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Callback which fires upon download progress.\n   */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Tracing: Options used to create a span when tracing is enabled.\n   */\n  spanOptions?: SpanOptions;\n\n  /**\n   * Tracing: Context used when creating Spans.\n   */\n  tracingContext?: Context;\n\n  constructor(\n    url?: string,\n    method?: HttpMethods,\n    body?: unknown,\n    query?: { [key: string]: any },\n    headers?: { [key: string]: any } | HttpHeadersLike,\n    streamResponseBody?: boolean,\n    withCredentials?: boolean,\n    abortSignal?: AbortSignalLike,\n    timeout?: number,\n    onUploadProgress?: (progress: TransferProgressEvent) => void,\n    onDownloadProgress?: (progress: TransferProgressEvent) => void,\n    proxySettings?: ProxySettings,\n    keepAlive?: boolean,\n    decompressResponse?: boolean,\n    streamResponseStatusCodes?: Set<number>\n  ) {\n    this.streamResponseBody = streamResponseBody;\n    this.streamResponseStatusCodes = streamResponseStatusCodes;\n    this.url = url || \"\";\n    this.method = method || \"GET\";\n    this.headers = isHttpHeadersLike(headers) ? headers : new HttpHeaders(headers);\n    this.body = body;\n    this.query = query;\n    this.formData = undefined;\n    this.withCredentials = withCredentials || false;\n    this.abortSignal = abortSignal;\n    this.timeout = timeout || 0;\n    this.onUploadProgress = onUploadProgress;\n    this.onDownloadProgress = onDownloadProgress;\n    this.proxySettings = proxySettings;\n    this.keepAlive = keepAlive;\n    this.decompressResponse = decompressResponse;\n    this.requestId = this.headers.get(\"x-ms-client-request-id\") || generateUuid();\n  }\n\n  /**\n   * Validates that the required properties such as method, url, headers[\"Content-Type\"],\n   * headers[\"accept-language\"] are defined. It will throw an error if one of the above\n   * mentioned properties are not defined.\n   */\n  validateRequestProperties(): void {\n    if (!this.method) {\n      throw new Error(\"WebResource.method is required.\");\n    }\n    if (!this.url) {\n      throw new Error(\"WebResource.url is required.\");\n    }\n  }\n\n  /**\n   * Prepares the request.\n   * @param options - Options to provide for preparing the request.\n   * @returns Returns the prepared WebResource (HTTP Request) object that needs to be given to the request pipeline.\n   */\n  prepare(options: RequestPrepareOptions): WebResource {\n    if (!options) {\n      throw new Error(\"options object is required\");\n    }\n\n    if (\n      options.method === undefined ||\n      options.method === null ||\n      typeof options.method.valueOf() !== \"string\"\n    ) {\n      throw new Error(\"options.method must be a string.\");\n    }\n\n    if (options.url && options.pathTemplate) {\n      throw new Error(\n        \"options.url and options.pathTemplate are mutually exclusive. Please provide exactly one of them.\"\n      );\n    }\n\n    if (\n      (options.pathTemplate === undefined ||\n        options.pathTemplate === null ||\n        typeof options.pathTemplate.valueOf() !== \"string\") &&\n      (options.url === undefined ||\n        options.url === null ||\n        typeof options.url.valueOf() !== \"string\")\n    ) {\n      throw new Error(\"Please provide exactly one of options.pathTemplate or options.url.\");\n    }\n\n    // set the url if it is provided.\n    if (options.url) {\n      if (typeof options.url !== \"string\") {\n        throw new Error('options.url must be of type \"string\".');\n      }\n      this.url = options.url;\n    }\n\n    // set the method\n    if (options.method) {\n      const validMethods = [\"GET\", \"PUT\", \"HEAD\", \"DELETE\", \"OPTIONS\", \"POST\", \"PATCH\", \"TRACE\"];\n      if (validMethods.indexOf(options.method.toUpperCase()) === -1) {\n        throw new Error(\n          'The provided method \"' +\n            options.method +\n            '\" is invalid. Supported HTTP methods are: ' +\n            JSON.stringify(validMethods)\n        );\n      }\n    }\n    this.method = options.method.toUpperCase() as HttpMethods;\n\n    // construct the url if path template is provided\n    if (options.pathTemplate) {\n      const { pathTemplate, pathParameters } = options;\n      if (typeof pathTemplate !== \"string\") {\n        throw new Error('options.pathTemplate must be of type \"string\".');\n      }\n      if (!options.baseUrl) {\n        options.baseUrl = \"https://management.azure.com\";\n      }\n      const baseUrl = options.baseUrl;\n      let url =\n        baseUrl +\n        (baseUrl.endsWith(\"/\") ? \"\" : \"/\") +\n        (pathTemplate.startsWith(\"/\") ? pathTemplate.slice(1) : pathTemplate);\n      const segments = url.match(/({[\\w-]*\\s*[\\w-]*})/gi);\n      if (segments && segments.length) {\n        if (!pathParameters) {\n          throw new Error(\n            `pathTemplate: ${pathTemplate} has been provided. Hence, options.pathParameters must also be provided.`\n          );\n        }\n        segments.forEach(function (item) {\n          const pathParamName = item.slice(1, -1);\n          const pathParam = (pathParameters as { [key: string]: any })[pathParamName];\n          if (\n            pathParam === null ||\n            pathParam === undefined ||\n            !(typeof pathParam === \"string\" || typeof pathParam === \"object\")\n          ) {\n            const stringifiedPathParameters = JSON.stringify(pathParameters, undefined, 2);\n            throw new Error(\n              `pathTemplate: ${pathTemplate} contains the path parameter ${pathParamName}` +\n                ` however, it is not present in parameters: ${stringifiedPathParameters}.` +\n                `The value of the path parameter can either be a \"string\" of the form { ${pathParamName}: \"some sample value\" } or ` +\n                `it can be an \"object\" of the form { \"${pathParamName}\": { value: \"some sample value\", skipUrlEncoding: true } }.`\n            );\n          }\n\n          if (typeof pathParam.valueOf() === \"string\") {\n            url = url.replace(item, encodeURIComponent(pathParam));\n          }\n\n          if (typeof pathParam.valueOf() === \"object\") {\n            if (!pathParam.value) {\n              throw new Error(\n                `options.pathParameters[${pathParamName}] is of type \"object\" but it does not contain a \"value\" property.`\n              );\n            }\n            if (pathParam.skipUrlEncoding) {\n              url = url.replace(item, pathParam.value);\n            } else {\n              url = url.replace(item, encodeURIComponent(pathParam.value));\n            }\n          }\n        });\n      }\n      this.url = url;\n    }\n\n    // append query parameters to the url if they are provided. They can be provided with pathTemplate or url option.\n    if (options.queryParameters) {\n      const queryParameters = options.queryParameters;\n      if (typeof queryParameters !== \"object\") {\n        throw new Error(\n          `options.queryParameters must be of type object. It should be a JSON object ` +\n            `of \"query-parameter-name\" as the key and the \"query-parameter-value\" as the value. ` +\n            `The \"query-parameter-value\" may be fo type \"string\" or an \"object\" of the form { value: \"query-parameter-value\", skipUrlEncoding: true }.`\n        );\n      }\n      // append question mark if it is not present in the url\n      if (this.url && this.url.indexOf(\"?\") === -1) {\n        this.url += \"?\";\n      }\n      // construct queryString\n      const queryParams = [];\n      // We need to populate this.query as a dictionary if the request is being used for Sway's validateRequest().\n      this.query = {};\n      for (const queryParamName in queryParameters) {\n        const queryParam: any = queryParameters[queryParamName];\n        if (queryParam) {\n          if (typeof queryParam === \"string\") {\n            queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam));\n            this.query[queryParamName] = encodeURIComponent(queryParam);\n          } else if (typeof queryParam === \"object\") {\n            if (!queryParam.value) {\n              throw new Error(\n                `options.queryParameters[${queryParamName}] is of type \"object\" but it does not contain a \"value\" property.`\n              );\n            }\n            if (queryParam.skipUrlEncoding) {\n              queryParams.push(queryParamName + \"=\" + queryParam.value);\n              this.query[queryParamName] = queryParam.value;\n            } else {\n              queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam.value));\n              this.query[queryParamName] = encodeURIComponent(queryParam.value);\n            }\n          }\n        }\n      } // end-of-for\n      // append the queryString\n      this.url += queryParams.join(\"&\");\n    }\n\n    // add headers to the request if they are provided\n    if (options.headers) {\n      const headers = options.headers;\n      for (const headerName of Object.keys(options.headers)) {\n        this.headers.set(headerName, headers[headerName]);\n      }\n    }\n    // ensure accept-language is set correctly\n    if (!this.headers.get(\"accept-language\")) {\n      this.headers.set(\"accept-language\", \"en-US\");\n    }\n    // ensure the request-id is set correctly\n    if (!this.headers.get(\"x-ms-client-request-id\") && !options.disableClientRequestId) {\n      this.headers.set(\"x-ms-client-request-id\", this.requestId);\n    }\n\n    // default\n    if (!this.headers.get(\"Content-Type\")) {\n      this.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n    }\n\n    // set the request body. request.js automatically sets the Content-Length request header, so we need not set it explicitly\n    this.body = options.body;\n    if (options.body !== undefined && options.body !== null) {\n      // body as a stream special case. set the body as-is and check for some special request headers specific to sending a stream.\n      if (options.bodyIsStream) {\n        if (!this.headers.get(\"Transfer-Encoding\")) {\n          this.headers.set(\"Transfer-Encoding\", \"chunked\");\n        }\n        if (this.headers.get(\"Content-Type\") !== \"application/octet-stream\") {\n          this.headers.set(\"Content-Type\", \"application/octet-stream\");\n        }\n      } else {\n        if (options.serializationMapper) {\n          this.body = new Serializer(options.mappers).serialize(\n            options.serializationMapper,\n            options.body,\n            \"requestBody\"\n          );\n        }\n        if (!options.disableJsonStringifyOnBody) {\n          this.body = JSON.stringify(options.body);\n        }\n      }\n    }\n\n    if (options.spanOptions) {\n      this.spanOptions = options.spanOptions;\n    }\n\n    if (options.tracingContext) {\n      this.tracingContext = options.tracingContext;\n    }\n\n    this.abortSignal = options.abortSignal;\n    this.onDownloadProgress = options.onDownloadProgress;\n    this.onUploadProgress = options.onUploadProgress;\n\n    return this;\n  }\n\n  /**\n   * Clone this WebResource HTTP request object.\n   * @returns The clone of this WebResource HTTP request object.\n   */\n  clone(): WebResource {\n    const result = new WebResource(\n      this.url,\n      this.method,\n      this.body,\n      this.query,\n      this.headers && this.headers.clone(),\n      this.streamResponseBody,\n      this.withCredentials,\n      this.abortSignal,\n      this.timeout,\n      this.onUploadProgress,\n      this.onDownloadProgress,\n      this.proxySettings,\n      this.keepAlive,\n      this.decompressResponse,\n      this.streamResponseStatusCodes\n    );\n\n    if (this.formData) {\n      result.formData = this.formData;\n    }\n\n    if (this.operationSpec) {\n      result.operationSpec = this.operationSpec;\n    }\n\n    if (this.shouldDeserialize) {\n      result.shouldDeserialize = this.shouldDeserialize;\n    }\n\n    if (this.operationResponseGetter) {\n      result.operationResponseGetter = this.operationResponseGetter;\n    }\n\n    return result;\n  }\n}\n\n/**\n * Options to prepare an outgoing HTTP request.\n */\nexport interface RequestPrepareOptions {\n  /**\n   * The HTTP request method. Valid values are \"GET\", \"PUT\", \"HEAD\", \"DELETE\", \"OPTIONS\", \"POST\",\n   * or \"PATCH\".\n   */\n  method: HttpMethods;\n  /**\n   * The request url. It may or may not have query parameters in it. Either provide the \"url\" or\n   * provide the \"pathTemplate\" in the options object. Both the options are mutually exclusive.\n   */\n  url?: string;\n  /**\n   * A dictionary of query parameters to be appended to the url, where\n   * the \"key\" is the \"query-parameter-name\" and the \"value\" is the \"query-parameter-value\".\n   * The \"query-parameter-value\" can be of type \"string\" or it can be of type \"object\".\n   * The \"object\" format should be used when you want to skip url encoding. While using the object format,\n   * the object must have a property named value which provides the \"query-parameter-value\".\n   * Example:\n   *    - query-parameter-value in \"object\" format: `{ \"query-parameter-name\": { value: \"query-parameter-value\", skipUrlEncoding: true } }`\n   *    - query-parameter-value in \"string\" format: `{ \"query-parameter-name\": \"query-parameter-value\"}`.\n   * Note: \"If options.url already has some query parameters, then the value provided in options.queryParameters will be appended to the url.\n   */\n  queryParameters?: { [key: string]: any | ParameterValue };\n  /**\n   * The path template of the request url. Either provide the \"url\" or provide the \"pathTemplate\" in\n   * the options object. Both the options are mutually exclusive.\n   * Example: `/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}`\n   */\n  pathTemplate?: string;\n  /**\n   * The base url of the request. Default value is: \"https://management.azure.com\". This is\n   * applicable only with pathTemplate. If you are providing options.url then it is expected that\n   * you provide the complete url.\n   */\n  baseUrl?: string;\n  /**\n   * A dictionary of path parameters that need to be replaced with actual values in the pathTemplate.\n   * Here the key is the \"path-parameter-name\" and the value is the \"path-parameter-value\".\n   * The \"path-parameter-value\" can be of type \"string\"  or it can be of type \"object\".\n   * The \"object\" format should be used when you want to skip url encoding. While using the object format,\n   * the object must have a property named value which provides the \"path-parameter-value\".\n   * Example:\n   *    - path-parameter-value in \"object\" format: `{ \"path-parameter-name\": { value: \"path-parameter-value\", skipUrlEncoding: true } }`\n   *    - path-parameter-value in \"string\" format: `{ \"path-parameter-name\": \"path-parameter-value\" }`.\n   */\n  pathParameters?: { [key: string]: any | ParameterValue };\n  /**\n   * Form data, used to build the request body.\n   */\n  formData?: { [key: string]: any };\n  /**\n   * A dictionary of request headers that need to be applied to the request.\n   * Here the key is the \"header-name\" and the value is the \"header-value\". The header-value MUST be of type string.\n   *  - ContentType must be provided with the key name as \"Content-Type\". Default value \"application/json; charset=utf-8\".\n   *  - \"Transfer-Encoding\" is set to \"chunked\" by default if \"options.bodyIsStream\" is set to true.\n   *  - \"Content-Type\" is set to \"application/octet-stream\" by default if \"options.bodyIsStream\" is set to true.\n   *  - \"accept-language\" by default is set to \"en-US\"\n   *  - \"x-ms-client-request-id\" by default is set to a new Guid. To not generate a guid for the request, please set options.disableClientRequestId to true\n   */\n  headers?: { [key: string]: any };\n  /**\n   * When set to true, instructs the client to not set \"x-ms-client-request-id\" header to a new Guid().\n   */\n  disableClientRequestId?: boolean;\n  /**\n   * The request body. It can be of any type. This value will be serialized if it is not a stream.\n   */\n  body?: any;\n  /**\n   * Provides information on how to serialize the request body.\n   */\n  serializationMapper?: Mapper;\n  /**\n   * A dictionary of mappers that may be used while [de]serialization.\n   */\n  mappers?: { [x: string]: any };\n  /**\n   * Provides information on how to deserialize the response body.\n   */\n  deserializationMapper?: Record<string, unknown>;\n  /**\n   * Indicates whether this method should JSON.stringify() the request body. Default value: false.\n   */\n  disableJsonStringifyOnBody?: boolean;\n  /**\n   * Indicates whether the request body is a stream (useful for file upload scenarios).\n   */\n  bodyIsStream?: boolean;\n  /**\n   * Signal of an abort controller. Can be used to abort both sending a network request and waiting for a response.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Allows keeping track of the progress of uploading the outgoing request.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n  /**\n   * Allows keeping track of the progress of downloading the incoming response.\n   */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n  /**\n   * Tracing: Options used to create a span when tracing is enabled.\n   */\n  spanOptions?: SpanOptions;\n  /**\n   * Tracing: Context used when creating spans.\n   */\n  tracingContext?: Context;\n}\n\n/**\n * The Parameter value provided for path or query parameters in RequestPrepareOptions\n */\nexport interface ParameterValue {\n  /**\n   * Value of the parameter.\n   */\n  value: any;\n  /**\n   * Disables URL encoding if set to true.\n   */\n  skipUrlEncoding: boolean;\n  /**\n   * Parameter values may contain any other property.\n   */\n  [key: string]: any;\n}\n\n/**\n * Describes the base structure of the options object that will be used in every operation.\n */\nexport interface RequestOptionsBase {\n  /**\n   * will be applied before the request is sent.\n   */\n  customHeaders?: { [key: string]: string };\n\n  /**\n   * Signal of an abort controller. Can be used to abort both sending a network request and waiting for a response.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   * If the request is terminated, an `AbortError` is thrown.\n   */\n  timeout?: number;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Callback which fires upon download progress.\n   */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Whether or not the HttpOperationResponse should be deserialized. If this is undefined, then the\n   * HttpOperationResponse should be deserialized.\n   */\n  shouldDeserialize?: boolean | ((response: HttpOperationResponse) => boolean);\n\n  /**\n   * Tracing: Context used when creating spans.\n   */\n  tracingContext?: Context;\n\n  /**\n   * May contain other properties.\n   */\n  [key: string]: any;\n\n  /**\n   * Options to override XML parsing/building behavior.\n   */\n  serializerOptions?: SerializerOptions;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}