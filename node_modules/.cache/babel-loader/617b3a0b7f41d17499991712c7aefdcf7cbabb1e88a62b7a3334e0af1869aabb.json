{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { DEFAULT_CLIENT_MAX_RETRY_INTERVAL, DEFAULT_CLIENT_MIN_RETRY_INTERVAL, DEFAULT_CLIENT_RETRY_COUNT, DEFAULT_CLIENT_RETRY_INTERVAL, isNumber, shouldRetry, updateRetryData } from \"../util/exponentialBackoffStrategy\";\nimport { delay } from \"@azure/core-util\";\n/**\n * A policy that retries when there's a system error, identified by the codes \"ETIMEDOUT\", \"ESOCKETTIMEDOUT\", \"ECONNREFUSED\", \"ECONNRESET\" or \"ENOENT\".\n * @param retryCount - Maximum number of retries.\n * @param retryInterval - The client retry interval, in milliseconds.\n * @param minRetryInterval - The minimum retry interval, in milliseconds.\n * @param maxRetryInterval - The maximum retry interval, in milliseconds.\n * @returns An instance of the {@link SystemErrorRetryPolicy}\n */\nexport function systemErrorRetryPolicy(retryCount, retryInterval, minRetryInterval, maxRetryInterval) {\n  return {\n    create: function create(nextPolicy, options) {\n      return new SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);\n    }\n  };\n}\n/**\n * A policy that retries when there's a system error, identified by the codes \"ETIMEDOUT\", \"ESOCKETTIMEDOUT\", \"ECONNREFUSED\", \"ECONNRESET\" or \"ENOENT\".\n * @param retryCount - The client retry count.\n * @param retryInterval - The client retry interval, in milliseconds.\n * @param minRetryInterval - The minimum retry interval, in milliseconds.\n * @param maxRetryInterval - The maximum retry interval, in milliseconds.\n */\nexport var SystemErrorRetryPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {\n  _inherits(SystemErrorRetryPolicy, _BaseRequestPolicy);\n  var _super = _createSuper(SystemErrorRetryPolicy);\n  function SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval) {\n    var _this;\n    _classCallCheck(this, SystemErrorRetryPolicy);\n    _this = _super.call(this, nextPolicy, options);\n    _this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;\n    _this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;\n    _this.minRetryInterval = isNumber(minRetryInterval) ? minRetryInterval : DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    _this.maxRetryInterval = isNumber(maxRetryInterval) ? maxRetryInterval : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n    return _this;\n  }\n  _createClass(SystemErrorRetryPolicy, [{\n    key: \"sendRequest\",\n    value: function sendRequest(request) {\n      var _this2 = this;\n      return this._nextPolicy.sendRequest(request.clone()).catch(function (error) {\n        return retry(_this2, request, error.response, error);\n      });\n    }\n  }]);\n  return SystemErrorRetryPolicy;\n}(BaseRequestPolicy);\nfunction retry(_x, _x2, _x3, _x4, _x5) {\n  return _retry.apply(this, arguments);\n}\nfunction _retry() {\n  _retry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(policy, request, operationResponse, err, retryData) {\n    var shouldPolicyRetry;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          shouldPolicyRetry = function _shouldPolicyRetry(_response, error) {\n            if (error && error.code && (error.code === \"ETIMEDOUT\" || error.code === \"ESOCKETTIMEDOUT\" || error.code === \"ECONNREFUSED\" || error.code === \"ECONNRESET\" || error.code === \"ENOENT\")) {\n              return true;\n            }\n            return false;\n          };\n          retryData = updateRetryData(policy, retryData, err);\n          if (!shouldRetry(policy.retryCount, shouldPolicyRetry, retryData, operationResponse, err)) {\n            _context.next = 14;\n            break;\n          }\n          _context.prev = 3;\n          _context.next = 6;\n          return delay(retryData.retryInterval);\n        case 6:\n          return _context.abrupt(\"return\", policy._nextPolicy.sendRequest(request.clone()));\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](3);\n          return _context.abrupt(\"return\", retry(policy, request, operationResponse, _context.t0, retryData));\n        case 12:\n          _context.next = 17;\n          break;\n        case 14:\n          if (!err) {\n            _context.next = 16;\n            break;\n          }\n          return _context.abrupt(\"return\", Promise.reject(retryData.error));\n        case 16:\n          return _context.abrupt(\"return\", operationResponse);\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[3, 9]]);\n  }));\n  return _retry.apply(this, arguments);\n}","map":{"version":3,"names":["BaseRequestPolicy","DEFAULT_CLIENT_MAX_RETRY_INTERVAL","DEFAULT_CLIENT_MIN_RETRY_INTERVAL","DEFAULT_CLIENT_RETRY_COUNT","DEFAULT_CLIENT_RETRY_INTERVAL","isNumber","shouldRetry","updateRetryData","delay","systemErrorRetryPolicy","retryCount","retryInterval","minRetryInterval","maxRetryInterval","create","nextPolicy","options","SystemErrorRetryPolicy","_BaseRequestPolicy","_inherits","_super","_createSuper","_this","_classCallCheck","call","_createClass","key","value","sendRequest","request","_this2","_nextPolicy","clone","catch","error","retry","response","_x","_x2","_x3","_x4","_x5","_retry","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","policy","operationResponse","err","retryData","shouldPolicyRetry","wrap","_callee$","_context","prev","next","_shouldPolicyRetry","_response","code","abrupt","t0","Promise","reject","stop"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\policies\\systemErrorRetryPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport {\n  DEFAULT_CLIENT_MAX_RETRY_INTERVAL,\n  DEFAULT_CLIENT_MIN_RETRY_INTERVAL,\n  DEFAULT_CLIENT_RETRY_COUNT,\n  DEFAULT_CLIENT_RETRY_INTERVAL,\n  RetryData,\n  RetryError,\n  isNumber,\n  shouldRetry,\n  updateRetryData,\n} from \"../util/exponentialBackoffStrategy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport { delay } from \"@azure/core-util\";\n\n/**\n * A policy that retries when there's a system error, identified by the codes \"ETIMEDOUT\", \"ESOCKETTIMEDOUT\", \"ECONNREFUSED\", \"ECONNRESET\" or \"ENOENT\".\n * @param retryCount - Maximum number of retries.\n * @param retryInterval - The client retry interval, in milliseconds.\n * @param minRetryInterval - The minimum retry interval, in milliseconds.\n * @param maxRetryInterval - The maximum retry interval, in milliseconds.\n * @returns An instance of the {@link SystemErrorRetryPolicy}\n */\nexport function systemErrorRetryPolicy(\n  retryCount?: number,\n  retryInterval?: number,\n  minRetryInterval?: number,\n  maxRetryInterval?: number\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new SystemErrorRetryPolicy(\n        nextPolicy,\n        options,\n        retryCount,\n        retryInterval,\n        minRetryInterval,\n        maxRetryInterval\n      );\n    },\n  };\n}\n\n/**\n * A policy that retries when there's a system error, identified by the codes \"ETIMEDOUT\", \"ESOCKETTIMEDOUT\", \"ECONNREFUSED\", \"ECONNRESET\" or \"ENOENT\".\n * @param retryCount - The client retry count.\n * @param retryInterval - The client retry interval, in milliseconds.\n * @param minRetryInterval - The minimum retry interval, in milliseconds.\n * @param maxRetryInterval - The maximum retry interval, in milliseconds.\n */\nexport class SystemErrorRetryPolicy extends BaseRequestPolicy {\n  retryCount: number;\n  retryInterval: number;\n  minRetryInterval: number;\n  maxRetryInterval: number;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryCount?: number,\n    retryInterval?: number,\n    minRetryInterval?: number,\n    maxRetryInterval?: number\n  ) {\n    super(nextPolicy, options);\n    this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.minRetryInterval = isNumber(minRetryInterval)\n      ? minRetryInterval\n      : DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    this.maxRetryInterval = isNumber(maxRetryInterval)\n      ? maxRetryInterval\n      : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .catch((error) => retry(this, request, error.response, error));\n  }\n}\n\nasync function retry(\n  policy: SystemErrorRetryPolicy,\n  request: WebResourceLike,\n  operationResponse: HttpOperationResponse,\n  err?: RetryError,\n  retryData?: RetryData\n): Promise<HttpOperationResponse> {\n  retryData = updateRetryData(policy, retryData, err);\n\n  function shouldPolicyRetry(_response?: HttpOperationResponse, error?: RetryError): boolean {\n    if (\n      error &&\n      error.code &&\n      (error.code === \"ETIMEDOUT\" ||\n        error.code === \"ESOCKETTIMEDOUT\" ||\n        error.code === \"ECONNREFUSED\" ||\n        error.code === \"ECONNRESET\" ||\n        error.code === \"ENOENT\")\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  if (shouldRetry(policy.retryCount, shouldPolicyRetry, retryData, operationResponse, err)) {\n    // If previous operation ended with an error and the policy allows a retry, do that\n    try {\n      await delay(retryData.retryInterval);\n      return policy._nextPolicy.sendRequest(request.clone());\n    } catch (nestedErr: any) {\n      return retry(policy, request, operationResponse, nestedErr, retryData);\n    }\n  } else {\n    if (err) {\n      // If the operation failed in the end, return all errors instead of just the last one\n      return Promise.reject(retryData.error);\n    }\n    return operationResponse;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}