{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isObjectWithProperties } from \"./typeguards\";\n/**\n * A static name/key-based credential that supports updating\n * the underlying name and key values.\n */\nexport class AzureNamedKeyCredential {\n  /**\n   * Create an instance of an AzureNamedKeyCredential for use\n   * with a service client.\n   *\n   * @param name - The initial value of the name to use in authentication.\n   * @param key - The initial value of the key to use in authentication.\n   */\n  constructor(name, key) {\n    if (!name || !key) {\n      throw new TypeError(\"name and key must be non-empty strings\");\n    }\n    this._name = name;\n    this._key = key;\n  }\n  /**\n   * The value of the key to be used in authentication.\n   */\n  get key() {\n    return this._key;\n  }\n  /**\n   * The value of the name to be used in authentication.\n   */\n  get name() {\n    return this._name;\n  }\n  /**\n   * Change the value of the key.\n   *\n   * Updates will take effect upon the next request after\n   * updating the key value.\n   *\n   * @param newName - The new name value to be used.\n   * @param newKey - The new key value to be used.\n   */\n  update(newName, newKey) {\n    if (!newName || !newKey) {\n      throw new TypeError(\"newName and newKey must be non-empty strings\");\n    }\n    this._name = newName;\n    this._key = newKey;\n  }\n}\n/**\n * Tests an object to determine whether it implements NamedKeyCredential.\n *\n * @param credential - The assumed NamedKeyCredential to be tested.\n */\nexport function isNamedKeyCredential(credential) {\n  return isObjectWithProperties(credential, [\"name\", \"key\"]) && typeof credential.key === \"string\" && typeof credential.name === \"string\";\n}","map":{"version":3,"names":["isObjectWithProperties","AzureNamedKeyCredential","constructor","name","key","TypeError","_name","_key","update","newName","newKey","isNamedKeyCredential","credential"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-auth\\src\\azureNamedKeyCredential.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isObjectWithProperties } from \"./typeguards\";\n\n/**\n * Represents a credential defined by a static API name and key.\n */\nexport interface NamedKeyCredential {\n  /**\n   * The value of the API key represented as a string\n   */\n  readonly key: string;\n  /**\n   * The value of the API name represented as a string.\n   */\n  readonly name: string;\n}\n\n/**\n * A static name/key-based credential that supports updating\n * the underlying name and key values.\n */\nexport class AzureNamedKeyCredential implements NamedKeyCredential {\n  private _key: string;\n  private _name: string;\n\n  /**\n   * The value of the key to be used in authentication.\n   */\n  public get key(): string {\n    return this._key;\n  }\n\n  /**\n   * The value of the name to be used in authentication.\n   */\n  public get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Create an instance of an AzureNamedKeyCredential for use\n   * with a service client.\n   *\n   * @param name - The initial value of the name to use in authentication.\n   * @param key - The initial value of the key to use in authentication.\n   */\n  constructor(name: string, key: string) {\n    if (!name || !key) {\n      throw new TypeError(\"name and key must be non-empty strings\");\n    }\n\n    this._name = name;\n    this._key = key;\n  }\n\n  /**\n   * Change the value of the key.\n   *\n   * Updates will take effect upon the next request after\n   * updating the key value.\n   *\n   * @param newName - The new name value to be used.\n   * @param newKey - The new key value to be used.\n   */\n  public update(newName: string, newKey: string): void {\n    if (!newName || !newKey) {\n      throw new TypeError(\"newName and newKey must be non-empty strings\");\n    }\n\n    this._name = newName;\n    this._key = newKey;\n  }\n}\n\n/**\n * Tests an object to determine whether it implements NamedKeyCredential.\n *\n * @param credential - The assumed NamedKeyCredential to be tested.\n */\nexport function isNamedKeyCredential(credential: unknown): credential is NamedKeyCredential {\n  return (\n    isObjectWithProperties(credential, [\"name\", \"key\"]) &&\n    typeof credential.key === \"string\" &&\n    typeof credential.name === \"string\"\n  );\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,sBAAsB,QAAQ,cAAc;AAgBrD;;;;AAIA,OAAM,MAAOC,uBAAuB;EAkBlC;;;;;;;EAOAC,YAAYC,IAAY,EAAEC,GAAW;IACnC,IAAI,CAACD,IAAI,IAAI,CAACC,GAAG,EAAE;MACjB,MAAM,IAAIC,SAAS,CAAC,wCAAwC,CAAC;;IAG/D,IAAI,CAACC,KAAK,GAAGH,IAAI;IACjB,IAAI,CAACI,IAAI,GAAGH,GAAG;EACjB;EA5BA;;;EAGA,IAAWA,GAAGA,CAAA;IACZ,OAAO,IAAI,CAACG,IAAI;EAClB;EAEA;;;EAGA,IAAWJ,IAAIA,CAAA;IACb,OAAO,IAAI,CAACG,KAAK;EACnB;EAkBA;;;;;;;;;EASOE,MAAMA,CAACC,OAAe,EAAEC,MAAc;IAC3C,IAAI,CAACD,OAAO,IAAI,CAACC,MAAM,EAAE;MACvB,MAAM,IAAIL,SAAS,CAAC,8CAA8C,CAAC;;IAGrE,IAAI,CAACC,KAAK,GAAGG,OAAO;IACpB,IAAI,CAACF,IAAI,GAAGG,MAAM;EACpB;;AAGF;;;;;AAKA,OAAM,SAAUC,oBAAoBA,CAACC,UAAmB;EACtD,OACEZ,sBAAsB,CAACY,UAAU,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,IACnD,OAAOA,UAAU,CAACR,GAAG,KAAK,QAAQ,IAClC,OAAOQ,UAAU,CAACT,IAAI,KAAK,QAAQ;AAEvC"},"metadata":{},"sourceType":"module","externalDependencies":[]}