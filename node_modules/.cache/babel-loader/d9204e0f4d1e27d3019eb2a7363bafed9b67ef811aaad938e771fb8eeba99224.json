{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { getErrorFromResponse, getOperationLocation, getOperationStatus, getResourceLocation, getStatusFromInitialResponse, inferLroMode, isOperationError, parseRetryAfter } from \"./operation\";\nimport { buildCreatePoller } from \"../poller/poller\";\n/**\n * Creates a poller that can be used to poll a long-running operation.\n * @param lro - Description of the long-running operation\n * @param options - options to configure the poller\n * @returns an initialized poller\n */\nexport function createHttpPoller(_x, _x2) {\n  return _createHttpPoller.apply(this, arguments);\n}\nfunction _createHttpPoller() {\n  _createHttpPoller = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(lro, options) {\n    var _ref, resourceLocationConfig, intervalInMs, processResult, restoreFrom, updateState, withOperationLocation, _ref$resolveOnUnsucce, resolveOnUnsuccessful;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _ref = options || {}, resourceLocationConfig = _ref.resourceLocationConfig, intervalInMs = _ref.intervalInMs, processResult = _ref.processResult, restoreFrom = _ref.restoreFrom, updateState = _ref.updateState, withOperationLocation = _ref.withOperationLocation, _ref$resolveOnUnsucce = _ref.resolveOnUnsuccessful, resolveOnUnsuccessful = _ref$resolveOnUnsucce === void 0 ? false : _ref$resolveOnUnsucce;\n          return _context2.abrupt(\"return\", buildCreatePoller({\n            getStatusFromInitialResponse: getStatusFromInitialResponse,\n            getStatusFromPollResponse: getOperationStatus,\n            isOperationError: isOperationError,\n            getOperationLocation: getOperationLocation,\n            getResourceLocation: getResourceLocation,\n            getPollingInterval: parseRetryAfter,\n            getError: getErrorFromResponse,\n            resolveOnUnsuccessful: resolveOnUnsuccessful\n          })({\n            init: function () {\n              var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                var response, config;\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.next = 2;\n                      return lro.sendInitialRequest();\n                    case 2:\n                      response = _context.sent;\n                      config = inferLroMode({\n                        rawResponse: response.rawResponse,\n                        requestPath: lro.requestPath,\n                        requestMethod: lro.requestMethod,\n                        resourceLocationConfig: resourceLocationConfig\n                      });\n                      return _context.abrupt(\"return\", Object.assign({\n                        response: response,\n                        operationLocation: config === null || config === void 0 ? void 0 : config.operationLocation,\n                        resourceLocation: config === null || config === void 0 ? void 0 : config.resourceLocation\n                      }, (config === null || config === void 0 ? void 0 : config.mode) ? {\n                        metadata: {\n                          mode: config.mode\n                        }\n                      } : {}));\n                    case 5:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _callee);\n              }));\n              function init() {\n                return _init.apply(this, arguments);\n              }\n              return init;\n            }(),\n            poll: lro.sendPollRequest\n          }, {\n            intervalInMs: intervalInMs,\n            withOperationLocation: withOperationLocation,\n            restoreFrom: restoreFrom,\n            updateState: updateState,\n            processResult: processResult ? function (_ref2, state) {\n              var flatResponse = _ref2.flatResponse;\n              return processResult(flatResponse, state);\n            } : function (_ref3) {\n              var flatResponse = _ref3.flatResponse;\n              return flatResponse;\n            }\n          }));\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _createHttpPoller.apply(this, arguments);\n}","map":{"version":3,"names":["getErrorFromResponse","getOperationLocation","getOperationStatus","getResourceLocation","getStatusFromInitialResponse","inferLroMode","isOperationError","parseRetryAfter","buildCreatePoller","createHttpPoller","_x","_x2","_createHttpPoller","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","lro","options","_ref","resourceLocationConfig","intervalInMs","processResult","restoreFrom","updateState","withOperationLocation","_ref$resolveOnUnsucce","resolveOnUnsuccessful","wrap","_callee2$","_context2","prev","next","abrupt","getStatusFromPollResponse","getPollingInterval","getError","init","_init","_callee","response","config","_callee$","_context","sendInitialRequest","sent","rawResponse","requestPath","requestMethod","Object","assign","operationLocation","resourceLocation","mode","metadata","stop","poll","sendPollRequest","_ref2","state","flatResponse","_ref3"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-lro\\src\\http\\poller.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { LongRunningOperation, LroResponse } from \"./models\";\nimport { OperationState, SimplePollerLike } from \"../poller/models\";\nimport {\n  getErrorFromResponse,\n  getOperationLocation,\n  getOperationStatus,\n  getResourceLocation,\n  getStatusFromInitialResponse,\n  inferLroMode,\n  isOperationError,\n  parseRetryAfter,\n} from \"./operation\";\nimport { CreateHttpPollerOptions } from \"./models\";\nimport { buildCreatePoller } from \"../poller/poller\";\n\n/**\n * Creates a poller that can be used to poll a long-running operation.\n * @param lro - Description of the long-running operation\n * @param options - options to configure the poller\n * @returns an initialized poller\n */\nexport async function createHttpPoller<TResult, TState extends OperationState<TResult>>(\n  lro: LongRunningOperation,\n  options?: CreateHttpPollerOptions<TResult, TState>\n): Promise<SimplePollerLike<TState, TResult>> {\n  const {\n    resourceLocationConfig,\n    intervalInMs,\n    processResult,\n    restoreFrom,\n    updateState,\n    withOperationLocation,\n    resolveOnUnsuccessful = false,\n  } = options || {};\n  return buildCreatePoller<LroResponse, TResult, TState>({\n    getStatusFromInitialResponse,\n    getStatusFromPollResponse: getOperationStatus,\n    isOperationError,\n    getOperationLocation,\n    getResourceLocation,\n    getPollingInterval: parseRetryAfter,\n    getError: getErrorFromResponse,\n    resolveOnUnsuccessful,\n  })(\n    {\n      init: async () => {\n        const response = await lro.sendInitialRequest();\n        const config = inferLroMode({\n          rawResponse: response.rawResponse,\n          requestPath: lro.requestPath,\n          requestMethod: lro.requestMethod,\n          resourceLocationConfig,\n        });\n        return {\n          response,\n          operationLocation: config?.operationLocation,\n          resourceLocation: config?.resourceLocation,\n          ...(config?.mode ? { metadata: { mode: config.mode } } : {}),\n        };\n      },\n      poll: lro.sendPollRequest,\n    },\n    {\n      intervalInMs,\n      withOperationLocation,\n      restoreFrom,\n      updateState,\n      processResult: processResult\n        ? ({ flatResponse }, state) => processResult(flatResponse, state)\n        : ({ flatResponse }) => flatResponse as TResult,\n    }\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}