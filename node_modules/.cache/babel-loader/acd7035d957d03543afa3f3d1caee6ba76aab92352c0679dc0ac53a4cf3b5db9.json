{"ast":null,"code":"import _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class representing a BlockBlob. */\nexport var BlockBlob = /*#__PURE__*/function () {\n  /**\n   * Initialize a new instance of the class BlockBlob class.\n   * @param client Reference to the service client\n   */\n  function BlockBlob(client) {\n    _classCallCheck(this, BlockBlob);\n    this.client = client;\n  }\n  /**\n   * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing\n   * block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put\n   * Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a\n   * partial update of the content of a block blob, use the Put Block List operation.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  _createClass(BlockBlob, [{\n    key: \"upload\",\n    value: function upload(contentLength, body, options) {\n      var operationArguments = {\n        contentLength: contentLength,\n        body: body,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, uploadOperationSpec);\n    }\n    /**\n     * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read\n     * from a given URL.  This API is supported beginning with the 2020-04-08 version. Partial updates are\n     * not supported with Put Blob from URL; the content of an existing blob is overwritten with the\n     * content of the new blob.  To perform partial updates to a block blobâ€™s contents using a source URL,\n     * use the Put Block from URL API in conjunction with Put Block List.\n     * @param contentLength The length of the request.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"putBlobFromUrl\",\n    value: function putBlobFromUrl(contentLength, copySource, options) {\n      var operationArguments = {\n        contentLength: contentLength,\n        copySource: copySource,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, putBlobFromUrlOperationSpec);\n    }\n    /**\n     * The Stage Block operation creates a new block to be committed as part of a blob\n     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n     *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n     *                for the blockid parameter must be the same size for each block.\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"stageBlock\",\n    value: function stageBlock(blockId, contentLength, body, options) {\n      var operationArguments = {\n        blockId: blockId,\n        contentLength: contentLength,\n        body: body,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, stageBlockOperationSpec);\n    }\n    /**\n     * The Stage Block operation creates a new block to be committed as part of a blob where the contents\n     * are read from a URL.\n     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n     *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n     *                for the blockid parameter must be the same size for each block.\n     * @param contentLength The length of the request.\n     * @param sourceUrl Specify a URL to the copy source.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"stageBlockFromURL\",\n    value: function stageBlockFromURL(blockId, contentLength, sourceUrl, options) {\n      var operationArguments = {\n        blockId: blockId,\n        contentLength: contentLength,\n        sourceUrl: sourceUrl,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, stageBlockFromURLOperationSpec);\n    }\n    /**\n     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the\n     * blob. In order to be written as part of a blob, a block must have been successfully written to the\n     * server in a prior Put Block operation. You can call Put Block List to update a blob by uploading\n     * only those blocks that have changed, then committing the new and existing blocks together. You can\n     * do this by specifying whether to commit a block from the committed block list or from the\n     * uncommitted block list, or to commit the most recently uploaded version of the block, whichever list\n     * it may belong to.\n     * @param blocks Blob Blocks.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"commitBlockList\",\n    value: function commitBlockList(blocks, options) {\n      var operationArguments = {\n        blocks: blocks,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, commitBlockListOperationSpec);\n    }\n    /**\n     * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block\n     * blob\n     * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted\n     *                 blocks, or both lists together.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"getBlockList\",\n    value: function getBlockList(listType, options) {\n      var operationArguments = {\n        listType: listType,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, getBlockListOperationSpec);\n    }\n  }]);\n  return BlockBlob;\n}();\n// Operation Specifications\nvar xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */true);\nvar serializer = new coreHttp.Serializer(Mappers, /* isXml */false);\nvar uploadOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobUploadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobUploadExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.blobTagsString, Parameters.legalHold1, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.contentType1, Parameters.accept2, Parameters.blobType2],\n  mediaType: \"binary\",\n  serializer: serializer\n};\nvar putBlobFromUrlOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobPutBlobFromUrlHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobPutBlobFromUrlExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.encryptionScope, Parameters.tier, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceIfTags, Parameters.copySource, Parameters.blobTagsString, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.copySourceTags, Parameters.transactionalContentMD5, Parameters.blobType2, Parameters.copySourceBlobProperties],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar stageBlockOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobStageBlockHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobStageBlockExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp24, Parameters.blockId],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.leaseId, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.encryptionScope, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.contentType1, Parameters.accept2],\n  mediaType: \"binary\",\n  serializer: serializer\n};\nvar stageBlockFromURLOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobStageBlockFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobStageBlockFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp24, Parameters.blockId],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.leaseId, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.encryptionScope, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.sourceUrl, Parameters.sourceContentCrc64, Parameters.sourceRange1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar commitBlockListOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobCommitBlockListHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobCommitBlockListExceptionHeaders\n    }\n  },\n  requestBody: Parameters.blocks,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp25],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.blobTagsString, Parameters.legalHold1, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nvar getBlockListOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlockList,\n      headersMapper: Mappers.BlockBlobGetBlockListHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobGetBlockListExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.comp25, Parameters.listType],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};","map":{"version":3,"names":["coreHttp","Mappers","Parameters","BlockBlob","client","_classCallCheck","_createClass","key","value","upload","contentLength","body","options","operationArguments","operationOptionsToRequestOptionsBase","sendOperationRequest","uploadOperationSpec","putBlobFromUrl","copySource","putBlobFromUrlOperationSpec","stageBlock","blockId","stageBlockOperationSpec","stageBlockFromURL","sourceUrl","stageBlockFromURLOperationSpec","commitBlockList","blocks","commitBlockListOperationSpec","getBlockList","listType","getBlockListOperationSpec","xmlSerializer","Serializer","serializer","path","httpMethod","responses","headersMapper","BlockBlobUploadHeaders","default","bodyMapper","StorageError","BlockBlobUploadExceptionHeaders","requestBody","body1","queryParameters","timeoutInSeconds","urlParameters","url","headerParameters","version","requestId","metadata","leaseId","ifModifiedSince","ifUnmodifiedSince","encryptionKey","encryptionKeySha256","encryptionAlgorithm","ifMatch","ifNoneMatch","ifTags","blobCacheControl","blobContentType","blobContentMD5","blobContentEncoding","blobContentLanguage","blobContentDisposition","immutabilityPolicyExpiry","immutabilityPolicyMode","encryptionScope","tier","blobTagsString","legalHold1","transactionalContentMD5","transactionalContentCrc64","contentType1","accept2","blobType2","mediaType","BlockBlobPutBlobFromUrlHeaders","BlockBlobPutBlobFromUrlExceptionHeaders","accept1","sourceIfModifiedSince","sourceIfUnmodifiedSince","sourceIfMatch","sourceIfNoneMatch","sourceIfTags","sourceContentMD5","copySourceAuthorization","copySourceTags","copySourceBlobProperties","isXML","BlockBlobStageBlockHeaders","BlockBlobStageBlockExceptionHeaders","comp24","BlockBlobStageBlockFromURLHeaders","BlockBlobStageBlockFromURLExceptionHeaders","sourceContentCrc64","sourceRange1","BlockBlobCommitBlockListHeaders","BlockBlobCommitBlockListExceptionHeaders","comp25","contentType","accept","BlockList","BlockBlobGetBlockListHeaders","BlockBlobGetBlockListExceptionHeaders","snapshot"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\generated\\src\\operations\\blockBlob.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  BlockBlobUploadOptionalParams,\n  BlockBlobUploadResponse,\n  BlockBlobPutBlobFromUrlOptionalParams,\n  BlockBlobPutBlobFromUrlResponse,\n  BlockBlobStageBlockOptionalParams,\n  BlockBlobStageBlockResponse,\n  BlockBlobStageBlockFromURLOptionalParams,\n  BlockBlobStageBlockFromURLResponse,\n  BlockLookupList,\n  BlockBlobCommitBlockListOptionalParams,\n  BlockBlobCommitBlockListResponse,\n  BlockListType,\n  BlockBlobGetBlockListOptionalParams,\n  BlockBlobGetBlockListResponse\n} from \"../models\";\n\n/** Class representing a BlockBlob. */\nexport class BlockBlob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class BlockBlob class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing\n   * block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put\n   * Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a\n   * partial update of the content of a block blob, use the Put Block List operation.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  upload(\n    contentLength: number,\n    body: coreHttp.HttpRequestBody,\n    options?: BlockBlobUploadOptionalParams\n  ): Promise<BlockBlobUploadResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      uploadOperationSpec\n    ) as Promise<BlockBlobUploadResponse>;\n  }\n\n  /**\n   * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read\n   * from a given URL.  This API is supported beginning with the 2020-04-08 version. Partial updates are\n   * not supported with Put Blob from URL; the content of an existing blob is overwritten with the\n   * content of the new blob.  To perform partial updates to a block blobâ€™s contents using a source URL,\n   * use the Put Block from URL API in conjunction with Put Block List.\n   * @param contentLength The length of the request.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  putBlobFromUrl(\n    contentLength: number,\n    copySource: string,\n    options?: BlockBlobPutBlobFromUrlOptionalParams\n  ): Promise<BlockBlobPutBlobFromUrlResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      copySource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      putBlobFromUrlOperationSpec\n    ) as Promise<BlockBlobPutBlobFromUrlResponse>;\n  }\n\n  /**\n   * The Stage Block operation creates a new block to be committed as part of a blob\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n   *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n   *                for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  stageBlock(\n    blockId: string,\n    contentLength: number,\n    body: coreHttp.HttpRequestBody,\n    options?: BlockBlobStageBlockOptionalParams\n  ): Promise<BlockBlobStageBlockResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      blockId,\n      contentLength,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      stageBlockOperationSpec\n    ) as Promise<BlockBlobStageBlockResponse>;\n  }\n\n  /**\n   * The Stage Block operation creates a new block to be committed as part of a blob where the contents\n   * are read from a URL.\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n   *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n   *                for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param options The options parameters.\n   */\n  stageBlockFromURL(\n    blockId: string,\n    contentLength: number,\n    sourceUrl: string,\n    options?: BlockBlobStageBlockFromURLOptionalParams\n  ): Promise<BlockBlobStageBlockFromURLResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      blockId,\n      contentLength,\n      sourceUrl,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      stageBlockFromURLOperationSpec\n    ) as Promise<BlockBlobStageBlockFromURLResponse>;\n  }\n\n  /**\n   * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the\n   * blob. In order to be written as part of a blob, a block must have been successfully written to the\n   * server in a prior Put Block operation. You can call Put Block List to update a blob by uploading\n   * only those blocks that have changed, then committing the new and existing blocks together. You can\n   * do this by specifying whether to commit a block from the committed block list or from the\n   * uncommitted block list, or to commit the most recently uploaded version of the block, whichever list\n   * it may belong to.\n   * @param blocks Blob Blocks.\n   * @param options The options parameters.\n   */\n  commitBlockList(\n    blocks: BlockLookupList,\n    options?: BlockBlobCommitBlockListOptionalParams\n  ): Promise<BlockBlobCommitBlockListResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      blocks,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      commitBlockListOperationSpec\n    ) as Promise<BlockBlobCommitBlockListResponse>;\n  }\n\n  /**\n   * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block\n   * blob\n   * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted\n   *                 blocks, or both lists together.\n   * @param options The options parameters.\n   */\n  getBlockList(\n    listType: BlockListType,\n    options?: BlockBlobGetBlockListOptionalParams\n  ): Promise<BlockBlobGetBlockListResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      listType,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getBlockListOperationSpec\n    ) as Promise<BlockBlobGetBlockListResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst uploadOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobUploadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobUploadExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.blobTagsString,\n    Parameters.legalHold1,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64,\n    Parameters.contentType1,\n    Parameters.accept2,\n    Parameters.blobType2\n  ],\n  mediaType: \"binary\",\n  serializer\n};\nconst putBlobFromUrlOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobPutBlobFromUrlHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobPutBlobFromUrlExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceIfTags,\n    Parameters.copySource,\n    Parameters.blobTagsString,\n    Parameters.sourceContentMD5,\n    Parameters.copySourceAuthorization,\n    Parameters.copySourceTags,\n    Parameters.transactionalContentMD5,\n    Parameters.blobType2,\n    Parameters.copySourceBlobProperties\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst stageBlockOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobStageBlockHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobStageBlockExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp24,\n    Parameters.blockId\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.encryptionScope,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64,\n    Parameters.contentType1,\n    Parameters.accept2\n  ],\n  mediaType: \"binary\",\n  serializer\n};\nconst stageBlockFromURLOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobStageBlockFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobStageBlockFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp24,\n    Parameters.blockId\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.encryptionScope,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceContentMD5,\n    Parameters.copySourceAuthorization,\n    Parameters.sourceUrl,\n    Parameters.sourceContentCrc64,\n    Parameters.sourceRange1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst commitBlockListOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobCommitBlockListHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobCommitBlockListExceptionHeaders\n    }\n  },\n  requestBody: Parameters.blocks,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp25],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.blobTagsString,\n    Parameters.legalHold1,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getBlockListOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlockList,\n      headersMapper: Mappers.BlockBlobGetBlockListHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobGetBlockListExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.comp25,\n    Parameters.listType\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}