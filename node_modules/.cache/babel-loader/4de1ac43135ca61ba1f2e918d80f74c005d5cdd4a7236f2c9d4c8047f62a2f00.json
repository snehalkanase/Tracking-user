{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy, HttpHeaders, isNode } from \"@azure/core-http\";\nimport { HeaderConstants } from \"../utils/constants\";\n/**\n * TelemetryPolicy is a policy used to tag user-agent header for every requests.\n */\nexport var TelemetryPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {\n  _inherits(TelemetryPolicy, _BaseRequestPolicy);\n  var _super = _createSuper(TelemetryPolicy);\n  /**\n   * Creates an instance of TelemetryPolicy.\n   * @param nextPolicy -\n   * @param options -\n   * @param telemetry -\n   */\n  function TelemetryPolicy(nextPolicy, options, telemetry) {\n    var _this;\n    _classCallCheck(this, TelemetryPolicy);\n    _this = _super.call(this, nextPolicy, options);\n    _this.telemetry = telemetry;\n    return _this;\n  }\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   */\n  _createClass(TelemetryPolicy, [{\n    key: \"sendRequest\",\n    value: function () {\n      var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (isNode) {\n                if (!request.headers) {\n                  request.headers = new HttpHeaders();\n                }\n                if (!request.headers.get(HeaderConstants.USER_AGENT)) {\n                  request.headers.set(HeaderConstants.USER_AGENT, this.telemetry);\n                }\n              }\n              return _context.abrupt(\"return\", this._nextPolicy.sendRequest(request));\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function sendRequest(_x) {\n        return _sendRequest.apply(this, arguments);\n      }\n      return sendRequest;\n    }()\n  }]);\n  return TelemetryPolicy;\n}(BaseRequestPolicy);","map":{"version":3,"names":["BaseRequestPolicy","HttpHeaders","isNode","HeaderConstants","TelemetryPolicy","_BaseRequestPolicy","_inherits","_super","_createSuper","nextPolicy","options","telemetry","_this","_classCallCheck","call","_createClass","key","value","_sendRequest","_asyncToGenerator","_regeneratorRuntime","mark","_callee","request","wrap","_callee$","_context","prev","next","headers","get","USER_AGENT","set","abrupt","_nextPolicy","sendRequest","stop","_x","apply","arguments"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\policies\\TelemetryPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  HttpHeaders,\n  HttpOperationResponse,\n  isNode,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource,\n} from \"@azure/core-http\";\n\nimport { HeaderConstants } from \"../utils/constants\";\n\n/**\n * TelemetryPolicy is a policy used to tag user-agent header for every requests.\n */\nexport class TelemetryPolicy extends BaseRequestPolicy {\n  /**\n   * Telemetry string.\n   */\n  public readonly telemetry: string;\n\n  /**\n   * Creates an instance of TelemetryPolicy.\n   * @param nextPolicy -\n   * @param options -\n   * @param telemetry -\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, telemetry: string) {\n    super(nextPolicy, options);\n    this.telemetry = telemetry;\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (isNode) {\n      if (!request.headers) {\n        request.headers = new HttpHeaders();\n      }\n      if (!request.headers.get(HeaderConstants.USER_AGENT)) {\n        request.headers.set(HeaderConstants.USER_AGENT, this.telemetry);\n      }\n    }\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n"],"mappings":";;;;;;AAAA;AACA;AAEA,SACEA,iBAAiB,EACjBC,WAAW,EAEXC,MAAM,QAID,kBAAkB;AAEzB,SAASC,eAAe,QAAQ,oBAAoB;AAEpD;;;AAGA,WAAaC,eAAgB,0BAAAC,kBAAA;EAAAC,SAAA,CAAAF,eAAA,EAAAC,kBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,eAAA;EAM3B;;;;;;EAMA,SAAAA,gBAAYK,UAAyB,EAAEC,OAA6B,EAAEC,SAAiB;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAT,eAAA;IACrFQ,KAAA,GAAAL,MAAA,CAAAO,IAAA,OAAML,UAAU,EAAEC,OAAO;IACzBE,KAAA,CAAKD,SAAS,GAAGA,SAAS;IAAC,OAAAC,KAAA;EAC7B;EAEA;;;;;EAAAG,YAAA,CAAAX,eAAA;IAAAY,GAAA;IAAAC,KAAA;MAAA,IAAAC,YAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAKO,SAAAC,QAAkBC,OAAoB;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAC3C,IAAI1B,MAAM,EAAE;gBACV,IAAI,CAACqB,OAAO,CAACM,OAAO,EAAE;kBACpBN,OAAO,CAACM,OAAO,GAAG,IAAI5B,WAAW,EAAE;;gBAErC,IAAI,CAACsB,OAAO,CAACM,OAAO,CAACC,GAAG,CAAC3B,eAAe,CAAC4B,UAAU,CAAC,EAAE;kBACpDR,OAAO,CAACM,OAAO,CAACG,GAAG,CAAC7B,eAAe,CAAC4B,UAAU,EAAE,IAAI,CAACpB,SAAS,CAAC;;;cAElE,OAAAe,QAAA,CAAAO,MAAA,WAEM,IAAI,CAACC,WAAW,CAACC,WAAW,CAACZ,OAAO,CAAC;YAAA;YAAA;cAAA,OAAAG,QAAA,CAAAU,IAAA;UAAA;QAAA,GAAAd,OAAA;MAAA,CAC7C;MAAA,SAAAa,YAAAE,EAAA;QAAA,OAAAnB,YAAA,CAAAoB,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAJ,WAAA;IAAA;EAAA;EAAA,OAAA/B,eAAA;AAAA,EAjCkCJ,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}