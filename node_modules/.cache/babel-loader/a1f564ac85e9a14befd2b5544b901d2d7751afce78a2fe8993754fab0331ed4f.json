{"ast":null,"code":"import _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { URLBuilder } from \"../url\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nvar allowedRedirect = [\"GET\", \"HEAD\"];\nexport var DefaultRedirectOptions = {\n  handleRedirects: true,\n  maxRetries: 20\n};\n/**\n * Creates a redirect policy, which sends a repeats the request to a new destination if a response arrives with a \"location\" header, and a status code between 300 and 307.\n * @param maximumRetries - Maximum number of redirects to follow.\n * @returns An instance of the {@link RedirectPolicy}\n */\nexport function redirectPolicy() {\n  var maximumRetries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 20;\n  return {\n    create: function create(nextPolicy, options) {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    }\n  };\n}\n/**\n * Resends the request to a new destination if a response arrives with a \"location\" header, and a status code between 300 and 307.\n */\nexport var RedirectPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {\n  _inherits(RedirectPolicy, _BaseRequestPolicy);\n  var _super = _createSuper(RedirectPolicy);\n  function RedirectPolicy(nextPolicy, options) {\n    var _this;\n    var maxRetries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;\n    _classCallCheck(this, RedirectPolicy);\n    _this = _super.call(this, nextPolicy, options);\n    _this.maxRetries = maxRetries;\n    return _this;\n  }\n  _createClass(RedirectPolicy, [{\n    key: \"sendRequest\",\n    value: function sendRequest(request) {\n      var _this2 = this;\n      return this._nextPolicy.sendRequest(request).then(function (response) {\n        return handleRedirect(_this2, response, 0);\n      });\n    }\n  }]);\n  return RedirectPolicy;\n}(BaseRequestPolicy);\nfunction handleRedirect(policy, response, currentRetries) {\n  var request = response.request,\n    status = response.status;\n  var locationHeader = response.headers.get(\"location\");\n  if (locationHeader && (status === 300 || status === 301 && allowedRedirect.includes(request.method) || status === 302 && allowedRedirect.includes(request.method) || status === 303 && request.method === \"POST\" || status === 307) && (!policy.maxRetries || currentRetries < policy.maxRetries)) {\n    var builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString();\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n      delete request.body;\n    }\n    return policy._nextPolicy.sendRequest(request).then(function (res) {\n      return handleRedirect(policy, res, currentRetries + 1);\n    });\n  }\n  return Promise.resolve(response);\n}","map":{"version":3,"names":["BaseRequestPolicy","URLBuilder","allowedRedirect","DefaultRedirectOptions","handleRedirects","maxRetries","redirectPolicy","maximumRetries","arguments","length","undefined","create","nextPolicy","options","RedirectPolicy","_BaseRequestPolicy","_inherits","_super","_createSuper","_this","_classCallCheck","call","_createClass","key","value","sendRequest","request","_this2","_nextPolicy","then","response","handleRedirect","policy","currentRetries","status","locationHeader","headers","get","includes","method","builder","parse","url","setPath","toString","body","res","Promise","resolve"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\policies\\redirectPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { URLBuilder } from \"../url\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n\n/**\n * Options for how redirect responses are handled.\n */\nexport interface RedirectOptions {\n  /**\n   * When true, redirect responses are followed.  Defaults to true.\n   */\n  handleRedirects: boolean;\n\n  /**\n   * The maximum number of times the redirect URL will be tried before\n   * failing.  Defaults to 20.\n   */\n  maxRetries?: number;\n}\n\nexport const DefaultRedirectOptions: RedirectOptions = {\n  handleRedirects: true,\n  maxRetries: 20,\n};\n\n/**\n * Creates a redirect policy, which sends a repeats the request to a new destination if a response arrives with a \"location\" header, and a status code between 300 and 307.\n * @param maximumRetries - Maximum number of redirects to follow.\n * @returns An instance of the {@link RedirectPolicy}\n */\nexport function redirectPolicy(maximumRetries = 20): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    },\n  };\n}\n\n/**\n * Resends the request to a new destination if a response arrives with a \"location\" header, and a status code between 300 and 307.\n */\nexport class RedirectPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, readonly maxRetries = 20) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request)\n      .then((response) => handleRedirect(this, response, 0));\n  }\n}\n\nfunction handleRedirect(\n  policy: RedirectPolicy,\n  response: HttpOperationResponse,\n  currentRetries: number\n): Promise<HttpOperationResponse> {\n  const { request, status } = response;\n  const locationHeader = response.headers.get(\"location\");\n  if (\n    locationHeader &&\n    (status === 300 ||\n      (status === 301 && allowedRedirect.includes(request.method)) ||\n      (status === 302 && allowedRedirect.includes(request.method)) ||\n      (status === 303 && request.method === \"POST\") ||\n      status === 307) &&\n    (!policy.maxRetries || currentRetries < policy.maxRetries)\n  ) {\n    const builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString();\n\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n      delete request.body;\n    }\n\n    return policy._nextPolicy\n      .sendRequest(request)\n      .then((res) => handleRedirect(policy, res, currentRetries + 1));\n  }\n\n  return Promise.resolve(response);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}