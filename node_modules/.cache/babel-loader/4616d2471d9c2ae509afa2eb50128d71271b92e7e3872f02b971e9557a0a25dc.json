{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/* eslint-disable eqeqeq */\nimport * as base64 from \"./util/base64\";\nimport * as utils from \"./util/utils\";\nimport { XML_ATTRKEY, XML_CHARKEY } from \"./util/serializer.common\";\n// This file contains utility code to serialize and deserialize network operations according to `OperationSpec` objects generated by AutoRest.TypeScript from OpenAPI specifications.\n/**\n * Used to map raw response objects to final shapes.\n * Helps packing and unpacking Dates and other encoded types that are not intrinsic to JSON.\n * Also allows pulling values from headers, as well as inserting default values and constants.\n */\nexport class Serializer {\n  constructor() {\n    let modelMappers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let\n    /**\n     * Whether the contents are XML or not.\n     */\n    isXML = arguments.length > 1 ? arguments[1] : undefined;\n    this.modelMappers = modelMappers;\n    this.isXML = isXML;\n  }\n  /**\n   * Validates constraints, if any. This function will throw if the provided value does not respect those constraints.\n   * @param mapper - The definition of data models.\n   * @param value - The value.\n   * @param objectName - Name of the object. Used in the error messages.\n   * @deprecated Removing the constraints validation on client side.\n   */\n  validateConstraints(mapper, value, objectName) {\n    const failValidation = (constraintName, constraintValue) => {\n      throw new Error(`\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`);\n    };\n    if (mapper.constraints && value != undefined) {\n      const valueAsNumber = value;\n      const {\n        ExclusiveMaximum,\n        ExclusiveMinimum,\n        InclusiveMaximum,\n        InclusiveMinimum,\n        MaxItems,\n        MaxLength,\n        MinItems,\n        MinLength,\n        MultipleOf,\n        Pattern,\n        UniqueItems\n      } = mapper.constraints;\n      if (ExclusiveMaximum != undefined && valueAsNumber >= ExclusiveMaximum) {\n        failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n      }\n      if (ExclusiveMinimum != undefined && valueAsNumber <= ExclusiveMinimum) {\n        failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n      }\n      if (InclusiveMaximum != undefined && valueAsNumber > InclusiveMaximum) {\n        failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n      }\n      if (InclusiveMinimum != undefined && valueAsNumber < InclusiveMinimum) {\n        failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n      }\n      const valueAsArray = value;\n      if (MaxItems != undefined && valueAsArray.length > MaxItems) {\n        failValidation(\"MaxItems\", MaxItems);\n      }\n      if (MaxLength != undefined && valueAsArray.length > MaxLength) {\n        failValidation(\"MaxLength\", MaxLength);\n      }\n      if (MinItems != undefined && valueAsArray.length < MinItems) {\n        failValidation(\"MinItems\", MinItems);\n      }\n      if (MinLength != undefined && valueAsArray.length < MinLength) {\n        failValidation(\"MinLength\", MinLength);\n      }\n      if (MultipleOf != undefined && valueAsNumber % MultipleOf !== 0) {\n        failValidation(\"MultipleOf\", MultipleOf);\n      }\n      if (Pattern) {\n        const pattern = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n        if (typeof value !== \"string\" || value.match(pattern) === null) {\n          failValidation(\"Pattern\", Pattern);\n        }\n      }\n      if (UniqueItems && valueAsArray.some((item, i, ar) => ar.indexOf(item) !== i)) {\n        failValidation(\"UniqueItems\", UniqueItems);\n      }\n    }\n  }\n  /**\n   * Serialize the given object based on its metadata defined in the mapper.\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object.\n   * @param object - A valid Javascript object to be serialized.\n   * @param objectName - Name of the serialized object.\n   * @param options - additional options to deserialization.\n   * @returns A valid serialized Javascript object.\n   */\n  serialize(mapper, object, objectName) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var _a, _b, _c;\n    const updatedOptions = {\n      rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : \"\",\n      includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,\n      xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY\n    };\n    let payload = {};\n    const mapperType = mapper.type.name;\n    if (!objectName) {\n      objectName = mapper.serializedName;\n    }\n    if (mapperType.match(/^Sequence$/i) !== null) {\n      payload = [];\n    }\n    if (mapper.isConstant) {\n      object = mapper.defaultValue;\n    }\n    // This table of allowed values should help explain\n    // the mapper.required and mapper.nullable properties.\n    // X means \"neither undefined or null are allowed\".\n    //           || required\n    //           || true      | false\n    //  nullable || ==========================\n    //      true || null      | undefined/null\n    //     false || X         | undefined\n    // undefined || X         | undefined/null\n    const {\n      required,\n      nullable\n    } = mapper;\n    if (required && nullable && object === undefined) {\n      throw new Error(`${objectName} cannot be undefined.`);\n    }\n    if (required && !nullable && object == undefined) {\n      throw new Error(`${objectName} cannot be null or undefined.`);\n    }\n    if (!required && nullable === false && object === null) {\n      throw new Error(`${objectName} cannot be null.`);\n    }\n    if (object == undefined) {\n      payload = object;\n    } else {\n      if (mapperType.match(/^any$/i) !== null) {\n        payload = object;\n      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n        payload = serializeBasicTypes(mapperType, objectName, object);\n      } else if (mapperType.match(/^Enum$/i) !== null) {\n        const enumMapper = mapper;\n        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n      } else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {\n        payload = serializeDateTypes(mapperType, object, objectName);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = serializeByteArrayType(objectName, object);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = serializeBase64UrlType(objectName, object);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n      } else if (mapperType.match(/^Composite$/i) !== null) {\n        payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n      }\n    }\n    return payload;\n  }\n  /**\n   * Deserialize the given object based on its metadata defined in the mapper.\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object.\n   * @param responseBody - A valid Javascript entity to be deserialized.\n   * @param objectName - Name of the deserialized object.\n   * @param options - Controls behavior of XML parser and builder.\n   * @returns A valid deserialized Javascript object.\n   */\n  deserialize(mapper, responseBody, objectName) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var _a, _b, _c;\n    const updatedOptions = {\n      rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : \"\",\n      includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,\n      xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY\n    };\n    if (responseBody == undefined) {\n      if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n        // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n        // between the list being empty versus being missing,\n        // so let's do the more user-friendly thing and return an empty list.\n        responseBody = [];\n      }\n      // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n      if (mapper.defaultValue !== undefined) {\n        responseBody = mapper.defaultValue;\n      }\n      return responseBody;\n    }\n    let payload;\n    const mapperType = mapper.type.name;\n    if (!objectName) {\n      objectName = mapper.serializedName;\n    }\n    if (mapperType.match(/^Composite$/i) !== null) {\n      payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);\n    } else {\n      if (this.isXML) {\n        const xmlCharKey = updatedOptions.xmlCharKey;\n        const castResponseBody = responseBody;\n        /**\n         * If the mapper specifies this as a non-composite type value but the responseBody contains\n         * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n         * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n         */\n        if (castResponseBody[XML_ATTRKEY] != undefined && castResponseBody[xmlCharKey] != undefined) {\n          responseBody = castResponseBody[xmlCharKey];\n        }\n      }\n      if (mapperType.match(/^Number$/i) !== null) {\n        payload = parseFloat(responseBody);\n        if (isNaN(payload)) {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^Boolean$/i) !== null) {\n        if (responseBody === \"true\") {\n          payload = true;\n        } else if (responseBody === \"false\") {\n          payload = false;\n        } else {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n        payload = responseBody;\n      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n        payload = new Date(responseBody);\n      } else if (mapperType.match(/^UnixTime$/i) !== null) {\n        payload = unixTimeToDate(responseBody);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = base64.decodeString(responseBody);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = base64UrlToByteArray(responseBody);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);\n      }\n    }\n    if (mapper.isConstant) {\n      payload = mapper.defaultValue;\n    }\n    return payload;\n  }\n}\nfunction trimEnd(str, ch) {\n  let len = str.length;\n  while (len - 1 >= 0 && str[len - 1] === ch) {\n    --len;\n  }\n  return str.substr(0, len);\n}\nfunction bufferToBase64Url(buffer) {\n  if (!buffer) {\n    return undefined;\n  }\n  if (!(buffer instanceof Uint8Array)) {\n    throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n  }\n  // Uint8Array to Base64.\n  const str = base64.encodeByteArray(buffer);\n  // Base64 to Base64Url.\n  return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction base64UrlToByteArray(str) {\n  if (!str) {\n    return undefined;\n  }\n  if (str && typeof str.valueOf() !== \"string\") {\n    throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n  }\n  // Base64Url to Base64.\n  str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  // Base64 to Uint8Array.\n  return base64.decodeString(str);\n}\nfunction splitSerializeName(prop) {\n  const classes = [];\n  let partialclass = \"\";\n  if (prop) {\n    const subwords = prop.split(\".\");\n    for (const item of subwords) {\n      if (item.charAt(item.length - 1) === \"\\\\\") {\n        partialclass += item.substr(0, item.length - 1) + \".\";\n      } else {\n        partialclass += item;\n        classes.push(partialclass);\n        partialclass = \"\";\n      }\n    }\n  }\n  return classes;\n}\nfunction dateToUnixTime(d) {\n  if (!d) {\n    return undefined;\n  }\n  if (typeof d.valueOf() === \"string\") {\n    d = new Date(d);\n  }\n  return Math.floor(d.getTime() / 1000);\n}\nfunction unixTimeToDate(n) {\n  if (!n) {\n    return undefined;\n  }\n  return new Date(n * 1000);\n}\nfunction serializeBasicTypes(typeName, objectName, value) {\n  if (value !== null && value !== undefined) {\n    if (typeName.match(/^Number$/i) !== null) {\n      if (typeof value !== \"number\") {\n        throw new Error(`${objectName} with value ${value} must be of type number.`);\n      }\n    } else if (typeName.match(/^String$/i) !== null) {\n      if (typeof value.valueOf() !== \"string\") {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n      }\n    } else if (typeName.match(/^Uuid$/i) !== null) {\n      if (!(typeof value.valueOf() === \"string\" && utils.isValidUuid(value))) {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string and a valid uuid.`);\n      }\n    } else if (typeName.match(/^Boolean$/i) !== null) {\n      if (typeof value !== \"boolean\") {\n        throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n      }\n    } else if (typeName.match(/^Stream$/i) !== null) {\n      const objectType = typeof value;\n      if (objectType !== \"string\" && objectType !== \"function\" && !(value instanceof ArrayBuffer) && !ArrayBuffer.isView(value) && !((typeof Blob === \"function\" || typeof Blob === \"object\") && value instanceof Blob)) {\n        throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, or a function returning NodeJS.ReadableStream.`);\n      }\n    }\n  }\n  return value;\n}\nfunction serializeEnumType(objectName, allowedValues, value) {\n  if (!allowedValues) {\n    throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);\n  }\n  const isPresent = allowedValues.some(item => {\n    if (typeof item.valueOf() === \"string\") {\n      return item.toLowerCase() === value.toLowerCase();\n    }\n    return item === value;\n  });\n  if (!isPresent) {\n    throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);\n  }\n  return value;\n}\nfunction serializeByteArrayType(objectName, value) {\n  let returnValue = \"\";\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    returnValue = base64.encodeByteArray(value);\n  }\n  return returnValue;\n}\nfunction serializeBase64UrlType(objectName, value) {\n  let returnValue = \"\";\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    returnValue = bufferToBase64Url(value) || \"\";\n  }\n  return returnValue;\n}\nfunction serializeDateTypes(typeName, value, objectName) {\n  if (value != undefined) {\n    if (typeName.match(/^Date$/i) !== null) {\n      if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = value instanceof Date ? value.toISOString().substring(0, 10) : new Date(value).toISOString().substring(0, 10);\n    } else if (typeName.match(/^DateTime$/i) !== null) {\n      if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n    } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n      if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n      }\n      value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n    } else if (typeName.match(/^UnixTime$/i) !== null) {\n      if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` + `for it to be serialized in UnixTime/Epoch format.`);\n      }\n      value = dateToUnixTime(value);\n    } else if (typeName.match(/^TimeSpan$/i) !== null) {\n      if (!utils.isDuration(value)) {\n        throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`);\n      }\n    }\n  }\n  return value;\n}\nfunction serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {\n  if (!Array.isArray(object)) {\n    throw new Error(`${objectName} must be of type Array.`);\n  }\n  const elementType = mapper.type.element;\n  if (!elementType || typeof elementType !== \"object\") {\n    throw new Error(`element\" metadata for an Array must be defined in the ` + `mapper and it must of type \"object\" in ${objectName}.`);\n  }\n  const tempArray = [];\n  for (let i = 0; i < object.length; i++) {\n    const serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n    if (isXml && elementType.xmlNamespace) {\n      const xmlnsKey = elementType.xmlNamespacePrefix ? `xmlns:${elementType.xmlNamespacePrefix}` : \"xmlns\";\n      if (elementType.type.name === \"Composite\") {\n        tempArray[i] = Object.assign({}, serializedValue);\n        tempArray[i][XML_ATTRKEY] = {\n          [xmlnsKey]: elementType.xmlNamespace\n        };\n      } else {\n        tempArray[i] = {};\n        tempArray[i][options.xmlCharKey] = serializedValue;\n        tempArray[i][XML_ATTRKEY] = {\n          [xmlnsKey]: elementType.xmlNamespace\n        };\n      }\n    } else {\n      tempArray[i] = serializedValue;\n    }\n  }\n  return tempArray;\n}\nfunction serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {\n  if (typeof object !== \"object\") {\n    throw new Error(`${objectName} must be of type object.`);\n  }\n  const valueType = mapper.type.value;\n  if (!valueType || typeof valueType !== \"object\") {\n    throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` + `mapper and it must of type \"object\" in ${objectName}.`);\n  }\n  const tempDictionary = {};\n  for (const key of Object.keys(object)) {\n    const serializedValue = serializer.serialize(valueType, object[key], objectName, options);\n    // If the element needs an XML namespace we need to add it within the $ property\n    tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n  }\n  // Add the namespace to the root element if needed\n  if (isXml && mapper.xmlNamespace) {\n    const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n    const result = tempDictionary;\n    result[XML_ATTRKEY] = {\n      [xmlnsKey]: mapper.xmlNamespace\n    };\n    return result;\n  }\n  return tempDictionary;\n}\n/**\n * Resolves the additionalProperties property from a referenced mapper.\n * @param serializer - The serializer containing the entire set of mappers.\n * @param mapper - The composite mapper to resolve.\n * @param objectName - Name of the object being serialized.\n */\nfunction resolveAdditionalProperties(serializer, mapper, objectName) {\n  const additionalProperties = mapper.type.additionalProperties;\n  if (!additionalProperties && mapper.type.className) {\n    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n    return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;\n  }\n  return additionalProperties;\n}\n/**\n * Finds the mapper referenced by `className`.\n * @param serializer - The serializer containing the entire set of mappers\n * @param mapper - The composite mapper to resolve\n * @param objectName - Name of the object being serialized\n */\nfunction resolveReferencedMapper(serializer, mapper, objectName) {\n  const className = mapper.type.className;\n  if (!className) {\n    throw new Error(`Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(mapper, undefined, 2)}\".`);\n  }\n  return serializer.modelMappers[className];\n}\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - The serializer containing the entire set of mappers\n * @param mapper - The composite mapper to resolve\n */\nfunction resolveModelProperties(serializer, mapper, objectName) {\n  let modelProps = mapper.type.modelProperties;\n  if (!modelProps) {\n    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n    if (!modelMapper) {\n      throw new Error(`mapper() cannot be null or undefined for model \"${mapper.type.className}\".`);\n    }\n    modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;\n    if (!modelProps) {\n      throw new Error(`modelProperties cannot be null or undefined in the ` + `mapper \"${JSON.stringify(modelMapper)}\" of type \"${mapper.type.className}\" for object \"${objectName}\".`);\n    }\n  }\n  return modelProps;\n}\nfunction serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n  }\n  if (object != undefined) {\n    const payload = {};\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    for (const key of Object.keys(modelProps)) {\n      const propertyMapper = modelProps[key];\n      if (propertyMapper.readOnly) {\n        continue;\n      }\n      let propName;\n      let parentObject = payload;\n      if (serializer.isXML) {\n        if (propertyMapper.xmlIsWrapped) {\n          propName = propertyMapper.xmlName;\n        } else {\n          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n        }\n      } else {\n        const paths = splitSerializeName(propertyMapper.serializedName);\n        propName = paths.pop();\n        for (const pathName of paths) {\n          const childObject = parentObject[pathName];\n          if (childObject == undefined && (object[key] != undefined || propertyMapper.defaultValue !== undefined)) {\n            parentObject[pathName] = {};\n          }\n          parentObject = parentObject[pathName];\n        }\n      }\n      if (parentObject != undefined) {\n        if (isXml && mapper.xmlNamespace) {\n          const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n          parentObject[XML_ATTRKEY] = Object.assign(Object.assign({}, parentObject[XML_ATTRKEY]), {\n            [xmlnsKey]: mapper.xmlNamespace\n          });\n        }\n        const propertyObjectName = propertyMapper.serializedName !== \"\" ? objectName + \".\" + propertyMapper.serializedName : objectName;\n        let toSerialize = object[key];\n        const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n        if (polymorphicDiscriminator && polymorphicDiscriminator.clientName === key && toSerialize == undefined) {\n          toSerialize = mapper.serializedName;\n        }\n        const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);\n        if (serializedValue !== undefined && propName != undefined) {\n          const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n          if (isXml && propertyMapper.xmlIsAttribute) {\n            // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n            // This keeps things simple while preventing name collision\n            // with names in user documents.\n            parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {};\n            parentObject[XML_ATTRKEY][propName] = serializedValue;\n          } else if (isXml && propertyMapper.xmlIsWrapped) {\n            parentObject[propName] = {\n              [propertyMapper.xmlElementName]: value\n            };\n          } else {\n            parentObject[propName] = value;\n          }\n        }\n      }\n    }\n    const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n    if (additionalPropertiesMapper) {\n      const propNames = Object.keys(modelProps);\n      for (const clientPropName in object) {\n        const isAdditionalProperty = propNames.every(pn => pn !== clientPropName);\n        if (isAdditionalProperty) {\n          payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '[\"' + clientPropName + '\"]', options);\n        }\n      }\n    }\n    return payload;\n  }\n  return object;\n}\nfunction getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {\n  if (!isXml || !propertyMapper.xmlNamespace) {\n    return serializedValue;\n  }\n  const xmlnsKey = propertyMapper.xmlNamespacePrefix ? `xmlns:${propertyMapper.xmlNamespacePrefix}` : \"xmlns\";\n  const xmlNamespace = {\n    [xmlnsKey]: propertyMapper.xmlNamespace\n  };\n  if ([\"Composite\"].includes(propertyMapper.type.name)) {\n    if (serializedValue[XML_ATTRKEY]) {\n      return serializedValue;\n    } else {\n      const result = Object.assign({}, serializedValue);\n      result[XML_ATTRKEY] = xmlNamespace;\n      return result;\n    }\n  }\n  const result = {};\n  result[options.xmlCharKey] = serializedValue;\n  result[XML_ATTRKEY] = xmlNamespace;\n  return result;\n}\nfunction isSpecialXmlProperty(propertyName, options) {\n  return [XML_ATTRKEY, options.xmlCharKey].includes(propertyName);\n}\nfunction deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {\n  var _a, _b;\n  const xmlCharKey = (_a = options.xmlCharKey) !== null && _a !== void 0 ? _a : XML_CHARKEY;\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n  }\n  const modelProps = resolveModelProperties(serializer, mapper, objectName);\n  let instance = {};\n  const handledPropertyNames = [];\n  for (const key of Object.keys(modelProps)) {\n    const propertyMapper = modelProps[key];\n    const paths = splitSerializeName(modelProps[key].serializedName);\n    handledPropertyNames.push(paths[0]);\n    const {\n      serializedName,\n      xmlName,\n      xmlElementName\n    } = propertyMapper;\n    let propertyObjectName = objectName;\n    if (serializedName !== \"\" && serializedName !== undefined) {\n      propertyObjectName = objectName + \".\" + serializedName;\n    }\n    const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;\n    if (headerCollectionPrefix) {\n      const dictionary = {};\n      for (const headerKey of Object.keys(responseBody)) {\n        if (headerKey.startsWith(headerCollectionPrefix)) {\n          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);\n        }\n        handledPropertyNames.push(headerKey);\n      }\n      instance[key] = dictionary;\n    } else if (serializer.isXML) {\n      if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) {\n        instance[key] = serializer.deserialize(propertyMapper, responseBody[XML_ATTRKEY][xmlName], propertyObjectName, options);\n      } else if (propertyMapper.xmlIsMsText) {\n        if (responseBody[xmlCharKey] !== undefined) {\n          instance[key] = responseBody[xmlCharKey];\n        } else if (typeof responseBody === \"string\") {\n          // The special case where xml parser parses \"<Name>content</Name>\" into JSON of\n          //   `{ name: \"content\"}` instead of `{ name: { \"_\": \"content\" }}`\n          instance[key] = responseBody;\n        }\n      } else {\n        const propertyName = xmlElementName || xmlName || serializedName;\n        if (propertyMapper.xmlIsWrapped) {\n          /* a list of <xmlElementName> wrapped by <xmlName>\n            For the xml example below\n              <Cors>\n                <CorsRule>...</CorsRule>\n                <CorsRule>...</CorsRule>\n              </Cors>\n            the responseBody has\n              {\n                Cors: {\n                  CorsRule: [{...}, {...}]\n                }\n              }\n            xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n          */\n          const wrapped = responseBody[xmlName];\n          const elementList = (_b = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _b !== void 0 ? _b : [];\n          instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);\n          handledPropertyNames.push(xmlName);\n        } else {\n          const property = responseBody[propertyName];\n          instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);\n          handledPropertyNames.push(propertyName);\n        }\n      }\n    } else {\n      // deserialize the property if it is present in the provided responseBody instance\n      let propertyInstance;\n      let res = responseBody;\n      // traversing the object step by step.\n      for (const item of paths) {\n        if (!res) break;\n        res = res[item];\n      }\n      propertyInstance = res;\n      const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n      // checking that the model property name (key)(ex: \"fishtype\") and the\n      // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n      // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n      // is a better approach. The generator is not consistent with escaping '\\.' in the\n      // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n      // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n      // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n      // the transformation of model property name (ex: \"fishtype\") is done consistently.\n      // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n      if (polymorphicDiscriminator && key === polymorphicDiscriminator.clientName && propertyInstance == undefined) {\n        propertyInstance = mapper.serializedName;\n      }\n      let serializedValue;\n      // paging\n      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n        propertyInstance = responseBody[key];\n        const arrayInstance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n        // Copy over any properties that have already been added into the instance, where they do\n        // not exist on the newly de-serialized array\n        for (const [k, v] of Object.entries(instance)) {\n          if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {\n            arrayInstance[k] = v;\n          }\n        }\n        instance = arrayInstance;\n      } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n        serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n        instance[key] = serializedValue;\n      }\n    }\n  }\n  const additionalPropertiesMapper = mapper.type.additionalProperties;\n  if (additionalPropertiesMapper) {\n    const isAdditionalProperty = responsePropName => {\n      for (const clientPropName in modelProps) {\n        const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n        if (paths[0] === responsePropName) {\n          return false;\n        }\n      }\n      return true;\n    };\n    for (const responsePropName in responseBody) {\n      if (isAdditionalProperty(responsePropName)) {\n        instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '[\"' + responsePropName + '\"]', options);\n      }\n    }\n  } else if (responseBody) {\n    for (const key of Object.keys(responseBody)) {\n      if (instance[key] === undefined && !handledPropertyNames.includes(key) && !isSpecialXmlProperty(key, options)) {\n        instance[key] = responseBody[key];\n      }\n    }\n  }\n  return instance;\n}\nfunction deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {\n  const value = mapper.type.value;\n  if (!value || typeof value !== \"object\") {\n    throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` + `mapper and it must of type \"object\" in ${objectName}`);\n  }\n  if (responseBody) {\n    const tempDictionary = {};\n    for (const key of Object.keys(responseBody)) {\n      tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n    }\n    return tempDictionary;\n  }\n  return responseBody;\n}\nfunction deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {\n  const element = mapper.type.element;\n  if (!element || typeof element !== \"object\") {\n    throw new Error(`element\" metadata for an Array must be defined in the ` + `mapper and it must of type \"object\" in ${objectName}`);\n  }\n  if (responseBody) {\n    if (!Array.isArray(responseBody)) {\n      // xml2js will interpret a single element array as just the element, so force it to be an array\n      responseBody = [responseBody];\n    }\n    const tempArray = [];\n    for (let i = 0; i < responseBody.length; i++) {\n      tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);\n    }\n    return tempArray;\n  }\n  return responseBody;\n}\nfunction getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {\n  const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n  if (polymorphicDiscriminator) {\n    const discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n    if (discriminatorName != undefined) {\n      const discriminatorValue = object[discriminatorName];\n      if (discriminatorValue != undefined) {\n        const typeName = mapper.type.uberParent || mapper.type.className;\n        const indexDiscriminator = discriminatorValue === typeName ? discriminatorValue : typeName + \".\" + discriminatorValue;\n        const polymorphicMapper = serializer.modelMappers.discriminators[indexDiscriminator];\n        if (polymorphicMapper) {\n          mapper = polymorphicMapper;\n        }\n      }\n    }\n  }\n  return mapper;\n}\nfunction getPolymorphicDiscriminatorRecursively(serializer, mapper) {\n  return mapper.type.polymorphicDiscriminator || getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) || getPolymorphicDiscriminatorSafely(serializer, mapper.type.className);\n}\nfunction getPolymorphicDiscriminatorSafely(serializer, typeName) {\n  return typeName && serializer.modelMappers[typeName] && serializer.modelMappers[typeName].type.polymorphicDiscriminator;\n}\n/**\n * Utility function that serializes an object that might contain binary information into a plain object, array or a string.\n */\nexport function serializeObject(toSerialize) {\n  const castToSerialize = toSerialize;\n  if (toSerialize == undefined) return undefined;\n  if (toSerialize instanceof Uint8Array) {\n    toSerialize = base64.encodeByteArray(toSerialize);\n    return toSerialize;\n  } else if (toSerialize instanceof Date) {\n    return toSerialize.toISOString();\n  } else if (Array.isArray(toSerialize)) {\n    const array = [];\n    for (let i = 0; i < toSerialize.length; i++) {\n      array.push(serializeObject(toSerialize[i]));\n    }\n    return array;\n  } else if (typeof toSerialize === \"object\") {\n    const dictionary = {};\n    for (const property in toSerialize) {\n      dictionary[property] = serializeObject(castToSerialize[property]);\n    }\n    return dictionary;\n  }\n  return toSerialize;\n}\n/**\n * Utility function to create a K:V from a list of strings\n */\nfunction strEnum(o) {\n  const result = {};\n  for (const key of o) {\n    result[key] = key;\n  }\n  return result;\n}\n/**\n * String enum containing the string types of property mappers.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport const MapperType = strEnum([\"Base64Url\", \"Boolean\", \"ByteArray\", \"Composite\", \"Date\", \"DateTime\", \"DateTimeRfc1123\", \"Dictionary\", \"Enum\", \"Number\", \"Object\", \"Sequence\", \"String\", \"Stream\", \"TimeSpan\", \"UnixTime\"]);","map":{"version":3,"names":["base64","utils","XML_ATTRKEY","XML_CHARKEY","Serializer","constructor","modelMappers","arguments","length","undefined","isXML","validateConstraints","mapper","value","objectName","failValidation","constraintName","constraintValue","Error","constraints","valueAsNumber","ExclusiveMaximum","ExclusiveMinimum","InclusiveMaximum","InclusiveMinimum","MaxItems","MaxLength","MinItems","MinLength","MultipleOf","Pattern","UniqueItems","valueAsArray","pattern","RegExp","match","some","item","i","ar","indexOf","serialize","object","options","updatedOptions","rootName","_a","includeRoot","_b","xmlCharKey","_c","payload","mapperType","type","name","serializedName","isConstant","defaultValue","required","nullable","serializeBasicTypes","enumMapper","serializeEnumType","allowedValues","serializeDateTypes","serializeByteArrayType","serializeBase64UrlType","serializeSequenceType","Boolean","serializeDictionaryType","serializeCompositeType","deserialize","responseBody","xmlIsWrapped","deserializeCompositeType","castResponseBody","parseFloat","isNaN","Date","unixTimeToDate","decodeString","base64UrlToByteArray","deserializeSequenceType","deserializeDictionaryType","trimEnd","str","ch","len","substr","bufferToBase64Url","buffer","Uint8Array","encodeByteArray","replace","valueOf","splitSerializeName","prop","classes","partialclass","subwords","split","charAt","push","dateToUnixTime","d","Math","floor","getTime","n","typeName","isValidUuid","objectType","ArrayBuffer","isView","Blob","isPresent","toLowerCase","JSON","stringify","returnValue","parse","toISOString","substring","toUTCString","isDuration","serializer","isXml","Array","isArray","elementType","element","tempArray","serializedValue","xmlNamespace","xmlnsKey","xmlNamespacePrefix","Object","assign","valueType","tempDictionary","key","keys","getXmlObjectValue","result","resolveAdditionalProperties","additionalProperties","className","modelMapper","resolveReferencedMapper","resolveModelProperties","modelProps","modelProperties","getPolymorphicDiscriminatorRecursively","getPolymorphicMapper","propertyMapper","readOnly","propName","parentObject","xmlName","xmlElementName","paths","pop","pathName","childObject","propertyObjectName","toSerialize","polymorphicDiscriminator","clientName","xmlIsAttribute","additionalPropertiesMapper","propNames","clientPropName","isAdditionalProperty","every","pn","includes","isSpecialXmlProperty","propertyName","instance","handledPropertyNames","headerCollectionPrefix","dictionary","headerKey","startsWith","xmlIsMsText","wrapped","elementList","property","propertyInstance","res","arrayInstance","k","v","entries","prototype","hasOwnProperty","call","responsePropName","polymorphicPropertyName","discriminatorName","discriminatorValue","uberParent","indexDiscriminator","polymorphicMapper","discriminators","getPolymorphicDiscriminatorSafely","serializeObject","castToSerialize","array","strEnum","o","MapperType"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\serializer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/* eslint-disable eqeqeq */\n\nimport * as base64 from \"./util/base64\";\nimport * as utils from \"./util/utils\";\nimport { SerializerOptions, XML_ATTRKEY, XML_CHARKEY } from \"./util/serializer.common\";\n\n// This file contains utility code to serialize and deserialize network operations according to `OperationSpec` objects generated by AutoRest.TypeScript from OpenAPI specifications.\n\n/**\n * Used to map raw response objects to final shapes.\n * Helps packing and unpacking Dates and other encoded types that are not intrinsic to JSON.\n * Also allows pulling values from headers, as well as inserting default values and constants.\n */\nexport class Serializer {\n  constructor(\n    /**\n     * The provided model mapper.\n     */\n    public readonly modelMappers: { [key: string]: any } = {},\n    /**\n     * Whether the contents are XML or not.\n     */\n    public readonly isXML?: boolean\n  ) {}\n\n  /**\n   * Validates constraints, if any. This function will throw if the provided value does not respect those constraints.\n   * @param mapper - The definition of data models.\n   * @param value - The value.\n   * @param objectName - Name of the object. Used in the error messages.\n   * @deprecated Removing the constraints validation on client side.\n   */\n  validateConstraints(mapper: Mapper, value: unknown, objectName: string): void {\n    const failValidation = (\n      constraintName: keyof MapperConstraints,\n      constraintValue: any\n    ): Error => {\n      throw new Error(\n        `\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`\n      );\n    };\n    if (mapper.constraints && value != undefined) {\n      const valueAsNumber = value as number;\n      const {\n        ExclusiveMaximum,\n        ExclusiveMinimum,\n        InclusiveMaximum,\n        InclusiveMinimum,\n        MaxItems,\n        MaxLength,\n        MinItems,\n        MinLength,\n        MultipleOf,\n        Pattern,\n        UniqueItems,\n      } = mapper.constraints;\n      if (ExclusiveMaximum != undefined && valueAsNumber >= ExclusiveMaximum) {\n        failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n      }\n      if (ExclusiveMinimum != undefined && valueAsNumber <= ExclusiveMinimum) {\n        failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n      }\n      if (InclusiveMaximum != undefined && valueAsNumber > InclusiveMaximum) {\n        failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n      }\n      if (InclusiveMinimum != undefined && valueAsNumber < InclusiveMinimum) {\n        failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n      }\n      const valueAsArray = value as any[];\n      if (MaxItems != undefined && valueAsArray.length > MaxItems) {\n        failValidation(\"MaxItems\", MaxItems);\n      }\n      if (MaxLength != undefined && valueAsArray.length > MaxLength) {\n        failValidation(\"MaxLength\", MaxLength);\n      }\n      if (MinItems != undefined && valueAsArray.length < MinItems) {\n        failValidation(\"MinItems\", MinItems);\n      }\n      if (MinLength != undefined && valueAsArray.length < MinLength) {\n        failValidation(\"MinLength\", MinLength);\n      }\n      if (MultipleOf != undefined && valueAsNumber % MultipleOf !== 0) {\n        failValidation(\"MultipleOf\", MultipleOf);\n      }\n      if (Pattern) {\n        const pattern: RegExp = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n        if (typeof value !== \"string\" || value.match(pattern) === null) {\n          failValidation(\"Pattern\", Pattern);\n        }\n      }\n      if (\n        UniqueItems &&\n        valueAsArray.some((item: any, i: number, ar: Array<any>) => ar.indexOf(item) !== i)\n      ) {\n        failValidation(\"UniqueItems\", UniqueItems);\n      }\n    }\n  }\n\n  /**\n   * Serialize the given object based on its metadata defined in the mapper.\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object.\n   * @param object - A valid Javascript object to be serialized.\n   * @param objectName - Name of the serialized object.\n   * @param options - additional options to deserialization.\n   * @returns A valid serialized Javascript object.\n   */\n  serialize(\n    mapper: Mapper,\n    object: unknown,\n    objectName?: string,\n    options: SerializerOptions = {}\n  ): any {\n    const updatedOptions: Required<SerializerOptions> = {\n      rootName: options.rootName ?? \"\",\n      includeRoot: options.includeRoot ?? false,\n      xmlCharKey: options.xmlCharKey ?? XML_CHARKEY,\n    };\n    let payload: any = {};\n    const mapperType = mapper.type.name as string;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n    if (mapperType.match(/^Sequence$/i) !== null) {\n      payload = [];\n    }\n\n    if (mapper.isConstant) {\n      object = mapper.defaultValue;\n    }\n\n    // This table of allowed values should help explain\n    // the mapper.required and mapper.nullable properties.\n    // X means \"neither undefined or null are allowed\".\n    //           || required\n    //           || true      | false\n    //  nullable || ==========================\n    //      true || null      | undefined/null\n    //     false || X         | undefined\n    // undefined || X         | undefined/null\n\n    const { required, nullable } = mapper;\n\n    if (required && nullable && object === undefined) {\n      throw new Error(`${objectName} cannot be undefined.`);\n    }\n    if (required && !nullable && object == undefined) {\n      throw new Error(`${objectName} cannot be null or undefined.`);\n    }\n    if (!required && nullable === false && object === null) {\n      throw new Error(`${objectName} cannot be null.`);\n    }\n\n    if (object == undefined) {\n      payload = object;\n    } else {\n      if (mapperType.match(/^any$/i) !== null) {\n        payload = object;\n      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n        payload = serializeBasicTypes(mapperType, objectName, object);\n      } else if (mapperType.match(/^Enum$/i) !== null) {\n        const enumMapper: EnumMapper = mapper as EnumMapper;\n        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n      } else if (\n        mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null\n      ) {\n        payload = serializeDateTypes(mapperType, object, objectName);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = serializeByteArrayType(objectName, object as Uint8Array);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = serializeBase64UrlType(objectName, object as Uint8Array);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = serializeSequenceType(\n          this,\n          mapper as SequenceMapper,\n          object,\n          objectName,\n          Boolean(this.isXML),\n          updatedOptions\n        );\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = serializeDictionaryType(\n          this,\n          mapper as DictionaryMapper,\n          object,\n          objectName,\n          Boolean(this.isXML),\n          updatedOptions\n        );\n      } else if (mapperType.match(/^Composite$/i) !== null) {\n        payload = serializeCompositeType(\n          this,\n          mapper as CompositeMapper,\n          object,\n          objectName,\n          Boolean(this.isXML),\n          updatedOptions\n        );\n      }\n    }\n    return payload;\n  }\n\n  /**\n   * Deserialize the given object based on its metadata defined in the mapper.\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object.\n   * @param responseBody - A valid Javascript entity to be deserialized.\n   * @param objectName - Name of the deserialized object.\n   * @param options - Controls behavior of XML parser and builder.\n   * @returns A valid deserialized Javascript object.\n   */\n  deserialize(\n    mapper: Mapper,\n    responseBody: unknown,\n    objectName: string,\n    options: SerializerOptions = {}\n  ): any {\n    const updatedOptions: Required<SerializerOptions> = {\n      rootName: options.rootName ?? \"\",\n      includeRoot: options.includeRoot ?? false,\n      xmlCharKey: options.xmlCharKey ?? XML_CHARKEY,\n    };\n    if (responseBody == undefined) {\n      if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n        // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n        // between the list being empty versus being missing,\n        // so let's do the more user-friendly thing and return an empty list.\n        responseBody = [];\n      }\n      // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n      if (mapper.defaultValue !== undefined) {\n        responseBody = mapper.defaultValue;\n      }\n      return responseBody;\n    }\n\n    let payload: any;\n    const mapperType = mapper.type.name;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n\n    if (mapperType.match(/^Composite$/i) !== null) {\n      payload = deserializeCompositeType(\n        this,\n        mapper as CompositeMapper,\n        responseBody,\n        objectName,\n        updatedOptions\n      );\n    } else {\n      if (this.isXML) {\n        const xmlCharKey = updatedOptions.xmlCharKey;\n        const castResponseBody = responseBody as Record<string, unknown>;\n        /**\n         * If the mapper specifies this as a non-composite type value but the responseBody contains\n         * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n         * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n         */\n        if (\n          castResponseBody[XML_ATTRKEY] != undefined &&\n          castResponseBody[xmlCharKey] != undefined\n        ) {\n          responseBody = castResponseBody[xmlCharKey];\n        }\n      }\n\n      if (mapperType.match(/^Number$/i) !== null) {\n        payload = parseFloat(responseBody as string);\n        if (isNaN(payload)) {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^Boolean$/i) !== null) {\n        if (responseBody === \"true\") {\n          payload = true;\n        } else if (responseBody === \"false\") {\n          payload = false;\n        } else {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n        payload = responseBody;\n      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n        payload = new Date(responseBody as string);\n      } else if (mapperType.match(/^UnixTime$/i) !== null) {\n        payload = unixTimeToDate(responseBody as number);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = base64.decodeString(responseBody as string);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = base64UrlToByteArray(responseBody as string);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = deserializeSequenceType(\n          this,\n          mapper as SequenceMapper,\n          responseBody,\n          objectName,\n          updatedOptions\n        );\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = deserializeDictionaryType(\n          this,\n          mapper as DictionaryMapper,\n          responseBody,\n          objectName,\n          updatedOptions\n        );\n      }\n    }\n\n    if (mapper.isConstant) {\n      payload = mapper.defaultValue;\n    }\n\n    return payload;\n  }\n}\n\nfunction trimEnd(str: string, ch: string): string {\n  let len = str.length;\n  while (len - 1 >= 0 && str[len - 1] === ch) {\n    --len;\n  }\n  return str.substr(0, len);\n}\n\nfunction bufferToBase64Url(buffer: any): string | undefined {\n  if (!buffer) {\n    return undefined;\n  }\n  if (!(buffer instanceof Uint8Array)) {\n    throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n  }\n  // Uint8Array to Base64.\n  const str = base64.encodeByteArray(buffer);\n  // Base64 to Base64Url.\n  return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n\nfunction base64UrlToByteArray(str: string): Uint8Array | undefined {\n  if (!str) {\n    return undefined;\n  }\n  if (str && typeof str.valueOf() !== \"string\") {\n    throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n  }\n  // Base64Url to Base64.\n  str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  // Base64 to Uint8Array.\n  return base64.decodeString(str);\n}\n\nfunction splitSerializeName(prop: string | undefined): string[] {\n  const classes: string[] = [];\n  let partialclass = \"\";\n  if (prop) {\n    const subwords = prop.split(\".\");\n\n    for (const item of subwords) {\n      if (item.charAt(item.length - 1) === \"\\\\\") {\n        partialclass += item.substr(0, item.length - 1) + \".\";\n      } else {\n        partialclass += item;\n        classes.push(partialclass);\n        partialclass = \"\";\n      }\n    }\n  }\n\n  return classes;\n}\n\nfunction dateToUnixTime(d: string | Date): number | undefined {\n  if (!d) {\n    return undefined;\n  }\n\n  if (typeof d.valueOf() === \"string\") {\n    d = new Date(d as string);\n  }\n  return Math.floor((d as Date).getTime() / 1000);\n}\n\nfunction unixTimeToDate(n: number): Date | undefined {\n  if (!n) {\n    return undefined;\n  }\n  return new Date(n * 1000);\n}\n\nfunction serializeBasicTypes(typeName: string, objectName: string, value: any): any {\n  if (value !== null && value !== undefined) {\n    if (typeName.match(/^Number$/i) !== null) {\n      if (typeof value !== \"number\") {\n        throw new Error(`${objectName} with value ${value} must be of type number.`);\n      }\n    } else if (typeName.match(/^String$/i) !== null) {\n      if (typeof value.valueOf() !== \"string\") {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n      }\n    } else if (typeName.match(/^Uuid$/i) !== null) {\n      if (!(typeof value.valueOf() === \"string\" && utils.isValidUuid(value))) {\n        throw new Error(\n          `${objectName} with value \"${value}\" must be of type string and a valid uuid.`\n        );\n      }\n    } else if (typeName.match(/^Boolean$/i) !== null) {\n      if (typeof value !== \"boolean\") {\n        throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n      }\n    } else if (typeName.match(/^Stream$/i) !== null) {\n      const objectType = typeof value;\n      if (\n        objectType !== \"string\" &&\n        objectType !== \"function\" &&\n        !(value instanceof ArrayBuffer) &&\n        !ArrayBuffer.isView(value) &&\n        !((typeof Blob === \"function\" || typeof Blob === \"object\") && value instanceof Blob)\n      ) {\n        throw new Error(\n          `${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, or a function returning NodeJS.ReadableStream.`\n        );\n      }\n    }\n  }\n\n  return value;\n}\n\nfunction serializeEnumType(objectName: string, allowedValues: Array<any>, value: any): any {\n  if (!allowedValues) {\n    throw new Error(\n      `Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`\n    );\n  }\n  const isPresent = allowedValues.some((item) => {\n    if (typeof item.valueOf() === \"string\") {\n      return item.toLowerCase() === value.toLowerCase();\n    }\n    return item === value;\n  });\n  if (!isPresent) {\n    throw new Error(\n      `${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(\n        allowedValues\n      )}.`\n    );\n  }\n  return value;\n}\n\nfunction serializeByteArrayType(objectName: string, value: Uint8Array): string {\n  let returnValue: string = \"\";\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    returnValue = base64.encodeByteArray(value);\n  }\n  return returnValue;\n}\n\nfunction serializeBase64UrlType(objectName: string, value: Uint8Array): string {\n  let returnValue: string = \"\";\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    returnValue = bufferToBase64Url(value) || \"\";\n  }\n  return returnValue;\n}\n\nfunction serializeDateTypes(typeName: string, value: any, objectName: string): any {\n  if (value != undefined) {\n    if (typeName.match(/^Date$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value =\n        value instanceof Date\n          ? value.toISOString().substring(0, 10)\n          : new Date(value).toISOString().substring(0, 10);\n    } else if (typeName.match(/^DateTime$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n    } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n      }\n      value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n    } else if (typeName.match(/^UnixTime$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(\n          `${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n            `for it to be serialized in UnixTime/Epoch format.`\n        );\n      }\n      value = dateToUnixTime(value);\n    } else if (typeName.match(/^TimeSpan$/i) !== null) {\n      if (!utils.isDuration(value)) {\n        throw new Error(\n          `${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`\n        );\n      }\n    }\n  }\n  return value;\n}\n\nfunction serializeSequenceType(\n  serializer: Serializer,\n  mapper: SequenceMapper,\n  object: any,\n  objectName: string,\n  isXml: boolean,\n  options: Required<SerializerOptions>\n): any[] {\n  if (!Array.isArray(object)) {\n    throw new Error(`${objectName} must be of type Array.`);\n  }\n  const elementType = mapper.type.element;\n  if (!elementType || typeof elementType !== \"object\") {\n    throw new Error(\n      `element\" metadata for an Array must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}.`\n    );\n  }\n  const tempArray = [];\n  for (let i = 0; i < object.length; i++) {\n    const serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n\n    if (isXml && elementType.xmlNamespace) {\n      const xmlnsKey = elementType.xmlNamespacePrefix\n        ? `xmlns:${elementType.xmlNamespacePrefix}`\n        : \"xmlns\";\n      if (elementType.type.name === \"Composite\") {\n        tempArray[i] = { ...serializedValue };\n        tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n      } else {\n        tempArray[i] = {};\n        tempArray[i][options.xmlCharKey] = serializedValue;\n        tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n      }\n    } else {\n      tempArray[i] = serializedValue;\n    }\n  }\n  return tempArray;\n}\n\nfunction serializeDictionaryType(\n  serializer: Serializer,\n  mapper: DictionaryMapper,\n  object: any,\n  objectName: string,\n  isXml: boolean,\n  options: Required<SerializerOptions>\n): { [key: string]: any } {\n  if (typeof object !== \"object\") {\n    throw new Error(`${objectName} must be of type object.`);\n  }\n  const valueType = mapper.type.value;\n  if (!valueType || typeof valueType !== \"object\") {\n    throw new Error(\n      `\"value\" metadata for a Dictionary must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}.`\n    );\n  }\n  const tempDictionary: { [key: string]: any } = {};\n  for (const key of Object.keys(object)) {\n    const serializedValue = serializer.serialize(valueType, object[key], objectName, options);\n    // If the element needs an XML namespace we need to add it within the $ property\n    tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n  }\n\n  // Add the namespace to the root element if needed\n  if (isXml && mapper.xmlNamespace) {\n    const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n\n    const result = tempDictionary;\n    result[XML_ATTRKEY] = { [xmlnsKey]: mapper.xmlNamespace };\n    return result;\n  }\n\n  return tempDictionary;\n}\n\n/**\n * Resolves the additionalProperties property from a referenced mapper.\n * @param serializer - The serializer containing the entire set of mappers.\n * @param mapper - The composite mapper to resolve.\n * @param objectName - Name of the object being serialized.\n */\nfunction resolveAdditionalProperties(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string\n): SequenceMapper | BaseMapper | CompositeMapper | DictionaryMapper | EnumMapper | undefined {\n  const additionalProperties = mapper.type.additionalProperties;\n\n  if (!additionalProperties && mapper.type.className) {\n    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n    return modelMapper?.type.additionalProperties;\n  }\n\n  return additionalProperties;\n}\n\n/**\n * Finds the mapper referenced by `className`.\n * @param serializer - The serializer containing the entire set of mappers\n * @param mapper - The composite mapper to resolve\n * @param objectName - Name of the object being serialized\n */\nfunction resolveReferencedMapper(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string\n): CompositeMapper | undefined {\n  const className = mapper.type.className;\n  if (!className) {\n    throw new Error(\n      `Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(\n        mapper,\n        undefined,\n        2\n      )}\".`\n    );\n  }\n\n  return serializer.modelMappers[className];\n}\n\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - The serializer containing the entire set of mappers\n * @param mapper - The composite mapper to resolve\n */\nfunction resolveModelProperties(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string\n): { [propertyName: string]: Mapper } {\n  let modelProps = mapper.type.modelProperties;\n  if (!modelProps) {\n    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n    if (!modelMapper) {\n      throw new Error(`mapper() cannot be null or undefined for model \"${mapper.type.className}\".`);\n    }\n    modelProps = modelMapper?.type.modelProperties;\n    if (!modelProps) {\n      throw new Error(\n        `modelProperties cannot be null or undefined in the ` +\n          `mapper \"${JSON.stringify(modelMapper)}\" of type \"${\n            mapper.type.className\n          }\" for object \"${objectName}\".`\n      );\n    }\n  }\n\n  return modelProps;\n}\n\nfunction serializeCompositeType(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  object: any,\n  objectName: string,\n  isXml: boolean,\n  options: Required<SerializerOptions>\n): any {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n  }\n\n  if (object != undefined) {\n    const payload: any = {};\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    for (const key of Object.keys(modelProps)) {\n      const propertyMapper = modelProps[key];\n      if (propertyMapper.readOnly) {\n        continue;\n      }\n\n      let propName: string | undefined;\n      let parentObject: any = payload;\n      if (serializer.isXML) {\n        if (propertyMapper.xmlIsWrapped) {\n          propName = propertyMapper.xmlName;\n        } else {\n          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n        }\n      } else {\n        const paths = splitSerializeName(propertyMapper.serializedName!);\n        propName = paths.pop();\n\n        for (const pathName of paths) {\n          const childObject = parentObject[pathName];\n          if (\n            childObject == undefined &&\n            (object[key] != undefined || propertyMapper.defaultValue !== undefined)\n          ) {\n            parentObject[pathName] = {};\n          }\n          parentObject = parentObject[pathName];\n        }\n      }\n\n      if (parentObject != undefined) {\n        if (isXml && mapper.xmlNamespace) {\n          const xmlnsKey = mapper.xmlNamespacePrefix\n            ? `xmlns:${mapper.xmlNamespacePrefix}`\n            : \"xmlns\";\n          parentObject[XML_ATTRKEY] = {\n            ...parentObject[XML_ATTRKEY],\n            [xmlnsKey]: mapper.xmlNamespace,\n          };\n        }\n        const propertyObjectName =\n          propertyMapper.serializedName !== \"\"\n            ? objectName + \".\" + propertyMapper.serializedName\n            : objectName;\n\n        let toSerialize = object[key];\n        const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n        if (\n          polymorphicDiscriminator &&\n          polymorphicDiscriminator.clientName === key &&\n          toSerialize == undefined\n        ) {\n          toSerialize = mapper.serializedName;\n        }\n\n        const serializedValue = serializer.serialize(\n          propertyMapper,\n          toSerialize,\n          propertyObjectName,\n          options\n        );\n\n        if (serializedValue !== undefined && propName != undefined) {\n          const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n          if (isXml && propertyMapper.xmlIsAttribute) {\n            // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n            // This keeps things simple while preventing name collision\n            // with names in user documents.\n            parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {};\n            parentObject[XML_ATTRKEY][propName] = serializedValue;\n          } else if (isXml && propertyMapper.xmlIsWrapped) {\n            parentObject[propName] = { [propertyMapper.xmlElementName!]: value };\n          } else {\n            parentObject[propName] = value;\n          }\n        }\n      }\n    }\n\n    const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n    if (additionalPropertiesMapper) {\n      const propNames = Object.keys(modelProps);\n      for (const clientPropName in object) {\n        const isAdditionalProperty = propNames.every((pn) => pn !== clientPropName);\n        if (isAdditionalProperty) {\n          payload[clientPropName] = serializer.serialize(\n            additionalPropertiesMapper,\n            object[clientPropName],\n            objectName + '[\"' + clientPropName + '\"]',\n            options\n          );\n        }\n      }\n    }\n\n    return payload;\n  }\n  return object;\n}\n\nfunction getXmlObjectValue(\n  propertyMapper: Mapper,\n  serializedValue: any,\n  isXml: boolean,\n  options: Required<SerializerOptions>\n): any {\n  if (!isXml || !propertyMapper.xmlNamespace) {\n    return serializedValue;\n  }\n\n  const xmlnsKey = propertyMapper.xmlNamespacePrefix\n    ? `xmlns:${propertyMapper.xmlNamespacePrefix}`\n    : \"xmlns\";\n  const xmlNamespace = { [xmlnsKey]: propertyMapper.xmlNamespace };\n\n  if ([\"Composite\"].includes(propertyMapper.type.name)) {\n    if (serializedValue[XML_ATTRKEY]) {\n      return serializedValue;\n    } else {\n      const result: any = { ...serializedValue };\n      result[XML_ATTRKEY] = xmlNamespace;\n      return result;\n    }\n  }\n  const result: any = {};\n  result[options.xmlCharKey] = serializedValue;\n  result[XML_ATTRKEY] = xmlNamespace;\n  return result;\n}\n\nfunction isSpecialXmlProperty(propertyName: string, options: Required<SerializerOptions>): boolean {\n  return [XML_ATTRKEY, options.xmlCharKey].includes(propertyName);\n}\n\nfunction deserializeCompositeType(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  responseBody: any,\n  objectName: string,\n  options: Required<SerializerOptions>\n): any {\n  const xmlCharKey = options.xmlCharKey ?? XML_CHARKEY;\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n  }\n\n  const modelProps = resolveModelProperties(serializer, mapper, objectName);\n  let instance: { [key: string]: any } = {};\n  const handledPropertyNames: string[] = [];\n\n  for (const key of Object.keys(modelProps)) {\n    const propertyMapper = modelProps[key];\n    const paths = splitSerializeName(modelProps[key].serializedName!);\n    handledPropertyNames.push(paths[0]);\n    const { serializedName, xmlName, xmlElementName } = propertyMapper;\n    let propertyObjectName = objectName;\n    if (serializedName !== \"\" && serializedName !== undefined) {\n      propertyObjectName = objectName + \".\" + serializedName;\n    }\n\n    const headerCollectionPrefix = (propertyMapper as DictionaryMapper).headerCollectionPrefix;\n    if (headerCollectionPrefix) {\n      const dictionary: any = {};\n      for (const headerKey of Object.keys(responseBody)) {\n        if (headerKey.startsWith(headerCollectionPrefix)) {\n          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(\n            (propertyMapper as DictionaryMapper).type.value,\n            responseBody[headerKey],\n            propertyObjectName,\n            options\n          );\n        }\n\n        handledPropertyNames.push(headerKey);\n      }\n      instance[key] = dictionary;\n    } else if (serializer.isXML) {\n      if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) {\n        instance[key] = serializer.deserialize(\n          propertyMapper,\n          responseBody[XML_ATTRKEY][xmlName!],\n          propertyObjectName,\n          options\n        );\n      } else if (propertyMapper.xmlIsMsText) {\n        if (responseBody[xmlCharKey] !== undefined) {\n          instance[key] = responseBody[xmlCharKey];\n        } else if (typeof responseBody === \"string\") {\n          // The special case where xml parser parses \"<Name>content</Name>\" into JSON of\n          //   `{ name: \"content\"}` instead of `{ name: { \"_\": \"content\" }}`\n          instance[key] = responseBody;\n        }\n      } else {\n        const propertyName = xmlElementName || xmlName || serializedName;\n        if (propertyMapper.xmlIsWrapped) {\n          /* a list of <xmlElementName> wrapped by <xmlName>\n            For the xml example below\n              <Cors>\n                <CorsRule>...</CorsRule>\n                <CorsRule>...</CorsRule>\n              </Cors>\n            the responseBody has\n              {\n                Cors: {\n                  CorsRule: [{...}, {...}]\n                }\n              }\n            xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n          */\n          const wrapped = responseBody[xmlName!];\n          const elementList = wrapped?.[xmlElementName!] ?? [];\n          instance[key] = serializer.deserialize(\n            propertyMapper,\n            elementList,\n            propertyObjectName,\n            options\n          );\n          handledPropertyNames.push(xmlName!);\n        } else {\n          const property = responseBody[propertyName!];\n          instance[key] = serializer.deserialize(\n            propertyMapper,\n            property,\n            propertyObjectName,\n            options\n          );\n          handledPropertyNames.push(propertyName!);\n        }\n      }\n    } else {\n      // deserialize the property if it is present in the provided responseBody instance\n      let propertyInstance;\n      let res = responseBody;\n      // traversing the object step by step.\n      for (const item of paths) {\n        if (!res) break;\n        res = res[item];\n      }\n      propertyInstance = res;\n      const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n      // checking that the model property name (key)(ex: \"fishtype\") and the\n      // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n      // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n      // is a better approach. The generator is not consistent with escaping '\\.' in the\n      // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n      // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n      // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n      // the transformation of model property name (ex: \"fishtype\") is done consistently.\n      // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n      if (\n        polymorphicDiscriminator &&\n        key === polymorphicDiscriminator.clientName &&\n        propertyInstance == undefined\n      ) {\n        propertyInstance = mapper.serializedName;\n      }\n\n      let serializedValue;\n      // paging\n      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n        propertyInstance = responseBody[key];\n        const arrayInstance = serializer.deserialize(\n          propertyMapper,\n          propertyInstance,\n          propertyObjectName,\n          options\n        );\n        // Copy over any properties that have already been added into the instance, where they do\n        // not exist on the newly de-serialized array\n        for (const [k, v] of Object.entries(instance)) {\n          if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {\n            arrayInstance[k] = v;\n          }\n        }\n        instance = arrayInstance;\n      } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n        serializedValue = serializer.deserialize(\n          propertyMapper,\n          propertyInstance,\n          propertyObjectName,\n          options\n        );\n        instance[key] = serializedValue;\n      }\n    }\n  }\n\n  const additionalPropertiesMapper = mapper.type.additionalProperties;\n  if (additionalPropertiesMapper) {\n    const isAdditionalProperty = (responsePropName: string): boolean => {\n      for (const clientPropName in modelProps) {\n        const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n        if (paths[0] === responsePropName) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    for (const responsePropName in responseBody) {\n      if (isAdditionalProperty(responsePropName)) {\n        instance[responsePropName] = serializer.deserialize(\n          additionalPropertiesMapper,\n          responseBody[responsePropName],\n          objectName + '[\"' + responsePropName + '\"]',\n          options\n        );\n      }\n    }\n  } else if (responseBody) {\n    for (const key of Object.keys(responseBody)) {\n      if (\n        instance[key] === undefined &&\n        !handledPropertyNames.includes(key) &&\n        !isSpecialXmlProperty(key, options)\n      ) {\n        instance[key] = responseBody[key];\n      }\n    }\n  }\n\n  return instance;\n}\n\nfunction deserializeDictionaryType(\n  serializer: Serializer,\n  mapper: DictionaryMapper,\n  responseBody: any,\n  objectName: string,\n  options: Required<SerializerOptions>\n): { [key: string]: any } {\n  const value = mapper.type.value;\n  if (!value || typeof value !== \"object\") {\n    throw new Error(\n      `\"value\" metadata for a Dictionary must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}`\n    );\n  }\n  if (responseBody) {\n    const tempDictionary: { [key: string]: any } = {};\n    for (const key of Object.keys(responseBody)) {\n      tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n    }\n    return tempDictionary;\n  }\n  return responseBody;\n}\n\nfunction deserializeSequenceType(\n  serializer: Serializer,\n  mapper: SequenceMapper,\n  responseBody: any,\n  objectName: string,\n  options: Required<SerializerOptions>\n): any[] {\n  const element = mapper.type.element;\n  if (!element || typeof element !== \"object\") {\n    throw new Error(\n      `element\" metadata for an Array must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}`\n    );\n  }\n  if (responseBody) {\n    if (!Array.isArray(responseBody)) {\n      // xml2js will interpret a single element array as just the element, so force it to be an array\n      responseBody = [responseBody];\n    }\n\n    const tempArray = [];\n    for (let i = 0; i < responseBody.length; i++) {\n      tempArray[i] = serializer.deserialize(\n        element,\n        responseBody[i],\n        `${objectName}[${i}]`,\n        options\n      );\n    }\n    return tempArray;\n  }\n  return responseBody;\n}\n\nfunction getPolymorphicMapper(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  object: any,\n  polymorphicPropertyName: \"clientName\" | \"serializedName\"\n): CompositeMapper {\n  const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n  if (polymorphicDiscriminator) {\n    const discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n    if (discriminatorName != undefined) {\n      const discriminatorValue = object[discriminatorName];\n      if (discriminatorValue != undefined) {\n        const typeName = mapper.type.uberParent || mapper.type.className;\n        const indexDiscriminator =\n          discriminatorValue === typeName\n            ? discriminatorValue\n            : typeName + \".\" + discriminatorValue;\n        const polymorphicMapper = serializer.modelMappers.discriminators[indexDiscriminator];\n        if (polymorphicMapper) {\n          mapper = polymorphicMapper;\n        }\n      }\n    }\n  }\n  return mapper;\n}\n\nfunction getPolymorphicDiscriminatorRecursively(\n  serializer: Serializer,\n  mapper: CompositeMapper\n): PolymorphicDiscriminator | undefined {\n  return (\n    mapper.type.polymorphicDiscriminator ||\n    getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||\n    getPolymorphicDiscriminatorSafely(serializer, mapper.type.className)\n  );\n}\n\nfunction getPolymorphicDiscriminatorSafely(serializer: Serializer, typeName?: string): any {\n  return (\n    typeName &&\n    serializer.modelMappers[typeName] &&\n    serializer.modelMappers[typeName].type.polymorphicDiscriminator\n  );\n}\n\n/**\n * Description of various value constraints such as integer ranges and string regex.\n */\nexport interface MapperConstraints {\n  /**\n   * The value should be less than or equal to the `InclusiveMaximum` value.\n   */\n  InclusiveMaximum?: number;\n  /**\n   * The value should be less than the `ExclusiveMaximum` value.\n   */\n  ExclusiveMaximum?: number;\n  /**\n   * The value should be greater than or equal to the `InclusiveMinimum` value.\n   */\n  InclusiveMinimum?: number;\n  /**\n   * The value should be greater than the `InclusiveMinimum` value.\n   */\n  ExclusiveMinimum?: number;\n  /**\n   * The length should be smaller than the `MaxLength`.\n   */\n  MaxLength?: number;\n  /**\n   * The length should be bigger than the `MinLength`.\n   */\n  MinLength?: number;\n  /**\n   * The value must match the pattern.\n   */\n  Pattern?: RegExp;\n  /**\n   * The value must contain fewer items than the MaxItems value.\n   */\n  MaxItems?: number;\n  /**\n   * The value must contain more items than the `MinItems` value.\n   */\n  MinItems?: number;\n  /**\n   * The value must contain only unique items.\n   */\n  UniqueItems?: true;\n  /**\n   * The value should be exactly divisible by the `MultipleOf` value.\n   */\n  MultipleOf?: number;\n}\n\n/**\n * Type of the mapper. Includes known mappers.\n */\nexport type MapperType =\n  | SimpleMapperType\n  | CompositeMapperType\n  | SequenceMapperType\n  | DictionaryMapperType\n  | EnumMapperType;\n\n/**\n * The type of a simple mapper.\n */\nexport interface SimpleMapperType {\n  /**\n   * Name of the type of the property.\n   */\n  name:\n    | \"Base64Url\"\n    | \"Boolean\"\n    | \"ByteArray\"\n    | \"Date\"\n    | \"DateTime\"\n    | \"DateTimeRfc1123\"\n    | \"Object\"\n    | \"Stream\"\n    | \"String\"\n    | \"TimeSpan\"\n    | \"UnixTime\"\n    | \"Uuid\"\n    | \"Number\"\n    | \"any\";\n}\n\n/**\n * Helps build a mapper that describes how to map a set of properties of an object based on other mappers.\n *\n * Only one of the following properties should be present: `className`, `modelProperties` and `additionalProperties`.\n */\nexport interface CompositeMapperType {\n  /**\n   * Name of the composite mapper type.\n   */\n  name: \"Composite\";\n\n  /**\n   * Use `className` to reference another type definition.\n   */\n  className?: string;\n\n  /**\n   * Use `modelProperties` when the reference to the other type has been resolved.\n   */\n  modelProperties?: { [propertyName: string]: Mapper };\n\n  /**\n   * Used when a model has `additionalProperties: true`. Allows the generic processing of unnamed model properties on the response object.\n   */\n  additionalProperties?: Mapper;\n\n  /**\n   * The name of the top-most parent scheme, the one that has no parents.\n   */\n  uberParent?: string;\n\n  /**\n   * A polymorphic discriminator.\n   */\n  polymorphicDiscriminator?: PolymorphicDiscriminator;\n}\n\n/**\n * Helps build a mapper that describes how to parse a sequence of mapped values.\n */\nexport interface SequenceMapperType {\n  /**\n   * Name of the sequence type mapper.\n   */\n  name: \"Sequence\";\n  /**\n   * The mapper to use to map each one of the properties of the sequence.\n   */\n  element: Mapper;\n}\n\n/**\n * Helps build a mapper that describes how to parse a dictionary of mapped values.\n */\nexport interface DictionaryMapperType {\n  /**\n   * Name of the sequence type mapper.\n   */\n  name: \"Dictionary\";\n  /**\n   * The mapper to use to map the value of each property in the dictionary.\n   */\n  value: Mapper;\n}\n\n/**\n * Helps build a mapper that describes how to parse an enum value.\n */\nexport interface EnumMapperType {\n  /**\n   * Name of the enum type mapper.\n   */\n  name: \"Enum\";\n  /**\n   * Values allowed by this mapper.\n   */\n  allowedValues: any[];\n}\n\n/**\n * The base definition of a mapper. Can be used for XML and plain JavaScript objects.\n */\nexport interface BaseMapper {\n  /**\n   * Name for the xml element\n   */\n  xmlName?: string;\n  /**\n   * Xml element namespace\n   */\n  xmlNamespace?: string;\n  /**\n   * Xml element namespace prefix\n   */\n  xmlNamespacePrefix?: string;\n  /**\n   * Determines if the current property should be serialized as an attribute of the parent xml element\n   */\n  xmlIsAttribute?: boolean;\n  /**\n   * Determines if the current property should be serialized as the inner content of the xml element\n   */\n  xmlIsMsText?: boolean;\n  /**\n   * Name for the xml elements when serializing an array\n   */\n  xmlElementName?: string;\n  /**\n   * Whether or not the current property should have a wrapping XML element\n   */\n  xmlIsWrapped?: boolean;\n  /**\n   * Whether or not the current property is readonly\n   */\n  readOnly?: boolean;\n  /**\n   * Whether or not the current property is a constant\n   */\n  isConstant?: boolean;\n  /**\n   * Whether or not the current property is required\n   */\n  required?: boolean;\n  /**\n   * Whether or not the current property allows mull as a value\n   */\n  nullable?: boolean;\n  /**\n   * The name to use when serializing\n   */\n  serializedName?: string;\n  /**\n   * Type of the mapper\n   */\n  type: MapperType;\n  /**\n   * Default value when one is not explicitly provided\n   */\n  defaultValue?: any;\n  /**\n   * Constraints to test the current value against\n   */\n  constraints?: MapperConstraints;\n}\n\n/**\n * Mappers are definitions of the data models used in the library.\n * These data models are part of the Operation or Client definitions in the responses or parameters.\n */\nexport type Mapper = BaseMapper | CompositeMapper | SequenceMapper | DictionaryMapper | EnumMapper;\n\n/**\n * Used to disambiguate discriminated type unions.\n * For example, if response can have many shapes but also includes a 'kind' field (or similar),\n * that field can be used to determine how to deserialize the response to the correct type.\n */\nexport interface PolymorphicDiscriminator {\n  /**\n   * Name of the discriminant property in the original JSON payload, e.g. `@odata.kind`.\n   */\n  serializedName: string;\n  /**\n   * Name to use on the resulting object instead of the original property name.\n   * Useful since the JSON property could be difficult to work with.\n   * For example: For a field received as `@odata.kind`, the final object could instead include a property simply named `kind`.\n   */\n  clientName: string;\n  /**\n   * It may contain any other property.\n   */\n  [key: string]: string;\n}\n\n/**\n * A mapper composed of other mappers.\n */\nexport interface CompositeMapper extends BaseMapper {\n  /**\n   * The type descriptor of the `CompositeMapper`.\n   */\n  type: CompositeMapperType;\n}\n\n/**\n * A mapper describing arrays.\n */\nexport interface SequenceMapper extends BaseMapper {\n  /**\n   * The type descriptor of the `SequenceMapper`.\n   */\n  type: SequenceMapperType;\n}\n\n/**\n * A mapper describing plain JavaScript objects used as key/value pairs.\n */\nexport interface DictionaryMapper extends BaseMapper {\n  /**\n   * The type descriptor of the `DictionaryMapper`.\n   */\n  type: DictionaryMapperType;\n  /**\n   * Optionally, a prefix to add to the header collection.\n   */\n  headerCollectionPrefix?: string;\n}\n\n/**\n * A mapper describing an enum value.\n */\nexport interface EnumMapper extends BaseMapper {\n  /**\n   * The type descriptor of the `EnumMapper`.\n   */\n  type: EnumMapperType;\n}\n\n/**\n * An interface representing an URL parameter value.\n */\nexport interface UrlParameterValue {\n  /**\n   * The URL value.\n   */\n  value: string;\n  /**\n   * Whether to keep or skip URL encoding.\n   */\n  skipUrlEncoding: boolean;\n}\n\n/**\n * Utility function that serializes an object that might contain binary information into a plain object, array or a string.\n */\nexport function serializeObject(toSerialize: unknown): any {\n  const castToSerialize = toSerialize as Record<string, unknown>;\n  if (toSerialize == undefined) return undefined;\n  if (toSerialize instanceof Uint8Array) {\n    toSerialize = base64.encodeByteArray(toSerialize);\n    return toSerialize;\n  } else if (toSerialize instanceof Date) {\n    return toSerialize.toISOString();\n  } else if (Array.isArray(toSerialize)) {\n    const array = [];\n    for (let i = 0; i < toSerialize.length; i++) {\n      array.push(serializeObject(toSerialize[i]));\n    }\n    return array;\n  } else if (typeof toSerialize === \"object\") {\n    const dictionary: { [key: string]: any } = {};\n    for (const property in toSerialize) {\n      dictionary[property] = serializeObject(castToSerialize[property]);\n    }\n    return dictionary;\n  }\n  return toSerialize;\n}\n\n/**\n * Utility function to create a K:V from a list of strings\n */\nfunction strEnum<T extends string>(o: Array<T>): { [K in T]: K } {\n  const result: any = {};\n  for (const key of o) {\n    result[key] = key;\n  }\n  return result;\n}\n\n/**\n * String enum containing the string types of property mappers.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport const MapperType = strEnum([\n  \"Base64Url\",\n  \"Boolean\",\n  \"ByteArray\",\n  \"Composite\",\n  \"Date\",\n  \"DateTime\",\n  \"DateTimeRfc1123\",\n  \"Dictionary\",\n  \"Enum\",\n  \"Number\",\n  \"Object\",\n  \"Sequence\",\n  \"String\",\n  \"Stream\",\n  \"TimeSpan\",\n  \"UnixTime\",\n]);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}