{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(ExtractPageRangeInfoItems);\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { HttpHeaders, isNode, URLBuilder } from \"@azure/core-http\";\nimport { DevelopmentConnectionString, HeaderConstants, PathStylePorts, URLConstants } from \"./constants\";\n/**\n * Reserved URL characters must be properly escaped for Storage services like Blob or File.\n *\n * ## URL encode and escape strategy for JS SDKs\n *\n * When customers pass a URL string into XxxClient classes constructor, the URL string may already be URL encoded or not.\n * But before sending to Azure Storage server, the URL must be encoded. However, it's hard for a SDK to guess whether the URL\n * string has been encoded or not. We have 2 potential strategies, and chose strategy two for the XxxClient constructors.\n *\n * ### Strategy One: Assume the customer URL string is not encoded, and always encode URL string in SDK.\n *\n * This is what legacy V2 SDK does, simple and works for most of the cases.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%253A\" and send to server. A blob named \"b%3A\" will be created.\n *\n * But this strategy will make it not possible to create a blob with \"?\" in it's name. Because when customer URL string is\n * \"http://account.blob.core.windows.net/con/blob?name\", the \"?name\" will be treated as URL paramter instead of blob name.\n * If customer URL string is \"http://account.blob.core.windows.net/con/blob%3Fname\", a blob named \"blob%3Fname\" will be created.\n * V2 SDK doesn't have this issue because it doesn't allow customer pass in a full URL, it accepts a separate blob name and encodeURIComponent for it.\n * We cannot accept a SDK cannot create a blob name with \"?\". So we implement strategy two:\n *\n * ### Strategy Two: SDK doesn't assume the URL has been encoded or not. It will just escape the special characters.\n *\n * This is what V10 Blob Go SDK does. It accepts a URL type in Go, and call url.EscapedPath() to escape the special chars unescaped.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will escape \":\" like \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%3A\" to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%253A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%253A\" to server. A blob named \"b%3A\" will be created.\n *\n * This strategy gives us flexibility to create with any special characters. But \"%\" will be treated as a special characters, if the URL string\n * is not encoded, there shouldn't a \"%\" in the URL string, otherwise the URL is not a valid URL.\n * If customer needs to create a blob with \"%\" in it's blob name, use \"%25\" instead of \"%\". Just like above 3rd sample.\n * And following URL strings are invalid:\n * - \"http://account.blob.core.windows.net/con/b%\"\n * - \"http://account.blob.core.windows.net/con/b%2\"\n * - \"http://account.blob.core.windows.net/con/b%G\"\n *\n * Another special character is \"?\", use \"%2F\" to represent a blob name with \"?\" in a URL string.\n *\n * ### Strategy for containerName, blobName or other specific XXXName parameters in methods such as `containerClient.getBlobClient(blobName)`\n *\n * We will apply strategy one, and call encodeURIComponent for these parameters like blobName. Because what customers passes in is a plain name instead of a URL.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata\n *\n * @param url -\n */\nexport function escapeURLPath(url) {\n  var urlParsed = URLBuilder.parse(url);\n  var path = urlParsed.getPath();\n  path = path || \"/\";\n  path = escape(path);\n  urlParsed.setPath(path);\n  return urlParsed.toString();\n}\nfunction getProxyUriFromDevConnString(connectionString) {\n  // Development Connection String\n  // https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string#connect-to-the-emulator-account-using-the-well-known-account-name-and-key\n  var proxyUri = \"\";\n  if (connectionString.search(\"DevelopmentStorageProxyUri=\") !== -1) {\n    // CONNECTION_STRING=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://myProxyUri\n    var matchCredentials = connectionString.split(\";\");\n    var _iterator = _createForOfIteratorHelper(matchCredentials),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var element = _step.value;\n        if (element.trim().startsWith(\"DevelopmentStorageProxyUri=\")) {\n          proxyUri = element.trim().match(\"DevelopmentStorageProxyUri=(.*)\")[1];\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return proxyUri;\n}\nexport function getValueInConnString(connectionString, argument) {\n  var elements = connectionString.split(\";\");\n  var _iterator2 = _createForOfIteratorHelper(elements),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var element = _step2.value;\n      if (element.trim().startsWith(argument)) {\n        return element.trim().match(argument + \"=(.*)\")[1];\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return \"\";\n}\n/**\n * Extracts the parts of an Azure Storage account connection string.\n *\n * @param connectionString - Connection string.\n * @returns String key value pairs of the storage account's url and credentials.\n */\nexport function extractConnectionStringParts(connectionString) {\n  var proxyUri = \"\";\n  if (connectionString.startsWith(\"UseDevelopmentStorage=true\")) {\n    // Development connection string\n    proxyUri = getProxyUriFromDevConnString(connectionString);\n    connectionString = DevelopmentConnectionString;\n  }\n  // Matching BlobEndpoint in the Account connection string\n  var blobEndpoint = getValueInConnString(connectionString, \"BlobEndpoint\");\n  // Slicing off '/' at the end if exists\n  // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)\n  blobEndpoint = blobEndpoint.endsWith(\"/\") ? blobEndpoint.slice(0, -1) : blobEndpoint;\n  if (connectionString.search(\"DefaultEndpointsProtocol=\") !== -1 && connectionString.search(\"AccountKey=\") !== -1) {\n    // Account connection string\n    var defaultEndpointsProtocol = \"\";\n    var accountName = \"\";\n    var accountKey = Buffer.from(\"accountKey\", \"base64\");\n    var endpointSuffix = \"\";\n    // Get account name and key\n    accountName = getValueInConnString(connectionString, \"AccountName\");\n    accountKey = Buffer.from(getValueInConnString(connectionString, \"AccountKey\"), \"base64\");\n    if (!blobEndpoint) {\n      // BlobEndpoint is not present in the Account connection string\n      // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`\n      defaultEndpointsProtocol = getValueInConnString(connectionString, \"DefaultEndpointsProtocol\");\n      var protocol = defaultEndpointsProtocol.toLowerCase();\n      if (protocol !== \"https\" && protocol !== \"http\") {\n        throw new Error(\"Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'\");\n      }\n      endpointSuffix = getValueInConnString(connectionString, \"EndpointSuffix\");\n      if (!endpointSuffix) {\n        throw new Error(\"Invalid EndpointSuffix in the provided Connection String\");\n      }\n      blobEndpoint = \"\".concat(defaultEndpointsProtocol, \"://\").concat(accountName, \".blob.\").concat(endpointSuffix);\n    }\n    if (!accountName) {\n      throw new Error(\"Invalid AccountName in the provided Connection String\");\n    } else if (accountKey.length === 0) {\n      throw new Error(\"Invalid AccountKey in the provided Connection String\");\n    }\n    return {\n      kind: \"AccountConnString\",\n      url: blobEndpoint,\n      accountName: accountName,\n      accountKey: accountKey,\n      proxyUri: proxyUri\n    };\n  } else {\n    // SAS connection string\n    var accountSas = getValueInConnString(connectionString, \"SharedAccessSignature\");\n    var _accountName = getAccountNameFromUrl(blobEndpoint);\n    if (!blobEndpoint) {\n      throw new Error(\"Invalid BlobEndpoint in the provided SAS Connection String\");\n    } else if (!accountSas) {\n      throw new Error(\"Invalid SharedAccessSignature in the provided SAS Connection String\");\n    }\n    return {\n      kind: \"SASConnString\",\n      url: blobEndpoint,\n      accountName: _accountName,\n      accountSas: accountSas\n    };\n  }\n}\n/**\n * Internal escape method implemented Strategy Two mentioned in escapeURL() description.\n *\n * @param text -\n */\nfunction escape(text) {\n  return encodeURIComponent(text).replace(/%2F/g, \"/\") // Don't escape for \"/\"\n  .replace(/'/g, \"%27\") // Escape for \"'\"\n  .replace(/\\+/g, \"%20\").replace(/%25/g, \"%\"); // Revert encoded \"%\"\n}\n/**\n * Append a string to URL path. Will remove duplicated \"/\" in front of the string\n * when URL path ends with a \"/\".\n *\n * @param url - Source URL string\n * @param name - String to be appended to URL\n * @returns An updated URL string\n */\nexport function appendToURLPath(url, name) {\n  var urlParsed = URLBuilder.parse(url);\n  var path = urlParsed.getPath();\n  path = path ? path.endsWith(\"/\") ? \"\".concat(path).concat(name) : \"\".concat(path, \"/\").concat(name) : name;\n  urlParsed.setPath(path);\n  var normalizedUrl = new URL(urlParsed.toString());\n  return normalizedUrl.toString();\n}\n/**\n * Set URL parameter name and value. If name exists in URL parameters, old value\n * will be replaced by name key. If not provide value, the parameter will be deleted.\n *\n * @param url - Source URL string\n * @param name - Parameter name\n * @param value - Parameter value\n * @returns An updated URL string\n */\nexport function setURLParameter(url, name, value) {\n  var urlParsed = URLBuilder.parse(url);\n  urlParsed.setQueryParameter(name, value);\n  return urlParsed.toString();\n}\n/**\n * Get URL parameter by name.\n *\n * @param url -\n * @param name -\n */\nexport function getURLParameter(url, name) {\n  var urlParsed = URLBuilder.parse(url);\n  return urlParsed.getQueryParameterValue(name);\n}\n/**\n * Set URL host.\n *\n * @param url - Source URL string\n * @param host - New host string\n * @returns An updated URL string\n */\nexport function setURLHost(url, host) {\n  var urlParsed = URLBuilder.parse(url);\n  urlParsed.setHost(host);\n  return urlParsed.toString();\n}\n/**\n * Get URL path from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLPath(url) {\n  var urlParsed = URLBuilder.parse(url);\n  return urlParsed.getPath();\n}\n/**\n * Get URL scheme from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLScheme(url) {\n  var urlParsed = URLBuilder.parse(url);\n  return urlParsed.getScheme();\n}\n/**\n * Get URL path and query from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLPathAndQuery(url) {\n  var urlParsed = URLBuilder.parse(url);\n  var pathString = urlParsed.getPath();\n  if (!pathString) {\n    throw new RangeError(\"Invalid url without valid path.\");\n  }\n  var queryString = urlParsed.getQuery() || \"\";\n  queryString = queryString.trim();\n  if (queryString !== \"\") {\n    queryString = queryString.startsWith(\"?\") ? queryString : \"?\".concat(queryString); // Ensure query string start with '?'\n  }\n\n  return \"\".concat(pathString).concat(queryString);\n}\n/**\n * Get URL query key value pairs from an URL string.\n *\n * @param url -\n */\nexport function getURLQueries(url) {\n  var queryString = URLBuilder.parse(url).getQuery();\n  if (!queryString) {\n    return {};\n  }\n  queryString = queryString.trim();\n  queryString = queryString.startsWith(\"?\") ? queryString.substr(1) : queryString;\n  var querySubStrings = queryString.split(\"&\");\n  querySubStrings = querySubStrings.filter(function (value) {\n    var indexOfEqual = value.indexOf(\"=\");\n    var lastIndexOfEqual = value.lastIndexOf(\"=\");\n    return indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1;\n  });\n  var queries = {};\n  var _iterator3 = _createForOfIteratorHelper(querySubStrings),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var querySubString = _step3.value;\n      var splitResults = querySubString.split(\"=\");\n      var key = splitResults[0];\n      var value = splitResults[1];\n      queries[key] = value;\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return queries;\n}\n/**\n * Append a string to URL query.\n *\n * @param url - Source URL string.\n * @param queryParts - String to be appended to the URL query.\n * @returns An updated URL string.\n */\nexport function appendToURLQuery(url, queryParts) {\n  var urlParsed = URLBuilder.parse(url);\n  var query = urlParsed.getQuery();\n  if (query) {\n    query += \"&\" + queryParts;\n  } else {\n    query = queryParts;\n  }\n  urlParsed.setQuery(query);\n  return urlParsed.toString();\n}\n/**\n * Rounds a date off to seconds.\n *\n * @param date -\n * @param withMilliseconds - If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;\n *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.\n * @returns Date string in ISO8061 format, with or without 7 milliseconds component\n */\nexport function truncatedISO8061Date(date) {\n  var withMilliseconds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  // Date.toISOString() will return like \"2018-10-29T06:34:36.139Z\"\n  var dateString = date.toISOString();\n  return withMilliseconds ? dateString.substring(0, dateString.length - 1) + \"0000\" + \"Z\" : dateString.substring(0, dateString.length - 5) + \"Z\";\n}\n/**\n * Base64 encode.\n *\n * @param content -\n */\nexport function base64encode(content) {\n  return !isNode ? btoa(content) : Buffer.from(content).toString(\"base64\");\n}\n/**\n * Base64 decode.\n *\n * @param encodedString -\n */\nexport function base64decode(encodedString) {\n  return !isNode ? atob(encodedString) : Buffer.from(encodedString, \"base64\").toString();\n}\n/**\n * Generate a 64 bytes base64 block ID string.\n *\n * @param blockIndex -\n */\nexport function generateBlockID(blockIDPrefix, blockIndex) {\n  // To generate a 64 bytes base64 string, source string should be 48\n  var maxSourceStringLength = 48;\n  // A blob can have a maximum of 100,000 uncommitted blocks at any given time\n  var maxBlockIndexLength = 6;\n  var maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;\n  if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {\n    blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);\n  }\n  var res = blockIDPrefix + padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, \"0\");\n  return base64encode(res);\n}\n/**\n * Delay specified time interval.\n *\n * @param timeInMs -\n * @param aborter -\n * @param abortError -\n */\nexport function delay(_x, _x2, _x3) {\n  return _delay.apply(this, arguments);\n}\n/**\n * String.prototype.padStart()\n *\n * @param currentString -\n * @param targetLength -\n * @param padString -\n */\nfunction _delay() {\n  _delay = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(timeInMs, aborter, abortError) {\n    return _regeneratorRuntime().wrap(function _callee$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n            /* eslint-disable-next-line prefer-const */\n            var timeout;\n            var abortHandler = function abortHandler() {\n              if (timeout !== undefined) {\n                clearTimeout(timeout);\n              }\n              reject(abortError);\n            };\n            var resolveHandler = function resolveHandler() {\n              if (aborter !== undefined) {\n                aborter.removeEventListener(\"abort\", abortHandler);\n              }\n              resolve();\n            };\n            timeout = setTimeout(resolveHandler, timeInMs);\n            if (aborter !== undefined) {\n              aborter.addEventListener(\"abort\", abortHandler);\n            }\n          }));\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee);\n  }));\n  return _delay.apply(this, arguments);\n}\nexport function padStart(currentString, targetLength) {\n  var padString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \" \";\n  // @ts-expect-error: TS doesn't know this code needs to run downlevel sometimes\n  if (String.prototype.padStart) {\n    return currentString.padStart(targetLength, padString);\n  }\n  padString = padString || \" \";\n  if (currentString.length > targetLength) {\n    return currentString;\n  } else {\n    targetLength = targetLength - currentString.length;\n    if (targetLength > padString.length) {\n      padString += padString.repeat(targetLength / padString.length);\n    }\n    return padString.slice(0, targetLength) + currentString;\n  }\n}\nexport function sanitizeURL(url) {\n  var safeURL = url;\n  if (getURLParameter(safeURL, URLConstants.Parameters.SIGNATURE)) {\n    safeURL = setURLParameter(safeURL, URLConstants.Parameters.SIGNATURE, \"*****\");\n  }\n  return safeURL;\n}\nexport function sanitizeHeaders(originalHeader) {\n  var headers = new HttpHeaders();\n  var _iterator4 = _createForOfIteratorHelper(originalHeader.headersArray()),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var header = _step4.value;\n      if (header.name.toLowerCase() === HeaderConstants.AUTHORIZATION.toLowerCase()) {\n        headers.set(header.name, \"*****\");\n      } else if (header.name.toLowerCase() === HeaderConstants.X_MS_COPY_SOURCE) {\n        headers.set(header.name, sanitizeURL(header.value));\n      } else {\n        headers.set(header.name, header.value);\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return headers;\n}\n/**\n * If two strings are equal when compared case insensitive.\n *\n * @param str1 -\n * @param str2 -\n */\nexport function iEqual(str1, str2) {\n  return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();\n}\n/**\n * Extracts account name from the url\n * @param url - url to extract the account name from\n * @returns with the account name\n */\nexport function getAccountNameFromUrl(url) {\n  var parsedUrl = URLBuilder.parse(url);\n  var accountName;\n  try {\n    if (parsedUrl.getHost().split(\".\")[1] === \"blob\") {\n      // `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n      accountName = parsedUrl.getHost().split(\".\")[0];\n    } else if (isIpEndpointStyle(parsedUrl)) {\n      // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/\n      // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/\n      // .getPath() -> /devstoreaccount1/\n      accountName = parsedUrl.getPath().split(\"/\")[1];\n    } else {\n      // Custom domain case: \"https://customdomain.com/containername/blob\".\n      accountName = \"\";\n    }\n    return accountName;\n  } catch (error) {\n    throw new Error(\"Unable to extract accountName with provided information.\");\n  }\n}\nexport function isIpEndpointStyle(parsedUrl) {\n  if (parsedUrl.getHost() === undefined) {\n    return false;\n  }\n  var host = parsedUrl.getHost() + (parsedUrl.getPort() === undefined ? \"\" : \":\" + parsedUrl.getPort());\n  // Case 1: Ipv6, use a broad regex to find out candidates whose host contains two ':'.\n  // Case 2: localhost(:port), use broad regex to match port part.\n  // Case 3: Ipv4, use broad regex which just check if host contains Ipv4.\n  // For valid host please refer to https://man7.org/linux/man-pages/man7/hostname.7.html.\n  return /^.*:.*:.*$|^localhost(:[0-9]+)?$|^(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])){3}(:[0-9]+)?$/.test(host) || parsedUrl.getPort() !== undefined && PathStylePorts.includes(parsedUrl.getPort());\n}\n/**\n * Convert Tags to encoded string.\n *\n * @param tags -\n */\nexport function toBlobTagsString(tags) {\n  if (tags === undefined) {\n    return undefined;\n  }\n  var tagPairs = [];\n  for (var key in tags) {\n    if (Object.prototype.hasOwnProperty.call(tags, key)) {\n      var value = tags[key];\n      tagPairs.push(\"\".concat(encodeURIComponent(key), \"=\").concat(encodeURIComponent(value)));\n    }\n  }\n  return tagPairs.join(\"&\");\n}\n/**\n * Convert Tags type to BlobTags.\n *\n * @param tags -\n */\nexport function toBlobTags(tags) {\n  if (tags === undefined) {\n    return undefined;\n  }\n  var res = {\n    blobTagSet: []\n  };\n  for (var key in tags) {\n    if (Object.prototype.hasOwnProperty.call(tags, key)) {\n      var value = tags[key];\n      res.blobTagSet.push({\n        key: key,\n        value: value\n      });\n    }\n  }\n  return res;\n}\n/**\n * Covert BlobTags to Tags type.\n *\n * @param tags -\n */\nexport function toTags(tags) {\n  if (tags === undefined) {\n    return undefined;\n  }\n  var res = {};\n  var _iterator5 = _createForOfIteratorHelper(tags.blobTagSet),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var blobTag = _step5.value;\n      res[blobTag.key] = blobTag.value;\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  return res;\n}\n/**\n * Convert BlobQueryTextConfiguration to QuerySerialization type.\n *\n * @param textConfiguration -\n */\nexport function toQuerySerialization(textConfiguration) {\n  if (textConfiguration === undefined) {\n    return undefined;\n  }\n  switch (textConfiguration.kind) {\n    case \"csv\":\n      return {\n        format: {\n          type: \"delimited\",\n          delimitedTextConfiguration: {\n            columnSeparator: textConfiguration.columnSeparator || \",\",\n            fieldQuote: textConfiguration.fieldQuote || \"\",\n            recordSeparator: textConfiguration.recordSeparator,\n            escapeChar: textConfiguration.escapeCharacter || \"\",\n            headersPresent: textConfiguration.hasHeaders || false\n          }\n        }\n      };\n    case \"json\":\n      return {\n        format: {\n          type: \"json\",\n          jsonTextConfiguration: {\n            recordSeparator: textConfiguration.recordSeparator\n          }\n        }\n      };\n    case \"arrow\":\n      return {\n        format: {\n          type: \"arrow\",\n          arrowConfiguration: {\n            schema: textConfiguration.schema\n          }\n        }\n      };\n    case \"parquet\":\n      return {\n        format: {\n          type: \"parquet\"\n        }\n      };\n    default:\n      throw Error(\"Invalid BlobQueryTextConfiguration.\");\n  }\n}\nexport function parseObjectReplicationRecord(objectReplicationRecord) {\n  if (!objectReplicationRecord) {\n    return undefined;\n  }\n  if (\"policy-id\" in objectReplicationRecord) {\n    // If the dictionary contains a key with policy id, we are not required to do any parsing since\n    // the policy id should already be stored in the ObjectReplicationDestinationPolicyId.\n    return undefined;\n  }\n  var orProperties = [];\n  var _loop = function _loop() {\n    var ids = key.split(\"_\");\n    var policyPrefix = \"or-\";\n    if (ids[0].startsWith(policyPrefix)) {\n      ids[0] = ids[0].substring(policyPrefix.length);\n    }\n    var rule = {\n      ruleId: ids[1],\n      replicationStatus: objectReplicationRecord[key]\n    };\n    var policyIndex = orProperties.findIndex(function (policy) {\n      return policy.policyId === ids[0];\n    });\n    if (policyIndex > -1) {\n      orProperties[policyIndex].rules.push(rule);\n    } else {\n      orProperties.push({\n        policyId: ids[0],\n        rules: [rule]\n      });\n    }\n  };\n  for (var key in objectReplicationRecord) {\n    _loop();\n  }\n  return orProperties;\n}\n/**\n * Attach a TokenCredential to an object.\n *\n * @param thing -\n * @param credential -\n */\nexport function attachCredential(thing, credential) {\n  thing.credential = credential;\n  return thing;\n}\nexport function httpAuthorizationToString(httpAuthorization) {\n  return httpAuthorization ? httpAuthorization.scheme + \" \" + httpAuthorization.value : undefined;\n}\nexport function BlobNameToString(name) {\n  if (name.encoded) {\n    return decodeURIComponent(name.content);\n  } else {\n    return name.content;\n  }\n}\nexport function ConvertInternalResponseOfListBlobFlat(internalResponse) {\n  return Object.assign(Object.assign({}, internalResponse), {\n    segment: {\n      blobItems: internalResponse.segment.blobItems.map(function (blobItemInteral) {\n        var blobItem = Object.assign(Object.assign({}, blobItemInteral), {\n          name: BlobNameToString(blobItemInteral.name)\n        });\n        return blobItem;\n      })\n    }\n  });\n}\nexport function ConvertInternalResponseOfListBlobHierarchy(internalResponse) {\n  var _a;\n  return Object.assign(Object.assign({}, internalResponse), {\n    segment: {\n      blobPrefixes: (_a = internalResponse.segment.blobPrefixes) === null || _a === void 0 ? void 0 : _a.map(function (blobPrefixInternal) {\n        var blobPrefix = {\n          name: BlobNameToString(blobPrefixInternal.name)\n        };\n        return blobPrefix;\n      }),\n      blobItems: internalResponse.segment.blobItems.map(function (blobItemInteral) {\n        var blobItem = Object.assign(Object.assign({}, blobItemInteral), {\n          name: BlobNameToString(blobItemInteral.name)\n        });\n        return blobItem;\n      })\n    }\n  });\n}\nexport function ExtractPageRangeInfoItems(getPageRangesSegment) {\n  var pageRange, clearRange, pageRangeIndex, clearRangeIndex;\n  return _regeneratorRuntime().wrap(function ExtractPageRangeInfoItems$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        pageRange = [];\n        clearRange = [];\n        if (getPageRangesSegment.pageRange) pageRange = getPageRangesSegment.pageRange;\n        if (getPageRangesSegment.clearRange) clearRange = getPageRangesSegment.clearRange;\n        pageRangeIndex = 0;\n        clearRangeIndex = 0;\n      case 6:\n        if (!(pageRangeIndex < pageRange.length && clearRangeIndex < clearRange.length)) {\n          _context.next = 18;\n          break;\n        }\n        if (!(pageRange[pageRangeIndex].start < clearRange[clearRangeIndex].start)) {\n          _context.next = 13;\n          break;\n        }\n        _context.next = 10;\n        return {\n          start: pageRange[pageRangeIndex].start,\n          end: pageRange[pageRangeIndex].end,\n          isClear: false\n        };\n      case 10:\n        ++pageRangeIndex;\n        _context.next = 16;\n        break;\n      case 13:\n        _context.next = 15;\n        return {\n          start: clearRange[clearRangeIndex].start,\n          end: clearRange[clearRangeIndex].end,\n          isClear: true\n        };\n      case 15:\n        ++clearRangeIndex;\n      case 16:\n        _context.next = 6;\n        break;\n      case 18:\n        if (!(pageRangeIndex < pageRange.length)) {\n          _context.next = 24;\n          break;\n        }\n        _context.next = 21;\n        return {\n          start: pageRange[pageRangeIndex].start,\n          end: pageRange[pageRangeIndex].end,\n          isClear: false\n        };\n      case 21:\n        ++pageRangeIndex;\n        _context.next = 18;\n        break;\n      case 24:\n        if (!(clearRangeIndex < clearRange.length)) {\n          _context.next = 30;\n          break;\n        }\n        _context.next = 27;\n        return {\n          start: clearRange[clearRangeIndex].start,\n          end: clearRange[clearRangeIndex].end,\n          isClear: true\n        };\n      case 27:\n        ++clearRangeIndex;\n        _context.next = 24;\n        break;\n      case 30:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\n/**\n * Escape the blobName but keep path separator ('/').\n */\nexport function EscapePath(blobName) {\n  var split = blobName.split(\"/\");\n  for (var i = 0; i < split.length; i++) {\n    split[i] = encodeURIComponent(split[i]);\n  }\n  return split.join(\"/\");\n}","map":{"version":3,"names":["ExtractPageRangeInfoItems","HttpHeaders","isNode","URLBuilder","DevelopmentConnectionString","HeaderConstants","PathStylePorts","URLConstants","escapeURLPath","url","urlParsed","parse","path","getPath","escape","setPath","toString","getProxyUriFromDevConnString","connectionString","proxyUri","search","matchCredentials","split","_iterator","_createForOfIteratorHelper","_step","s","n","done","element","value","trim","startsWith","match","err","e","f","getValueInConnString","argument","elements","_iterator2","_step2","extractConnectionStringParts","blobEndpoint","endsWith","slice","defaultEndpointsProtocol","accountName","accountKey","Buffer","from","endpointSuffix","protocol","toLowerCase","Error","concat","length","kind","accountSas","getAccountNameFromUrl","text","encodeURIComponent","replace","appendToURLPath","name","normalizedUrl","URL","setURLParameter","setQueryParameter","getURLParameter","getQueryParameterValue","setURLHost","host","setHost","getURLPath","getURLScheme","getScheme","getURLPathAndQuery","pathString","RangeError","queryString","getQuery","getURLQueries","substr","querySubStrings","filter","indexOfEqual","indexOf","lastIndexOfEqual","lastIndexOf","queries","_iterator3","_step3","querySubString","splitResults","key","appendToURLQuery","queryParts","query","setQuery","truncatedISO8061Date","date","withMilliseconds","arguments","undefined","dateString","toISOString","substring","base64encode","content","btoa","base64decode","encodedString","atob","generateBlockID","blockIDPrefix","blockIndex","maxSourceStringLength","maxBlockIndexLength","maxAllowedBlockIDPrefixLength","res","padStart","delay","_x","_x2","_x3","_delay","apply","_asyncToGenerator","_regeneratorRuntime","mark","_callee","timeInMs","aborter","abortError","wrap","_callee$","_context2","prev","next","abrupt","Promise","resolve","reject","timeout","abortHandler","clearTimeout","resolveHandler","removeEventListener","setTimeout","addEventListener","stop","currentString","targetLength","padString","String","prototype","repeat","sanitizeURL","safeURL","Parameters","SIGNATURE","sanitizeHeaders","originalHeader","headers","_iterator4","headersArray","_step4","header","AUTHORIZATION","set","X_MS_COPY_SOURCE","iEqual","str1","str2","toLocaleLowerCase","parsedUrl","getHost","isIpEndpointStyle","error","getPort","test","includes","toBlobTagsString","tags","tagPairs","Object","hasOwnProperty","call","push","join","toBlobTags","blobTagSet","toTags","_iterator5","_step5","blobTag","toQuerySerialization","textConfiguration","format","type","delimitedTextConfiguration","columnSeparator","fieldQuote","recordSeparator","escapeChar","escapeCharacter","headersPresent","hasHeaders","jsonTextConfiguration","arrowConfiguration","schema","parseObjectReplicationRecord","objectReplicationRecord","orProperties","_loop","ids","policyPrefix","rule","ruleId","replicationStatus","policyIndex","findIndex","policy","policyId","rules","attachCredential","thing","credential","httpAuthorizationToString","httpAuthorization","scheme","BlobNameToString","encoded","decodeURIComponent","ConvertInternalResponseOfListBlobFlat","internalResponse","assign","segment","blobItems","map","blobItemInteral","blobItem","ConvertInternalResponseOfListBlobHierarchy","blobPrefixes","_a","blobPrefixInternal","blobPrefix","getPageRangesSegment","pageRange","clearRange","pageRangeIndex","clearRangeIndex","ExtractPageRangeInfoItems$","_context","start","end","isClear","_marked","EscapePath","blobName","i"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\utils\\utils.common.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { HttpHeaders, isNode, URLBuilder, TokenCredential } from \"@azure/core-http\";\n\nimport {\n  BlobQueryArrowConfiguration,\n  BlobQueryCsvTextConfiguration,\n  BlobQueryJsonTextConfiguration,\n  BlobQueryParquetConfiguration,\n} from \"../Clients\";\nimport {\n  QuerySerialization,\n  BlobTags,\n  BlobName,\n  ListBlobsFlatSegmentResponse,\n  ListBlobsHierarchySegmentResponse,\n  PageRange,\n  ClearRange,\n} from \"../generated/src/models\";\nimport {\n  DevelopmentConnectionString,\n  HeaderConstants,\n  PathStylePorts,\n  URLConstants,\n} from \"./constants\";\nimport {\n  Tags,\n  ObjectReplicationPolicy,\n  ObjectReplicationRule,\n  ObjectReplicationStatus,\n  HttpAuthorization,\n} from \"../models\";\nimport {\n  ListBlobsFlatSegmentResponseModel,\n  BlobItemInternal as BlobItemInternalModel,\n  ListBlobsHierarchySegmentResponseModel,\n  BlobPrefix as BlobPrefixModel,\n  PageBlobGetPageRangesDiffResponseModel,\n  PageRangeInfo,\n} from \"../generatedModels\";\n\n/**\n * Reserved URL characters must be properly escaped for Storage services like Blob or File.\n *\n * ## URL encode and escape strategy for JS SDKs\n *\n * When customers pass a URL string into XxxClient classes constructor, the URL string may already be URL encoded or not.\n * But before sending to Azure Storage server, the URL must be encoded. However, it's hard for a SDK to guess whether the URL\n * string has been encoded or not. We have 2 potential strategies, and chose strategy two for the XxxClient constructors.\n *\n * ### Strategy One: Assume the customer URL string is not encoded, and always encode URL string in SDK.\n *\n * This is what legacy V2 SDK does, simple and works for most of the cases.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%253A\" and send to server. A blob named \"b%3A\" will be created.\n *\n * But this strategy will make it not possible to create a blob with \"?\" in it's name. Because when customer URL string is\n * \"http://account.blob.core.windows.net/con/blob?name\", the \"?name\" will be treated as URL paramter instead of blob name.\n * If customer URL string is \"http://account.blob.core.windows.net/con/blob%3Fname\", a blob named \"blob%3Fname\" will be created.\n * V2 SDK doesn't have this issue because it doesn't allow customer pass in a full URL, it accepts a separate blob name and encodeURIComponent for it.\n * We cannot accept a SDK cannot create a blob name with \"?\". So we implement strategy two:\n *\n * ### Strategy Two: SDK doesn't assume the URL has been encoded or not. It will just escape the special characters.\n *\n * This is what V10 Blob Go SDK does. It accepts a URL type in Go, and call url.EscapedPath() to escape the special chars unescaped.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will escape \":\" like \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%3A\" to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%253A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%253A\" to server. A blob named \"b%3A\" will be created.\n *\n * This strategy gives us flexibility to create with any special characters. But \"%\" will be treated as a special characters, if the URL string\n * is not encoded, there shouldn't a \"%\" in the URL string, otherwise the URL is not a valid URL.\n * If customer needs to create a blob with \"%\" in it's blob name, use \"%25\" instead of \"%\". Just like above 3rd sample.\n * And following URL strings are invalid:\n * - \"http://account.blob.core.windows.net/con/b%\"\n * - \"http://account.blob.core.windows.net/con/b%2\"\n * - \"http://account.blob.core.windows.net/con/b%G\"\n *\n * Another special character is \"?\", use \"%2F\" to represent a blob name with \"?\" in a URL string.\n *\n * ### Strategy for containerName, blobName or other specific XXXName parameters in methods such as `containerClient.getBlobClient(blobName)`\n *\n * We will apply strategy one, and call encodeURIComponent for these parameters like blobName. Because what customers passes in is a plain name instead of a URL.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata\n *\n * @param url -\n */\nexport function escapeURLPath(url: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let path = urlParsed.getPath();\n  path = path || \"/\";\n\n  path = escape(path);\n  urlParsed.setPath(path);\n\n  return urlParsed.toString();\n}\n\nexport interface ConnectionString {\n  kind: \"AccountConnString\" | \"SASConnString\";\n  url: string;\n  accountName: string;\n  accountKey?: any;\n  accountSas?: string;\n  proxyUri?: string; // Development Connection String may contain proxyUri\n}\n\nfunction getProxyUriFromDevConnString(connectionString: string): string {\n  // Development Connection String\n  // https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string#connect-to-the-emulator-account-using-the-well-known-account-name-and-key\n  let proxyUri = \"\";\n  if (connectionString.search(\"DevelopmentStorageProxyUri=\") !== -1) {\n    // CONNECTION_STRING=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://myProxyUri\n    const matchCredentials = connectionString.split(\";\");\n    for (const element of matchCredentials) {\n      if (element.trim().startsWith(\"DevelopmentStorageProxyUri=\")) {\n        proxyUri = element.trim().match(\"DevelopmentStorageProxyUri=(.*)\")![1];\n      }\n    }\n  }\n  return proxyUri;\n}\n\nexport function getValueInConnString(\n  connectionString: string,\n  argument:\n    | \"BlobEndpoint\"\n    | \"AccountName\"\n    | \"AccountKey\"\n    | \"DefaultEndpointsProtocol\"\n    | \"EndpointSuffix\"\n    | \"SharedAccessSignature\"\n): string {\n  const elements = connectionString.split(\";\");\n  for (const element of elements) {\n    if (element.trim().startsWith(argument)) {\n      return element.trim().match(argument + \"=(.*)\")![1];\n    }\n  }\n  return \"\";\n}\n\n/**\n * Extracts the parts of an Azure Storage account connection string.\n *\n * @param connectionString - Connection string.\n * @returns String key value pairs of the storage account's url and credentials.\n */\nexport function extractConnectionStringParts(connectionString: string): ConnectionString {\n  let proxyUri = \"\";\n\n  if (connectionString.startsWith(\"UseDevelopmentStorage=true\")) {\n    // Development connection string\n    proxyUri = getProxyUriFromDevConnString(connectionString);\n    connectionString = DevelopmentConnectionString;\n  }\n\n  // Matching BlobEndpoint in the Account connection string\n  let blobEndpoint = getValueInConnString(connectionString, \"BlobEndpoint\");\n  // Slicing off '/' at the end if exists\n  // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)\n  blobEndpoint = blobEndpoint.endsWith(\"/\") ? blobEndpoint.slice(0, -1) : blobEndpoint;\n\n  if (\n    connectionString.search(\"DefaultEndpointsProtocol=\") !== -1 &&\n    connectionString.search(\"AccountKey=\") !== -1\n  ) {\n    // Account connection string\n\n    let defaultEndpointsProtocol = \"\";\n    let accountName = \"\";\n    let accountKey = Buffer.from(\"accountKey\", \"base64\");\n    let endpointSuffix = \"\";\n\n    // Get account name and key\n    accountName = getValueInConnString(connectionString, \"AccountName\");\n    accountKey = Buffer.from(getValueInConnString(connectionString, \"AccountKey\"), \"base64\");\n\n    if (!blobEndpoint) {\n      // BlobEndpoint is not present in the Account connection string\n      // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`\n\n      defaultEndpointsProtocol = getValueInConnString(connectionString, \"DefaultEndpointsProtocol\");\n      const protocol = defaultEndpointsProtocol!.toLowerCase();\n      if (protocol !== \"https\" && protocol !== \"http\") {\n        throw new Error(\n          \"Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'\"\n        );\n      }\n\n      endpointSuffix = getValueInConnString(connectionString, \"EndpointSuffix\");\n      if (!endpointSuffix) {\n        throw new Error(\"Invalid EndpointSuffix in the provided Connection String\");\n      }\n      blobEndpoint = `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n    }\n\n    if (!accountName) {\n      throw new Error(\"Invalid AccountName in the provided Connection String\");\n    } else if (accountKey.length === 0) {\n      throw new Error(\"Invalid AccountKey in the provided Connection String\");\n    }\n\n    return {\n      kind: \"AccountConnString\",\n      url: blobEndpoint,\n      accountName,\n      accountKey,\n      proxyUri,\n    };\n  } else {\n    // SAS connection string\n\n    const accountSas = getValueInConnString(connectionString, \"SharedAccessSignature\");\n    const accountName = getAccountNameFromUrl(blobEndpoint);\n    if (!blobEndpoint) {\n      throw new Error(\"Invalid BlobEndpoint in the provided SAS Connection String\");\n    } else if (!accountSas) {\n      throw new Error(\"Invalid SharedAccessSignature in the provided SAS Connection String\");\n    }\n\n    return { kind: \"SASConnString\", url: blobEndpoint, accountName, accountSas };\n  }\n}\n\n/**\n * Internal escape method implemented Strategy Two mentioned in escapeURL() description.\n *\n * @param text -\n */\nfunction escape(text: string): string {\n  return encodeURIComponent(text)\n    .replace(/%2F/g, \"/\") // Don't escape for \"/\"\n    .replace(/'/g, \"%27\") // Escape for \"'\"\n    .replace(/\\+/g, \"%20\")\n    .replace(/%25/g, \"%\"); // Revert encoded \"%\"\n}\n\n/**\n * Append a string to URL path. Will remove duplicated \"/\" in front of the string\n * when URL path ends with a \"/\".\n *\n * @param url - Source URL string\n * @param name - String to be appended to URL\n * @returns An updated URL string\n */\nexport function appendToURLPath(url: string, name: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let path = urlParsed.getPath();\n  path = path ? (path.endsWith(\"/\") ? `${path}${name}` : `${path}/${name}`) : name;\n  urlParsed.setPath(path);\n\n  const normalizedUrl = new URL(urlParsed.toString());\n\n  return normalizedUrl.toString();\n}\n\n/**\n * Set URL parameter name and value. If name exists in URL parameters, old value\n * will be replaced by name key. If not provide value, the parameter will be deleted.\n *\n * @param url - Source URL string\n * @param name - Parameter name\n * @param value - Parameter value\n * @returns An updated URL string\n */\nexport function setURLParameter(url: string, name: string, value?: string): string {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setQueryParameter(name, value);\n  return urlParsed.toString();\n}\n\n/**\n * Get URL parameter by name.\n *\n * @param url -\n * @param name -\n */\nexport function getURLParameter(url: string, name: string): string | string[] | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getQueryParameterValue(name);\n}\n\n/**\n * Set URL host.\n *\n * @param url - Source URL string\n * @param host - New host string\n * @returns An updated URL string\n */\nexport function setURLHost(url: string, host: string): string {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setHost(host);\n  return urlParsed.toString();\n}\n\n/**\n * Get URL path from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLPath(url: string): string | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getPath();\n}\n\n/**\n * Get URL scheme from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLScheme(url: string): string | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getScheme();\n}\n\n/**\n * Get URL path and query from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLPathAndQuery(url: string): string | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  const pathString = urlParsed.getPath();\n  if (!pathString) {\n    throw new RangeError(\"Invalid url without valid path.\");\n  }\n\n  let queryString = urlParsed.getQuery() || \"\";\n  queryString = queryString.trim();\n  if (queryString !== \"\") {\n    queryString = queryString.startsWith(\"?\") ? queryString : `?${queryString}`; // Ensure query string start with '?'\n  }\n\n  return `${pathString}${queryString}`;\n}\n\n/**\n * Get URL query key value pairs from an URL string.\n *\n * @param url -\n */\nexport function getURLQueries(url: string): { [key: string]: string } {\n  let queryString = URLBuilder.parse(url).getQuery();\n  if (!queryString) {\n    return {};\n  }\n\n  queryString = queryString.trim();\n  queryString = queryString.startsWith(\"?\") ? queryString.substr(1) : queryString;\n\n  let querySubStrings: string[] = queryString.split(\"&\");\n  querySubStrings = querySubStrings.filter((value: string) => {\n    const indexOfEqual = value.indexOf(\"=\");\n    const lastIndexOfEqual = value.lastIndexOf(\"=\");\n    return (\n      indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1\n    );\n  });\n\n  const queries: { [key: string]: string } = {};\n  for (const querySubString of querySubStrings) {\n    const splitResults = querySubString.split(\"=\");\n    const key: string = splitResults[0];\n    const value: string = splitResults[1];\n    queries[key] = value;\n  }\n\n  return queries;\n}\n\n/**\n * Append a string to URL query.\n *\n * @param url - Source URL string.\n * @param queryParts - String to be appended to the URL query.\n * @returns An updated URL string.\n */\nexport function appendToURLQuery(url: string, queryParts: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let query = urlParsed.getQuery();\n  if (query) {\n    query += \"&\" + queryParts;\n  } else {\n    query = queryParts;\n  }\n\n  urlParsed.setQuery(query);\n  return urlParsed.toString();\n}\n\n/**\n * Rounds a date off to seconds.\n *\n * @param date -\n * @param withMilliseconds - If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;\n *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.\n * @returns Date string in ISO8061 format, with or without 7 milliseconds component\n */\nexport function truncatedISO8061Date(date: Date, withMilliseconds: boolean = true): string {\n  // Date.toISOString() will return like \"2018-10-29T06:34:36.139Z\"\n  const dateString = date.toISOString();\n\n  return withMilliseconds\n    ? dateString.substring(0, dateString.length - 1) + \"0000\" + \"Z\"\n    : dateString.substring(0, dateString.length - 5) + \"Z\";\n}\n\n/**\n * Base64 encode.\n *\n * @param content -\n */\nexport function base64encode(content: string): string {\n  return !isNode ? btoa(content) : Buffer.from(content).toString(\"base64\");\n}\n\n/**\n * Base64 decode.\n *\n * @param encodedString -\n */\nexport function base64decode(encodedString: string): string {\n  return !isNode ? atob(encodedString) : Buffer.from(encodedString, \"base64\").toString();\n}\n\n/**\n * Generate a 64 bytes base64 block ID string.\n *\n * @param blockIndex -\n */\nexport function generateBlockID(blockIDPrefix: string, blockIndex: number): string {\n  // To generate a 64 bytes base64 string, source string should be 48\n  const maxSourceStringLength = 48;\n\n  // A blob can have a maximum of 100,000 uncommitted blocks at any given time\n  const maxBlockIndexLength = 6;\n\n  const maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;\n\n  if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {\n    blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);\n  }\n  const res =\n    blockIDPrefix +\n    padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, \"0\");\n  return base64encode(res);\n}\n\n/**\n * Delay specified time interval.\n *\n * @param timeInMs -\n * @param aborter -\n * @param abortError -\n */\nexport async function delay(\n  timeInMs: number,\n  aborter?: AbortSignalLike,\n  abortError?: Error\n): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    /* eslint-disable-next-line prefer-const */\n    let timeout: any;\n\n    const abortHandler = () => {\n      if (timeout !== undefined) {\n        clearTimeout(timeout);\n      }\n      reject(abortError);\n    };\n\n    const resolveHandler = () => {\n      if (aborter !== undefined) {\n        aborter.removeEventListener(\"abort\", abortHandler);\n      }\n      resolve();\n    };\n\n    timeout = setTimeout(resolveHandler, timeInMs);\n\n    if (aborter !== undefined) {\n      aborter.addEventListener(\"abort\", abortHandler);\n    }\n  });\n}\n\n/**\n * String.prototype.padStart()\n *\n * @param currentString -\n * @param targetLength -\n * @param padString -\n */\nexport function padStart(\n  currentString: string,\n  targetLength: number,\n  padString: string = \" \"\n): string {\n  // @ts-expect-error: TS doesn't know this code needs to run downlevel sometimes\n  if (String.prototype.padStart) {\n    return currentString.padStart(targetLength, padString);\n  }\n\n  padString = padString || \" \";\n  if (currentString.length > targetLength) {\n    return currentString;\n  } else {\n    targetLength = targetLength - currentString.length;\n    if (targetLength > padString.length) {\n      padString += padString.repeat(targetLength / padString.length);\n    }\n    return padString.slice(0, targetLength) + currentString;\n  }\n}\n\nexport function sanitizeURL(url: string): string {\n  let safeURL: string = url;\n  if (getURLParameter(safeURL, URLConstants.Parameters.SIGNATURE)) {\n    safeURL = setURLParameter(safeURL, URLConstants.Parameters.SIGNATURE, \"*****\");\n  }\n\n  return safeURL;\n}\n\nexport function sanitizeHeaders(originalHeader: HttpHeaders): HttpHeaders {\n  const headers: HttpHeaders = new HttpHeaders();\n  for (const header of originalHeader.headersArray()) {\n    if (header.name.toLowerCase() === HeaderConstants.AUTHORIZATION.toLowerCase()) {\n      headers.set(header.name, \"*****\");\n    } else if (header.name.toLowerCase() === HeaderConstants.X_MS_COPY_SOURCE) {\n      headers.set(header.name, sanitizeURL(header.value));\n    } else {\n      headers.set(header.name, header.value);\n    }\n  }\n\n  return headers;\n}\n/**\n * If two strings are equal when compared case insensitive.\n *\n * @param str1 -\n * @param str2 -\n */\nexport function iEqual(str1: string, str2: string): boolean {\n  return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();\n}\n\n/**\n * Extracts account name from the url\n * @param url - url to extract the account name from\n * @returns with the account name\n */\nexport function getAccountNameFromUrl(url: string): string {\n  const parsedUrl: URLBuilder = URLBuilder.parse(url);\n  let accountName;\n  try {\n    if (parsedUrl.getHost()!.split(\".\")[1] === \"blob\") {\n      // `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n      accountName = parsedUrl.getHost()!.split(\".\")[0];\n    } else if (isIpEndpointStyle(parsedUrl)) {\n      // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/\n      // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/\n      // .getPath() -> /devstoreaccount1/\n      accountName = parsedUrl.getPath()!.split(\"/\")[1];\n    } else {\n      // Custom domain case: \"https://customdomain.com/containername/blob\".\n      accountName = \"\";\n    }\n    return accountName;\n  } catch (error: any) {\n    throw new Error(\"Unable to extract accountName with provided information.\");\n  }\n}\n\nexport function isIpEndpointStyle(parsedUrl: URLBuilder): boolean {\n  if (parsedUrl.getHost() === undefined) {\n    return false;\n  }\n\n  const host =\n    parsedUrl.getHost()! + (parsedUrl.getPort() === undefined ? \"\" : \":\" + parsedUrl.getPort());\n\n  // Case 1: Ipv6, use a broad regex to find out candidates whose host contains two ':'.\n  // Case 2: localhost(:port), use broad regex to match port part.\n  // Case 3: Ipv4, use broad regex which just check if host contains Ipv4.\n  // For valid host please refer to https://man7.org/linux/man-pages/man7/hostname.7.html.\n  return (\n    /^.*:.*:.*$|^localhost(:[0-9]+)?$|^(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])){3}(:[0-9]+)?$/.test(\n      host\n    ) ||\n    (parsedUrl.getPort() !== undefined && PathStylePorts.includes(parsedUrl.getPort()!))\n  );\n}\n\n/**\n * Convert Tags to encoded string.\n *\n * @param tags -\n */\nexport function toBlobTagsString(tags?: Tags): string | undefined {\n  if (tags === undefined) {\n    return undefined;\n  }\n\n  const tagPairs = [];\n  for (const key in tags) {\n    if (Object.prototype.hasOwnProperty.call(tags, key)) {\n      const value = tags[key];\n      tagPairs.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n    }\n  }\n\n  return tagPairs.join(\"&\");\n}\n\n/**\n * Convert Tags type to BlobTags.\n *\n * @param tags -\n */\nexport function toBlobTags(tags?: Tags): BlobTags | undefined {\n  if (tags === undefined) {\n    return undefined;\n  }\n\n  const res: BlobTags = {\n    blobTagSet: [],\n  };\n\n  for (const key in tags) {\n    if (Object.prototype.hasOwnProperty.call(tags, key)) {\n      const value = tags[key];\n      res.blobTagSet.push({\n        key,\n        value,\n      });\n    }\n  }\n  return res;\n}\n\n/**\n * Covert BlobTags to Tags type.\n *\n * @param tags -\n */\nexport function toTags(tags?: BlobTags): Tags | undefined {\n  if (tags === undefined) {\n    return undefined;\n  }\n\n  const res: Tags = {};\n  for (const blobTag of tags.blobTagSet) {\n    res[blobTag.key] = blobTag.value;\n  }\n  return res;\n}\n\n/**\n * Convert BlobQueryTextConfiguration to QuerySerialization type.\n *\n * @param textConfiguration -\n */\nexport function toQuerySerialization(\n  textConfiguration?:\n    | BlobQueryJsonTextConfiguration\n    | BlobQueryCsvTextConfiguration\n    | BlobQueryArrowConfiguration\n    | BlobQueryParquetConfiguration\n): QuerySerialization | undefined {\n  if (textConfiguration === undefined) {\n    return undefined;\n  }\n\n  switch (textConfiguration.kind) {\n    case \"csv\":\n      return {\n        format: {\n          type: \"delimited\",\n          delimitedTextConfiguration: {\n            columnSeparator: textConfiguration.columnSeparator || \",\",\n            fieldQuote: textConfiguration.fieldQuote || \"\",\n            recordSeparator: textConfiguration.recordSeparator,\n            escapeChar: textConfiguration.escapeCharacter || \"\",\n            headersPresent: textConfiguration.hasHeaders || false,\n          },\n        },\n      };\n    case \"json\":\n      return {\n        format: {\n          type: \"json\",\n          jsonTextConfiguration: {\n            recordSeparator: textConfiguration.recordSeparator,\n          },\n        },\n      };\n    case \"arrow\":\n      return {\n        format: {\n          type: \"arrow\",\n          arrowConfiguration: {\n            schema: textConfiguration.schema,\n          },\n        },\n      };\n    case \"parquet\":\n      return {\n        format: {\n          type: \"parquet\",\n        },\n      };\n\n    default:\n      throw Error(\"Invalid BlobQueryTextConfiguration.\");\n  }\n}\n\nexport function parseObjectReplicationRecord(\n  objectReplicationRecord?: Record<string, string>\n): ObjectReplicationPolicy[] | undefined {\n  if (!objectReplicationRecord) {\n    return undefined;\n  }\n\n  if (\"policy-id\" in objectReplicationRecord) {\n    // If the dictionary contains a key with policy id, we are not required to do any parsing since\n    // the policy id should already be stored in the ObjectReplicationDestinationPolicyId.\n    return undefined;\n  }\n\n  const orProperties: ObjectReplicationPolicy[] = [];\n  for (const key in objectReplicationRecord) {\n    const ids = key.split(\"_\");\n    const policyPrefix = \"or-\";\n    if (ids[0].startsWith(policyPrefix)) {\n      ids[0] = ids[0].substring(policyPrefix.length);\n    }\n    const rule: ObjectReplicationRule = {\n      ruleId: ids[1],\n      replicationStatus: objectReplicationRecord[key] as ObjectReplicationStatus,\n    };\n    const policyIndex = orProperties.findIndex((policy) => policy.policyId === ids[0]);\n    if (policyIndex > -1) {\n      orProperties[policyIndex].rules.push(rule);\n    } else {\n      orProperties.push({\n        policyId: ids[0],\n        rules: [rule],\n      });\n    }\n  }\n  return orProperties;\n}\n\n/**\n * Attach a TokenCredential to an object.\n *\n * @param thing -\n * @param credential -\n */\nexport function attachCredential<T>(thing: T, credential: TokenCredential): T {\n  (thing as any).credential = credential;\n  return thing;\n}\n\nexport function httpAuthorizationToString(\n  httpAuthorization?: HttpAuthorization\n): string | undefined {\n  return httpAuthorization ? httpAuthorization.scheme + \" \" + httpAuthorization.value : undefined;\n}\n\nexport function BlobNameToString(name: BlobName): string {\n  if (name.encoded) {\n    return decodeURIComponent(name.content!);\n  } else {\n    return name.content!;\n  }\n}\n\nexport function ConvertInternalResponseOfListBlobFlat(\n  internalResponse: ListBlobsFlatSegmentResponse\n): ListBlobsFlatSegmentResponseModel {\n  return {\n    ...internalResponse,\n    segment: {\n      blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {\n        const blobItem: BlobItemInternalModel = {\n          ...blobItemInteral,\n          name: BlobNameToString(blobItemInteral.name),\n        };\n        return blobItem;\n      }),\n    },\n  };\n}\n\nexport function ConvertInternalResponseOfListBlobHierarchy(\n  internalResponse: ListBlobsHierarchySegmentResponse\n): ListBlobsHierarchySegmentResponseModel {\n  return {\n    ...internalResponse,\n    segment: {\n      blobPrefixes: internalResponse.segment.blobPrefixes?.map((blobPrefixInternal) => {\n        const blobPrefix: BlobPrefixModel = {\n          name: BlobNameToString(blobPrefixInternal.name),\n        };\n        return blobPrefix;\n      }),\n      blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {\n        const blobItem: BlobItemInternalModel = {\n          ...blobItemInteral,\n          name: BlobNameToString(blobItemInteral.name),\n        };\n        return blobItem;\n      }),\n    },\n  };\n}\n\nexport function* ExtractPageRangeInfoItems(\n  getPageRangesSegment: PageBlobGetPageRangesDiffResponseModel\n): IterableIterator<PageRangeInfo> {\n  let pageRange: PageRange[] = [];\n  let clearRange: ClearRange[] = [];\n\n  if (getPageRangesSegment.pageRange) pageRange = getPageRangesSegment.pageRange;\n  if (getPageRangesSegment.clearRange) clearRange = getPageRangesSegment.clearRange;\n\n  let pageRangeIndex = 0;\n  let clearRangeIndex = 0;\n\n  while (pageRangeIndex < pageRange.length && clearRangeIndex < clearRange.length) {\n    if (pageRange[pageRangeIndex].start < clearRange[clearRangeIndex].start) {\n      yield {\n        start: pageRange[pageRangeIndex].start,\n        end: pageRange[pageRangeIndex].end,\n        isClear: false,\n      };\n      ++pageRangeIndex;\n    } else {\n      yield {\n        start: clearRange[clearRangeIndex].start,\n        end: clearRange[clearRangeIndex].end,\n        isClear: true,\n      };\n      ++clearRangeIndex;\n    }\n  }\n\n  for (; pageRangeIndex < pageRange.length; ++pageRangeIndex) {\n    yield {\n      start: pageRange[pageRangeIndex].start,\n      end: pageRange[pageRangeIndex].end,\n      isClear: false,\n    };\n  }\n\n  for (; clearRangeIndex < clearRange.length; ++clearRangeIndex) {\n    yield {\n      start: clearRange[clearRangeIndex].start,\n      end: clearRange[clearRangeIndex].end,\n      isClear: true,\n    };\n  }\n}\n\n/**\n * Escape the blobName but keep path separator ('/').\n */\nexport function EscapePath(blobName: string): string {\n  const split = blobName.split(\"/\");\n  for (let i = 0; i < split.length; i++) {\n    split[i] = encodeURIComponent(split[i]);\n  }\n  return split.join(\"/\");\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}