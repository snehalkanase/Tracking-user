{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BatchResponseParser } from \"./BatchResponseParser\";\nimport { utf8ByteLength } from \"./BatchUtils\";\nimport { BlobBatch } from \"./BlobBatch\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { Service, Container } from \"./generated/src/operations\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { newPipeline, isPipelineLike } from \"./Pipeline\";\nimport { getURLPath } from \"./utils/utils.common\";\n/**\n * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n */\nexport var BlobBatchClient = /*#__PURE__*/function () {\n  function BlobBatchClient(url, credentialOrPipeline,\n  // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    _classCallCheck(this, BlobBatchClient);\n    var pipeline;\n    if (isPipelineLike(credentialOrPipeline)) {\n      pipeline = credentialOrPipeline;\n    } else if (!credentialOrPipeline) {\n      // no credential provided\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    }\n    var storageClientContext = new StorageClientContext(url, pipeline.toServiceClientOptions());\n    var path = getURLPath(url);\n    if (path && path !== \"/\") {\n      // Container scoped.\n      this.serviceOrContainerContext = new Container(storageClientContext);\n    } else {\n      this.serviceOrContainerContext = new Service(storageClientContext);\n    }\n  }\n  /**\n   * Creates a {@link BlobBatch}.\n   * A BlobBatch represents an aggregated set of operations on blobs.\n   */\n  _createClass(BlobBatchClient, [{\n    key: \"createBatch\",\n    value: function createBatch() {\n      return new BlobBatch();\n    }\n  }, {\n    key: \"deleteBlobs\",\n    value: function () {\n      var _deleteBlobs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(urlsOrBlobClients, credentialOrOptions,\n      // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n      /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n      options) {\n        var batch, _iterator, _step, urlOrBlobClient;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              batch = new BlobBatch();\n              _iterator = _createForOfIteratorHelper(urlsOrBlobClients);\n              _context.prev = 2;\n              _iterator.s();\n            case 4:\n              if ((_step = _iterator.n()).done) {\n                _context.next = 15;\n                break;\n              }\n              urlOrBlobClient = _step.value;\n              if (!(typeof urlOrBlobClient === \"string\")) {\n                _context.next = 11;\n                break;\n              }\n              _context.next = 9;\n              return batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options);\n            case 9:\n              _context.next = 13;\n              break;\n            case 11:\n              _context.next = 13;\n              return batch.deleteBlob(urlOrBlobClient, credentialOrOptions);\n            case 13:\n              _context.next = 4;\n              break;\n            case 15:\n              _context.next = 20;\n              break;\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](2);\n              _iterator.e(_context.t0);\n            case 20:\n              _context.prev = 20;\n              _iterator.f();\n              return _context.finish(20);\n            case 23:\n              return _context.abrupt(\"return\", this.submitBatch(batch));\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[2, 17, 20, 23]]);\n      }));\n      function deleteBlobs(_x, _x2, _x3) {\n        return _deleteBlobs.apply(this, arguments);\n      }\n      return deleteBlobs;\n    }()\n  }, {\n    key: \"setBlobsAccessTier\",\n    value: function () {\n      var _setBlobsAccessTier = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(urlsOrBlobClients, credentialOrTier, tierOrOptions,\n      // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n      /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n      options) {\n        var batch, _iterator2, _step2, urlOrBlobClient;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              batch = new BlobBatch();\n              _iterator2 = _createForOfIteratorHelper(urlsOrBlobClients);\n              _context2.prev = 2;\n              _iterator2.s();\n            case 4:\n              if ((_step2 = _iterator2.n()).done) {\n                _context2.next = 15;\n                break;\n              }\n              urlOrBlobClient = _step2.value;\n              if (!(typeof urlOrBlobClient === \"string\")) {\n                _context2.next = 11;\n                break;\n              }\n              _context2.next = 9;\n              return batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options);\n            case 9:\n              _context2.next = 13;\n              break;\n            case 11:\n              _context2.next = 13;\n              return batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions);\n            case 13:\n              _context2.next = 4;\n              break;\n            case 15:\n              _context2.next = 20;\n              break;\n            case 17:\n              _context2.prev = 17;\n              _context2.t0 = _context2[\"catch\"](2);\n              _iterator2.e(_context2.t0);\n            case 20:\n              _context2.prev = 20;\n              _iterator2.f();\n              return _context2.finish(20);\n            case 23:\n              return _context2.abrupt(\"return\", this.submitBatch(batch));\n            case 24:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[2, 17, 20, 23]]);\n      }));\n      function setBlobsAccessTier(_x4, _x5, _x6, _x7) {\n        return _setBlobsAccessTier.apply(this, arguments);\n      }\n      return setBlobsAccessTier;\n    }()\n    /**\n     * Submit batch request which consists of multiple subrequests.\n     *\n     * Get `blobBatchClient` and other details before running the snippets.\n     * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`\n     *\n     * Example usage:\n     *\n     * ```js\n     * let batchRequest = new BlobBatch();\n     * await batchRequest.deleteBlob(urlInString0, credential0);\n     * await batchRequest.deleteBlob(urlInString1, credential1, {\n     *  deleteSnapshots: \"include\"\n     * });\n     * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n     * console.log(batchResp.subResponsesSucceededCount);\n     * ```\n     *\n     * Example using a lease:\n     *\n     * ```js\n     * let batchRequest = new BlobBatch();\n     * await batchRequest.setBlobAccessTier(blockBlobClient0, \"Cool\");\n     * await batchRequest.setBlobAccessTier(blockBlobClient1, \"Cool\", {\n     *  conditions: { leaseId: leaseId }\n     * });\n     * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n     * console.log(batchResp.subResponsesSucceededCount);\n     * ```\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n     *\n     * @param batchRequest - A set of Delete or SetTier operations.\n     * @param options -\n     */\n  }, {\n    key: \"submitBatch\",\n    value: function () {\n      var _submitBatch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(batchRequest) {\n        var options,\n          _createSpan,\n          span,\n          updatedOptions,\n          batchRequestBody,\n          rawBatchResponse,\n          batchResponseParser,\n          responseSummary,\n          res,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n              if (!(!batchRequest || batchRequest.getSubRequests().size === 0)) {\n                _context3.next = 3;\n                break;\n              }\n              throw new RangeError(\"Batch request should contain one or more sub requests.\");\n            case 3:\n              _createSpan = createSpan(\"BlobBatchClient-submitBatch\", options), span = _createSpan.span, updatedOptions = _createSpan.updatedOptions;\n              _context3.prev = 4;\n              batchRequestBody = batchRequest.getHttpRequestBody(); // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.\n              _context3.next = 8;\n              return this.serviceOrContainerContext.submitBatch(utf8ByteLength(batchRequestBody), batchRequest.getMultiPartContentType(), batchRequestBody, Object.assign(Object.assign({}, options), convertTracingToRequestOptionsBase(updatedOptions)));\n            case 8:\n              rawBatchResponse = _context3.sent;\n              // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).\n              batchResponseParser = new BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests());\n              _context3.next = 12;\n              return batchResponseParser.parseBatchResponse();\n            case 12:\n              responseSummary = _context3.sent;\n              res = {\n                _response: rawBatchResponse._response,\n                contentType: rawBatchResponse.contentType,\n                errorCode: rawBatchResponse.errorCode,\n                requestId: rawBatchResponse.requestId,\n                clientRequestId: rawBatchResponse.clientRequestId,\n                version: rawBatchResponse.version,\n                subResponses: responseSummary.subResponses,\n                subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,\n                subResponsesFailedCount: responseSummary.subResponsesFailedCount\n              };\n              return _context3.abrupt(\"return\", res);\n            case 17:\n              _context3.prev = 17;\n              _context3.t0 = _context3[\"catch\"](4);\n              span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: _context3.t0.message\n              });\n              throw _context3.t0;\n            case 21:\n              _context3.prev = 21;\n              span.end();\n              return _context3.finish(21);\n            case 24:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[4, 17, 21, 24]]);\n      }));\n      function submitBatch(_x8) {\n        return _submitBatch.apply(this, arguments);\n      }\n      return submitBatch;\n    }()\n  }]);\n  return BlobBatchClient;\n}();","map":{"version":3,"names":["BatchResponseParser","utf8ByteLength","BlobBatch","SpanStatusCode","convertTracingToRequestOptionsBase","createSpan","Service","Container","AnonymousCredential","StorageClientContext","newPipeline","isPipelineLike","getURLPath","BlobBatchClient","url","credentialOrPipeline","options","_classCallCheck","pipeline","storageClientContext","toServiceClientOptions","path","serviceOrContainerContext","_createClass","key","value","createBatch","_deleteBlobs","_asyncToGenerator","_regeneratorRuntime","mark","_callee","urlsOrBlobClients","credentialOrOptions","batch","_iterator","_step","urlOrBlobClient","wrap","_callee$","_context","prev","next","_createForOfIteratorHelper","s","n","done","deleteBlob","t0","e","f","finish","abrupt","submitBatch","stop","deleteBlobs","_x","_x2","_x3","apply","arguments","_setBlobsAccessTier","_callee2","credentialOrTier","tierOrOptions","_iterator2","_step2","_callee2$","_context2","setBlobAccessTier","setBlobsAccessTier","_x4","_x5","_x6","_x7","_submitBatch","_callee3","batchRequest","_createSpan","span","updatedOptions","batchRequestBody","rawBatchResponse","batchResponseParser","responseSummary","res","_args3","_callee3$","_context3","length","undefined","getSubRequests","size","RangeError","getHttpRequestBody","getMultiPartContentType","Object","assign","sent","parseBatchResponse","_response","contentType","errorCode","requestId","clientRequestId","version","subResponses","subResponsesSucceededCount","subResponsesFailedCount","setStatus","code","ERROR","message","end","_x8"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\BlobBatchClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AccessTier,\n  ServiceSubmitBatchHeaders,\n  ServiceSubmitBatchOptionalParamsModel,\n  ServiceSubmitBatchResponseModel,\n} from \"./generatedModels\";\nimport { ParsedBatchResponse } from \"./BatchResponse\";\nimport { BatchResponseParser } from \"./BatchResponseParser\";\nimport { utf8ByteLength } from \"./BatchUtils\";\nimport { BlobBatch } from \"./BlobBatch\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { HttpResponse, TokenCredential } from \"@azure/core-http\";\nimport { Service, Container } from \"./generated/src/operations\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { BlobDeleteOptions, BlobClient, BlobSetTierOptions } from \"./Clients\";\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { PipelineLike, StoragePipelineOptions, newPipeline, isPipelineLike } from \"./Pipeline\";\nimport { getURLPath } from \"./utils/utils.common\";\n\n/**\n * Options to configure the Service - Submit Batch Optional Params.\n */\nexport interface BlobBatchSubmitBatchOptionalParams extends ServiceSubmitBatchOptionalParamsModel {}\n\n/**\n * Contains response data for blob batch operations.\n */\nexport declare type BlobBatchSubmitBatchResponse = ParsedBatchResponse &\n  ServiceSubmitBatchHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ServiceSubmitBatchHeaders;\n    };\n  };\n\n/**\n * Contains response data for the {@link deleteBlobs} operation.\n */\nexport declare type BlobBatchDeleteBlobsResponse = BlobBatchSubmitBatchResponse;\n\n/**\n * Contains response data for the {@link setBlobsAccessTier} operation.\n */\nexport declare type BlobBatchSetBlobsAccessTierResponse = BlobBatchSubmitBatchResponse;\n\n/**\n * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n */\nexport class BlobBatchClient {\n  private serviceOrContainerContext: Service | Container;\n\n  /**\n   * Creates an instance of BlobBatchClient.\n   *\n   * @param url - A url pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Options to configure the HTTP pipeline.\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  );\n\n  /**\n   * Creates an instance of BlobBatchClient.\n   *\n   * @param url - A url pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  constructor(url: string, pipeline: PipelineLike);\n  constructor(\n    url: string,\n    credentialOrPipeline?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | PipelineLike,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  ) {\n    let pipeline: PipelineLike;\n    if (isPipelineLike(credentialOrPipeline)) {\n      pipeline = credentialOrPipeline;\n    } else if (!credentialOrPipeline) {\n      // no credential provided\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    }\n\n    const storageClientContext = new StorageClientContext(url, pipeline.toServiceClientOptions());\n\n    const path = getURLPath(url);\n    if (path && path !== \"/\") {\n      // Container scoped.\n      this.serviceOrContainerContext = new Container(storageClientContext);\n    } else {\n      this.serviceOrContainerContext = new Service(storageClientContext);\n    }\n  }\n\n  /**\n   * Creates a {@link BlobBatch}.\n   * A BlobBatch represents an aggregated set of operations on blobs.\n   */\n  public createBatch(): BlobBatch {\n    return new BlobBatch();\n  }\n\n  /**\n   * Create multiple delete operations to mark the specified blobs or snapshots for deletion.\n   * Note that in order to delete a blob, you must delete all of its snapshots.\n   * You can delete both at the same time. See [delete operation details](https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob).\n   * The operations will be authenticated and authorized with specified credential.\n   * See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param urls - The urls of the blob resources to delete.\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options -\n   */\n  public async deleteBlobs(\n    urls: string[],\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobDeleteOptions\n  ): Promise<BlobBatchDeleteBlobsResponse>;\n\n  /**\n   * Create multiple delete operations to mark the specified blobs or snapshots for deletion.\n   * Note that in order to delete a blob, you must delete all of its snapshots.\n   * You can delete both at the same time. See [delete operation details](https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob).\n   * The operation(subrequest) will be authenticated and authorized with specified credential.\n   * See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param blobClients - The BlobClients for the blobs to delete.\n   * @param options -\n   */\n  public async deleteBlobs(\n    blobClients: BlobClient[],\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobDeleteOptions\n  ): Promise<BlobBatchDeleteBlobsResponse>;\n\n  public async deleteBlobs(\n    urlsOrBlobClients: string[] | BlobClient[],\n    credentialOrOptions:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | BlobDeleteOptions\n      | undefined,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobDeleteOptions\n  ): Promise<BlobBatchDeleteBlobsResponse> {\n    const batch = new BlobBatch();\n    for (const urlOrBlobClient of urlsOrBlobClients) {\n      if (typeof urlOrBlobClient === \"string\") {\n        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions as TokenCredential, options);\n      } else {\n        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions as BlobDeleteOptions);\n      }\n    }\n    return this.submitBatch(batch);\n  }\n\n  /**\n   * Create multiple set tier operations to set the tier on a blob.\n   * The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant\n   * storage only). A premium page blob's tier determines the allowed size, IOPS,\n   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n   * storage type. This operation does not update the blob's ETag.\n   * See [set blob tier details](https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier).\n   * The operation(subrequest) will be authenticated and authorized\n   * with specified credential.See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param urls - The urls of the blob resource to delete.\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param tier -\n   * @param options -\n   */\n  public async setBlobsAccessTier(\n    urls: string[],\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    tier: AccessTier,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobSetTierOptions\n  ): Promise<BlobBatchSetBlobsAccessTierResponse>;\n\n  /**\n   * Create multiple set tier operations to set the tier on a blob.\n   * The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant\n   * storage only). A premium page blob's tier determines the allowed size, IOPS,\n   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n   * storage type. This operation does not update the blob's ETag.\n   * See [set blob tier details](https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier).\n   * The operation(subrequest) will be authenticated and authorized\n   * with specified credential.See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param blobClients - The BlobClients for the blobs which should have a new tier set.\n   * @param tier -\n   * @param options -\n   */\n  public async setBlobsAccessTier(\n    blobClients: BlobClient[],\n    tier: AccessTier,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobSetTierOptions\n  ): Promise<BlobBatchSetBlobsAccessTierResponse>;\n\n  public async setBlobsAccessTier(\n    urlsOrBlobClients: string[] | BlobClient[],\n    credentialOrTier:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | AccessTier,\n    tierOrOptions?: AccessTier | BlobSetTierOptions,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobSetTierOptions\n  ): Promise<BlobBatchSetBlobsAccessTierResponse> {\n    const batch = new BlobBatch();\n    for (const urlOrBlobClient of urlsOrBlobClients) {\n      if (typeof urlOrBlobClient === \"string\") {\n        await batch.setBlobAccessTier(\n          urlOrBlobClient,\n          credentialOrTier as TokenCredential,\n          tierOrOptions as AccessTier,\n          options\n        );\n      } else {\n        await batch.setBlobAccessTier(\n          urlOrBlobClient,\n          credentialOrTier as AccessTier,\n          tierOrOptions as BlobSetTierOptions\n        );\n      }\n    }\n    return this.submitBatch(batch);\n  }\n\n  /**\n   * Submit batch request which consists of multiple subrequests.\n   *\n   * Get `blobBatchClient` and other details before running the snippets.\n   * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`\n   *\n   * Example usage:\n   *\n   * ```js\n   * let batchRequest = new BlobBatch();\n   * await batchRequest.deleteBlob(urlInString0, credential0);\n   * await batchRequest.deleteBlob(urlInString1, credential1, {\n   *  deleteSnapshots: \"include\"\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * Example using a lease:\n   *\n   * ```js\n   * let batchRequest = new BlobBatch();\n   * await batchRequest.setBlobAccessTier(blockBlobClient0, \"Cool\");\n   * await batchRequest.setBlobAccessTier(blockBlobClient1, \"Cool\", {\n   *  conditions: { leaseId: leaseId }\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n   *\n   * @param batchRequest - A set of Delete or SetTier operations.\n   * @param options -\n   */\n  public async submitBatch(\n    batchRequest: BlobBatch,\n    options: BlobBatchSubmitBatchOptionalParams = {}\n  ): Promise<BlobBatchSubmitBatchResponse> {\n    if (!batchRequest || batchRequest.getSubRequests().size === 0) {\n      throw new RangeError(\"Batch request should contain one or more sub requests.\");\n    }\n\n    const { span, updatedOptions } = createSpan(\"BlobBatchClient-submitBatch\", options);\n    try {\n      const batchRequestBody = batchRequest.getHttpRequestBody();\n\n      // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.\n      const rawBatchResponse: ServiceSubmitBatchResponseModel =\n        await this.serviceOrContainerContext.submitBatch(\n          utf8ByteLength(batchRequestBody),\n          batchRequest.getMultiPartContentType(),\n          batchRequestBody,\n          {\n            ...options,\n            ...convertTracingToRequestOptionsBase(updatedOptions),\n          }\n        );\n\n      // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).\n      const batchResponseParser = new BatchResponseParser(\n        rawBatchResponse,\n        batchRequest.getSubRequests()\n      );\n      const responseSummary = await batchResponseParser.parseBatchResponse();\n\n      const res: BlobBatchSubmitBatchResponse = {\n        _response: rawBatchResponse._response,\n        contentType: rawBatchResponse.contentType,\n        errorCode: rawBatchResponse.errorCode,\n        requestId: rawBatchResponse.requestId,\n        clientRequestId: rawBatchResponse.clientRequestId,\n        version: rawBatchResponse.version,\n        subResponses: responseSummary.subResponses,\n        subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,\n        subResponsesFailedCount: responseSummary.subResponsesFailedCount,\n      };\n\n      return res;\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}