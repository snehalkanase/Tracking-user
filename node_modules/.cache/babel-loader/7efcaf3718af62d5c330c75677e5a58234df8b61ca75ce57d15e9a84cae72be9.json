{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport * as utils from \"../util/utils\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { delay } from \"@azure/core-util\";\nexport function rpRegistrationPolicy() {\n  let retryTimeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;\n  return {\n    create: (nextPolicy, options) => {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    }\n  };\n}\nexport class RPRegistrationPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy, options) {\n    let _retryTimeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;\n    super(nextPolicy, options);\n    this._retryTimeout = _retryTimeout;\n  }\n  sendRequest(request) {\n    return this._nextPolicy.sendRequest(request.clone()).then(response => registerIfNeeded(this, request, response));\n  }\n}\nfunction registerIfNeeded(policy, request, response) {\n  if (response.status === 409) {\n    const rpName = checkRPNotRegisteredError(response.bodyAsText);\n    if (rpName) {\n      const urlPrefix = extractSubscriptionUrl(request.url);\n      return registerRP(policy, urlPrefix, rpName, request)\n      // Autoregistration of ${provider} failed for some reason. We will not return this error\n      // instead will return the initial response with 409 status code back to the user.\n      // do nothing here as we are returning the original response at the end of this method.\n      .catch(() => false).then(registrationStatus => {\n        if (registrationStatus) {\n          // Retry the original request. We have to change the x-ms-client-request-id\n          // otherwise Azure endpoint will return the initial 409 (cached) response.\n          request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n          return policy._nextPolicy.sendRequest(request.clone());\n        }\n        return response;\n      });\n    }\n  }\n  return Promise.resolve(response);\n}\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param originalRequest - The original request\n * @param reuseUrlToo - Should the url from the original request be reused as well. Default false.\n * @returns A new request object with desired headers.\n */\nfunction getRequestEssentials(originalRequest) {\n  let reuseUrlToo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const reqOptions = originalRequest.clone();\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  }\n  // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n  // Set content-type to application/json\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  return reqOptions;\n}\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param body - The response body received after making the original request.\n * @returns The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body) {\n  let result, responseBody;\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err) {\n      // do nothing;\n    }\n    if (responseBody && responseBody.error && responseBody.error.message && responseBody.error.code && responseBody.error.code === \"MissingSubscriptionRegistration\") {\n      const matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n  return result;\n}\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param url - The original request url\n * @returns The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url) {\n  let result;\n  const matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//gi);\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(`Unable to extract subscriptionId from the given url - ${url}.`);\n  }\n  return result;\n}\n/**\n * Registers the given provider.\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param urlPrefix - https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param provider - The provider name to be registered.\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n */\nasync function registerRP(policy, urlPrefix, provider, originalRequest) {\n  const postUrl = `${urlPrefix}providers/${provider}/register?api-version=2016-02-01`;\n  const getUrl = `${urlPrefix}providers/${provider}?api-version=2016-02-01`;\n  const reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.method = \"POST\";\n  reqOptions.url = postUrl;\n  const response = await policy._nextPolicy.sendRequest(reqOptions);\n  if (response.status !== 200) {\n    throw new Error(`Autoregistration of ${provider} failed. Please try registering manually.`);\n  }\n  return getRegistrationStatus(policy, getUrl, originalRequest);\n}\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param url - The request url for polling\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns True if RP Registration is successful.\n */\nasync function getRegistrationStatus(policy, url, originalRequest) {\n  const reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.url = url;\n  reqOptions.method = \"GET\";\n  const res = await policy._nextPolicy.sendRequest(reqOptions);\n  const obj = res.parsedBody;\n  if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n    return true;\n  } else {\n    await delay(policy._retryTimeout * 1000);\n    return getRegistrationStatus(policy, url, originalRequest);\n  }\n}","map":{"version":3,"names":["utils","BaseRequestPolicy","delay","rpRegistrationPolicy","retryTimeout","arguments","length","undefined","create","nextPolicy","options","RPRegistrationPolicy","constructor","_retryTimeout","sendRequest","request","_nextPolicy","clone","then","response","registerIfNeeded","policy","status","rpName","checkRPNotRegisteredError","bodyAsText","urlPrefix","extractSubscriptionUrl","url","registerRP","catch","registrationStatus","headers","set","generateUuid","Promise","resolve","getRequestEssentials","originalRequest","reuseUrlToo","reqOptions","body","result","responseBody","JSON","parse","err","error","message","code","matchRes","match","pop","Error","provider","postUrl","getUrl","method","getRegistrationStatus","res","obj","parsedBody","registrationState"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\policies\\rpRegistrationPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as utils from \"../util/utils\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport { delay } from \"@azure/core-util\";\n\nexport function rpRegistrationPolicy(retryTimeout = 30): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    },\n  };\n}\n\nexport class RPRegistrationPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    readonly _retryTimeout = 30\n  ) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .then((response) => registerIfNeeded(this, request, response));\n  }\n}\n\nfunction registerIfNeeded(\n  policy: RPRegistrationPolicy,\n  request: WebResourceLike,\n  response: HttpOperationResponse\n): Promise<HttpOperationResponse> {\n  if (response.status === 409) {\n    const rpName = checkRPNotRegisteredError(response.bodyAsText as string);\n    if (rpName) {\n      const urlPrefix = extractSubscriptionUrl(request.url);\n      return (\n        registerRP(policy, urlPrefix, rpName, request)\n          // Autoregistration of ${provider} failed for some reason. We will not return this error\n          // instead will return the initial response with 409 status code back to the user.\n          // do nothing here as we are returning the original response at the end of this method.\n          .catch(() => false)\n          .then((registrationStatus) => {\n            if (registrationStatus) {\n              // Retry the original request. We have to change the x-ms-client-request-id\n              // otherwise Azure endpoint will return the initial 409 (cached) response.\n              request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n              return policy._nextPolicy.sendRequest(request.clone());\n            }\n            return response;\n          })\n      );\n    }\n  }\n\n  return Promise.resolve(response);\n}\n\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param originalRequest - The original request\n * @param reuseUrlToo - Should the url from the original request be reused as well. Default false.\n * @returns A new request object with desired headers.\n */\nfunction getRequestEssentials(\n  originalRequest: WebResourceLike,\n  reuseUrlToo = false\n): WebResourceLike {\n  const reqOptions: WebResourceLike = originalRequest.clone();\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  }\n\n  // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n\n  // Set content-type to application/json\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n\n  return reqOptions;\n}\n\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param body - The response body received after making the original request.\n * @returns The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body: string): string {\n  let result, responseBody;\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err: any) {\n      // do nothing;\n    }\n    if (\n      responseBody &&\n      responseBody.error &&\n      responseBody.error.message &&\n      responseBody.error.code &&\n      responseBody.error.code === \"MissingSubscriptionRegistration\"\n    ) {\n      const matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param url - The original request url\n * @returns The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url: string): string {\n  let result;\n  const matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//gi);\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(`Unable to extract subscriptionId from the given url - ${url}.`);\n  }\n  return result;\n}\n\n/**\n * Registers the given provider.\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param urlPrefix - https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param provider - The provider name to be registered.\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n */\nasync function registerRP(\n  policy: RPRegistrationPolicy,\n  urlPrefix: string,\n  provider: string,\n  originalRequest: WebResourceLike\n): Promise<boolean> {\n  const postUrl = `${urlPrefix}providers/${provider}/register?api-version=2016-02-01`;\n  const getUrl = `${urlPrefix}providers/${provider}?api-version=2016-02-01`;\n  const reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.method = \"POST\";\n  reqOptions.url = postUrl;\n\n  const response = await policy._nextPolicy.sendRequest(reqOptions);\n  if (response.status !== 200) {\n    throw new Error(`Autoregistration of ${provider} failed. Please try registering manually.`);\n  }\n  return getRegistrationStatus(policy, getUrl, originalRequest);\n}\n\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param url - The request url for polling\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns True if RP Registration is successful.\n */\nasync function getRegistrationStatus(\n  policy: RPRegistrationPolicy,\n  url: string,\n  originalRequest: WebResourceLike\n): Promise<boolean> {\n  const reqOptions: any = getRequestEssentials(originalRequest);\n  reqOptions.url = url;\n  reqOptions.method = \"GET\";\n\n  const res = await policy._nextPolicy.sendRequest(reqOptions);\n  const obj = res.parsedBody;\n  if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n    return true;\n  } else {\n    await delay(policy._retryTimeout * 1000);\n    return getRegistrationStatus(policy, url, originalRequest);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}