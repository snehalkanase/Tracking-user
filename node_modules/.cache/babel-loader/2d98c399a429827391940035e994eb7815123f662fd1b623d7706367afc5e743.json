{"ast":null,"code":"import _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { Sanitizer } from \"../util/sanitizer\";\nimport { logger as coreLogger } from \"../log\";\n/**\n * Creates a policy that logs information about the outgoing request and the incoming responses.\n * @param loggingOptions - Logging options.\n * @returns An instance of the {@link LogPolicy}\n */\nexport function logPolicy() {\n  var loggingOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    create: function create(nextPolicy, options) {\n      return new LogPolicy(nextPolicy, options, loggingOptions);\n    }\n  };\n}\n/**\n * A policy that logs information about the outgoing request and the incoming responses.\n */\nexport var LogPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {\n  _inherits(LogPolicy, _BaseRequestPolicy);\n  var _super = _createSuper(LogPolicy);\n  function LogPolicy(nextPolicy, options) {\n    var _this;\n    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$logger = _ref.logger,\n      logger = _ref$logger === void 0 ? coreLogger.info : _ref$logger,\n      _ref$allowedHeaderNam = _ref.allowedHeaderNames,\n      allowedHeaderNames = _ref$allowedHeaderNam === void 0 ? [] : _ref$allowedHeaderNam,\n      _ref$allowedQueryPara = _ref.allowedQueryParameters,\n      allowedQueryParameters = _ref$allowedQueryPara === void 0 ? [] : _ref$allowedQueryPara;\n    _classCallCheck(this, LogPolicy);\n    _this = _super.call(this, nextPolicy, options);\n    _this.logger = logger;\n    _this.sanitizer = new Sanitizer({\n      allowedHeaderNames: allowedHeaderNames,\n      allowedQueryParameters: allowedQueryParameters\n    });\n    return _this;\n  }\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n  _createClass(LogPolicy, [{\n    key: \"allowedHeaderNames\",\n    get: function get() {\n      return this.sanitizer.allowedHeaderNames;\n    }\n    /**\n     * Header names whose values will be logged when logging is enabled. Defaults to\n     * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n     * specified in this field will be added to that list.  Any other values will\n     * be written to logs as \"REDACTED\".\n     * @deprecated Pass these into the constructor instead.\n     */,\n    set: function set(allowedHeaderNames) {\n      this.sanitizer.allowedHeaderNames = allowedHeaderNames;\n    }\n    /**\n     * Query string names whose values will be logged when logging is enabled. By default no\n     * query string values are logged.\n     * @deprecated Pass these into the constructor instead.\n     */\n  }, {\n    key: \"allowedQueryParameters\",\n    get: function get() {\n      return this.sanitizer.allowedQueryParameters;\n    }\n    /**\n     * Query string names whose values will be logged when logging is enabled. By default no\n     * query string values are logged.\n     * @deprecated Pass these into the constructor instead.\n     */,\n    set: function set(allowedQueryParameters) {\n      this.sanitizer.allowedQueryParameters = allowedQueryParameters;\n    }\n  }, {\n    key: \"sendRequest\",\n    value: function sendRequest(request) {\n      var _this2 = this;\n      if (!this.logger.enabled) return this._nextPolicy.sendRequest(request);\n      this.logRequest(request);\n      return this._nextPolicy.sendRequest(request).then(function (response) {\n        return _this2.logResponse(response);\n      });\n    }\n  }, {\n    key: \"logRequest\",\n    value: function logRequest(request) {\n      this.logger(\"Request: \".concat(this.sanitizer.sanitize(request)));\n    }\n  }, {\n    key: \"logResponse\",\n    value: function logResponse(response) {\n      this.logger(\"Response status code: \".concat(response.status));\n      this.logger(\"Headers: \".concat(this.sanitizer.sanitize(response.headers)));\n      return response;\n    }\n  }]);\n  return LogPolicy;\n}(BaseRequestPolicy);","map":{"version":3,"names":["BaseRequestPolicy","Sanitizer","logger","coreLogger","logPolicy","loggingOptions","arguments","length","undefined","create","nextPolicy","options","LogPolicy","_BaseRequestPolicy","_inherits","_super","_createSuper","_this","_ref","_ref$logger","info","_ref$allowedHeaderNam","allowedHeaderNames","_ref$allowedQueryPara","allowedQueryParameters","_classCallCheck","call","sanitizer","_createClass","key","get","set","value","sendRequest","request","_this2","enabled","_nextPolicy","logRequest","then","response","logResponse","concat","sanitize","status","headers"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\policies\\logPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { Debugger } from \"@azure/logger\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { Sanitizer } from \"../util/sanitizer\";\nimport { WebResourceLike } from \"../webResource\";\nimport { logger as coreLogger } from \"../log\";\n\n/**\n * Options to pass to the {@link logPolicy}.\n * By default only a set list of headers are logged, though this can be configured. Request and response bodies are never logged.\n */\nexport interface LogPolicyOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to:\n   * x-ms-client-request-id, x-ms-return-client-request-id, x-ms-useragent, x-ms-correlation-request-id,\n   * x-ms-request-id, client-request-id, ms-cv, return-client-request-id, traceparent, Access-Control-Allow-Credentials,\n   * Access-Control-Allow-Headers, Access-Control-Allow-Methods, Access-Control-Allow-Origin, Access-Control-Expose-Headers,\n   * Access-Control-Max-Age, Access-Control-Request-Headers, Access-Control-Request-Method, Origin, Accept, Accept-Encoding,\n   * Cache-Control, Connection, Content-Length, Content-Type, Date, ETag, Expires, If-Match, If-Modified-Since, If-None-Match,\n   * If-Unmodified-Since, Last-Modified, Pragma, Request-Id, Retry-After, Server, Transfer-Encoding, and User-Agent.\n   *\n   * Any headers specified in this field will be added to that list.\n   * Any other values will be written to logs as \"REDACTED\".\n   */\n  allowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  allowedQueryParameters?: string[];\n\n  /**\n   * The Debugger (logger) instance to use for writing pipeline logs.\n   */\n  logger?: Debugger;\n}\n\n/**\n * Creates a policy that logs information about the outgoing request and the incoming responses.\n * @param loggingOptions - Logging options.\n * @returns An instance of the {@link LogPolicy}\n */\nexport function logPolicy(loggingOptions: LogPolicyOptions = {}): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new LogPolicy(nextPolicy, options, loggingOptions);\n    },\n  };\n}\n\n/**\n * A policy that logs information about the outgoing request and the incoming responses.\n */\nexport class LogPolicy extends BaseRequestPolicy {\n  logger: Debugger;\n  sanitizer: Sanitizer;\n\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n  public get allowedHeaderNames(): Set<string> {\n    return this.sanitizer.allowedHeaderNames;\n  }\n\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n  public set allowedHeaderNames(allowedHeaderNames: Set<string>) {\n    this.sanitizer.allowedHeaderNames = allowedHeaderNames;\n  }\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n  public get allowedQueryParameters(): Set<string> {\n    return this.sanitizer.allowedQueryParameters;\n  }\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n  public set allowedQueryParameters(allowedQueryParameters: Set<string>) {\n    this.sanitizer.allowedQueryParameters = allowedQueryParameters;\n  }\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    {\n      logger = coreLogger.info,\n      allowedHeaderNames = [],\n      allowedQueryParameters = [],\n    }: LogPolicyOptions = {}\n  ) {\n    super(nextPolicy, options);\n    this.logger = logger;\n    this.sanitizer = new Sanitizer({ allowedHeaderNames, allowedQueryParameters });\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!this.logger.enabled) return this._nextPolicy.sendRequest(request);\n\n    this.logRequest(request);\n    return this._nextPolicy.sendRequest(request).then((response) => this.logResponse(response));\n  }\n\n  private logRequest(request: WebResourceLike): void {\n    this.logger(`Request: ${this.sanitizer.sanitize(request)}`);\n  }\n\n  private logResponse(response: HttpOperationResponse): HttpOperationResponse {\n    this.logger(`Response status code: ${response.status}`);\n    this.logger(`Headers: ${this.sanitizer.sanitize(response.headers)}`);\n    return response;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}