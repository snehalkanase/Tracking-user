{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortError } from \"@azure/abort-controller\";\nimport { BaseRequestPolicy } from \"@azure/core-http\";\nimport { URLConstants } from \"../utils/constants\";\nimport { delay, setURLHost, setURLParameter } from \"../utils/utils.common\";\nimport { logger } from \"../log\";\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @param retryOptions -\n */\nexport function NewRetryPolicyFactory(retryOptions) {\n  return {\n    create: (nextPolicy, options) => {\n      return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n    }\n  };\n}\n/**\n * RetryPolicy types.\n */\nexport var StorageRetryPolicyType;\n(function (StorageRetryPolicyType) {\n  /**\n   * Exponential retry. Retry time delay grows exponentially.\n   */\n  StorageRetryPolicyType[StorageRetryPolicyType[\"EXPONENTIAL\"] = 0] = \"EXPONENTIAL\";\n  /**\n   * Linear retry. Retry time delay grows linearly.\n   */\n  StorageRetryPolicyType[StorageRetryPolicyType[\"FIXED\"] = 1] = \"FIXED\";\n})(StorageRetryPolicyType || (StorageRetryPolicyType = {}));\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS = {\n  maxRetryDelayInMs: 120 * 1000,\n  maxTries: 4,\n  retryDelayInMs: 4 * 1000,\n  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n  secondaryHost: \"\",\n  tryTimeoutInMs: undefined // Use server side default timeout strategy\n};\n\nconst RETRY_ABORT_ERROR = new AbortError(\"The operation was aborted.\");\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nexport class StorageRetryPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of RetryPolicy.\n   *\n   * @param nextPolicy -\n   * @param options -\n   * @param retryOptions -\n   */\n  constructor(nextPolicy, options) {\n    let retryOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETRY_OPTIONS;\n    super(nextPolicy, options);\n    // Initialize retry options\n    this.retryOptions = {\n      retryPolicyType: retryOptions.retryPolicyType ? retryOptions.retryPolicyType : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n      maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1 ? Math.floor(retryOptions.maxTries) : DEFAULT_RETRY_OPTIONS.maxTries,\n      tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0 ? retryOptions.tryTimeoutInMs : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n      retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0 ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs) : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n      maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0 ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n      secondaryHost: retryOptions.secondaryHost ? retryOptions.secondaryHost : DEFAULT_RETRY_OPTIONS.secondaryHost\n    };\n  }\n  /**\n   * Sends request.\n   *\n   * @param request -\n   */\n  async sendRequest(request) {\n    return this.attemptSendRequest(request, false, 1);\n  }\n  /**\n   * Decide and perform next retry. Won't mutate request parameter.\n   *\n   * @param request -\n   * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then\n   *                                   the resource was not found. This may be due to replication delay. So, in this\n   *                                   case, we'll never try the secondary again for this operation.\n   * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes\n   *                                   the attempt will be performed by this method call.\n   */\n  async attemptSendRequest(request, secondaryHas404, attempt) {\n    const newRequest = request.clone();\n    const isPrimaryRetry = secondaryHas404 || !this.retryOptions.secondaryHost || !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") || attempt % 2 === 1;\n    if (!isPrimaryRetry) {\n      newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost);\n    }\n    // Set the server-side timeout query parameter \"timeout=[seconds]\"\n    if (this.retryOptions.tryTimeoutInMs) {\n      newRequest.url = setURLParameter(newRequest.url, URLConstants.Parameters.TIMEOUT, Math.floor(this.retryOptions.tryTimeoutInMs / 1000).toString());\n    }\n    let response;\n    try {\n      logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n      response = await this._nextPolicy.sendRequest(newRequest);\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {\n        return response;\n      }\n      secondaryHas404 = secondaryHas404 || !isPrimaryRetry && response.status === 404;\n    } catch (err) {\n      logger.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n        throw err;\n      }\n    }\n    await this.delay(isPrimaryRetry, attempt, request.abortSignal);\n    return this.attemptSendRequest(request, secondaryHas404, ++attempt);\n  }\n  /**\n   * Decide whether to retry according to last HTTP response and retry counters.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param response -\n   * @param err -\n   */\n  shouldRetry(isPrimaryRetry, attempt, response, err) {\n    if (attempt >= this.retryOptions.maxTries) {\n      logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions.maxTries}, no further try.`);\n      return false;\n    }\n    // Handle network failures, you may need to customize the list when you implement\n    // your own http client\n    const retriableErrors = [\"ETIMEDOUT\", \"ESOCKETTIMEDOUT\", \"ECONNREFUSED\", \"ECONNRESET\", \"ENOENT\", \"ENOTFOUND\", \"TIMEOUT\", \"EPIPE\", \"REQUEST_SEND_ERROR\" // For default xhr based http client provided in ms-rest-js\n    ];\n\n    if (err) {\n      for (const retriableError of retriableErrors) {\n        if (err.name.toUpperCase().includes(retriableError) || err.message.toUpperCase().includes(retriableError) || err.code && err.code.toString().toUpperCase() === retriableError) {\n          logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n          return true;\n        }\n      }\n    }\n    // If attempt was against the secondary & it returned a StatusNotFound (404), then\n    // the resource was not found. This may be due to replication delay. So, in this\n    // case, we'll never try the secondary again for this operation.\n    if (response || err) {\n      const statusCode = response ? response.status : err ? err.statusCode : 0;\n      if (!isPrimaryRetry && statusCode === 404) {\n        logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n        return true;\n      }\n      // Server internal error or server timeout\n      if (statusCode === 503 || statusCode === 500) {\n        logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n        return true;\n      }\n    }\n    if ((err === null || err === void 0 ? void 0 : err.code) === \"PARSE_ERROR\" && (err === null || err === void 0 ? void 0 : err.message.startsWith(`Error \"Error: Unclosed root tag`))) {\n      logger.info(\"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\");\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Delay a calculated time between retries.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param abortSignal -\n   */\n  async delay(isPrimaryRetry, attempt, abortSignal) {\n    let delayTimeInMs = 0;\n    if (isPrimaryRetry) {\n      switch (this.retryOptions.retryPolicyType) {\n        case StorageRetryPolicyType.EXPONENTIAL:\n          delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs, this.retryOptions.maxRetryDelayInMs);\n          break;\n        case StorageRetryPolicyType.FIXED:\n          delayTimeInMs = this.retryOptions.retryDelayInMs;\n          break;\n      }\n    } else {\n      delayTimeInMs = Math.random() * 1000;\n    }\n    logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n    return delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);\n  }\n}","map":{"version":3,"names":["AbortError","BaseRequestPolicy","URLConstants","delay","setURLHost","setURLParameter","logger","NewRetryPolicyFactory","retryOptions","create","nextPolicy","options","StorageRetryPolicy","StorageRetryPolicyType","DEFAULT_RETRY_OPTIONS","maxRetryDelayInMs","maxTries","retryDelayInMs","retryPolicyType","EXPONENTIAL","secondaryHost","tryTimeoutInMs","undefined","RETRY_ABORT_ERROR","constructor","arguments","length","Math","floor","min","sendRequest","request","attemptSendRequest","secondaryHas404","attempt","newRequest","clone","isPrimaryRetry","method","url","Parameters","TIMEOUT","toString","response","info","_nextPolicy","shouldRetry","status","err","error","message","code","abortSignal","retriableErrors","retriableError","name","toUpperCase","includes","statusCode","startsWith","delayTimeInMs","pow","FIXED","random"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\policies\\StorageRetryPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError } from \"@azure/abort-controller\";\n\nimport {\n  AbortSignalLike,\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  RestError,\n  WebResource,\n} from \"@azure/core-http\";\n\nimport { StorageRetryOptions } from \"../StorageRetryPolicyFactory\";\nimport { URLConstants } from \"../utils/constants\";\nimport { delay, setURLHost, setURLParameter } from \"../utils/utils.common\";\nimport { logger } from \"../log\";\n\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @param retryOptions -\n */\nexport function NewRetryPolicyFactory(retryOptions?: StorageRetryOptions): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions): StorageRetryPolicy => {\n      return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n    },\n  };\n}\n\n/**\n * RetryPolicy types.\n */\nexport enum StorageRetryPolicyType {\n  /**\n   * Exponential retry. Retry time delay grows exponentially.\n   */\n  EXPONENTIAL,\n  /**\n   * Linear retry. Retry time delay grows linearly.\n   */\n  FIXED,\n}\n\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS: StorageRetryOptions = {\n  maxRetryDelayInMs: 120 * 1000,\n  maxTries: 4,\n  retryDelayInMs: 4 * 1000,\n  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n  secondaryHost: \"\",\n  tryTimeoutInMs: undefined, // Use server side default timeout strategy\n};\n\nconst RETRY_ABORT_ERROR = new AbortError(\"The operation was aborted.\");\n\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nexport class StorageRetryPolicy extends BaseRequestPolicy {\n  /**\n   * RetryOptions.\n   */\n  private readonly retryOptions: StorageRetryOptions;\n\n  /**\n   * Creates an instance of RetryPolicy.\n   *\n   * @param nextPolicy -\n   * @param options -\n   * @param retryOptions -\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryOptions: StorageRetryOptions = DEFAULT_RETRY_OPTIONS\n  ) {\n    super(nextPolicy, options);\n\n    // Initialize retry options\n    this.retryOptions = {\n      retryPolicyType: retryOptions.retryPolicyType\n        ? retryOptions.retryPolicyType\n        : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n\n      maxTries:\n        retryOptions.maxTries && retryOptions.maxTries >= 1\n          ? Math.floor(retryOptions.maxTries)\n          : DEFAULT_RETRY_OPTIONS.maxTries,\n\n      tryTimeoutInMs:\n        retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0\n          ? retryOptions.tryTimeoutInMs\n          : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n\n      retryDelayInMs:\n        retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0\n          ? Math.min(\n              retryOptions.retryDelayInMs,\n              retryOptions.maxRetryDelayInMs\n                ? retryOptions.maxRetryDelayInMs\n                : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs!\n            )\n          : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n\n      maxRetryDelayInMs:\n        retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0\n          ? retryOptions.maxRetryDelayInMs\n          : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n\n      secondaryHost: retryOptions.secondaryHost\n        ? retryOptions.secondaryHost\n        : DEFAULT_RETRY_OPTIONS.secondaryHost,\n    };\n  }\n\n  /**\n   * Sends request.\n   *\n   * @param request -\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this.attemptSendRequest(request, false, 1);\n  }\n\n  /**\n   * Decide and perform next retry. Won't mutate request parameter.\n   *\n   * @param request -\n   * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then\n   *                                   the resource was not found. This may be due to replication delay. So, in this\n   *                                   case, we'll never try the secondary again for this operation.\n   * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes\n   *                                   the attempt will be performed by this method call.\n   */\n  protected async attemptSendRequest(\n    request: WebResource,\n    secondaryHas404: boolean,\n    attempt: number\n  ): Promise<HttpOperationResponse> {\n    const newRequest: WebResource = request.clone();\n\n    const isPrimaryRetry =\n      secondaryHas404 ||\n      !this.retryOptions.secondaryHost ||\n      !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") ||\n      attempt % 2 === 1;\n\n    if (!isPrimaryRetry) {\n      newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost!);\n    }\n\n    // Set the server-side timeout query parameter \"timeout=[seconds]\"\n    if (this.retryOptions.tryTimeoutInMs) {\n      newRequest.url = setURLParameter(\n        newRequest.url,\n        URLConstants.Parameters.TIMEOUT,\n        Math.floor(this.retryOptions.tryTimeoutInMs! / 1000).toString()\n      );\n    }\n\n    let response: HttpOperationResponse | undefined;\n    try {\n      logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n      response = await this._nextPolicy.sendRequest(newRequest);\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {\n        return response;\n      }\n\n      secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n    } catch (err: any) {\n      logger.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n        throw err;\n      }\n    }\n\n    await this.delay(isPrimaryRetry, attempt, request.abortSignal);\n    return this.attemptSendRequest(request, secondaryHas404, ++attempt);\n  }\n\n  /**\n   * Decide whether to retry according to last HTTP response and retry counters.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param response -\n   * @param err -\n   */\n  protected shouldRetry(\n    isPrimaryRetry: boolean,\n    attempt: number,\n    response?: HttpOperationResponse,\n    err?: RestError\n  ): boolean {\n    if (attempt >= this.retryOptions.maxTries!) {\n      logger.info(\n        `RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions\n          .maxTries!}, no further try.`\n      );\n      return false;\n    }\n\n    // Handle network failures, you may need to customize the list when you implement\n    // your own http client\n    const retriableErrors = [\n      \"ETIMEDOUT\",\n      \"ESOCKETTIMEDOUT\",\n      \"ECONNREFUSED\",\n      \"ECONNRESET\",\n      \"ENOENT\",\n      \"ENOTFOUND\",\n      \"TIMEOUT\",\n      \"EPIPE\",\n      \"REQUEST_SEND_ERROR\", // For default xhr based http client provided in ms-rest-js\n    ];\n    if (err) {\n      for (const retriableError of retriableErrors) {\n        if (\n          err.name.toUpperCase().includes(retriableError) ||\n          err.message.toUpperCase().includes(retriableError) ||\n          (err.code && err.code.toString().toUpperCase() === retriableError)\n        ) {\n          logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n          return true;\n        }\n      }\n    }\n\n    // If attempt was against the secondary & it returned a StatusNotFound (404), then\n    // the resource was not found. This may be due to replication delay. So, in this\n    // case, we'll never try the secondary again for this operation.\n    if (response || err) {\n      const statusCode = response ? response.status : err ? err.statusCode : 0;\n      if (!isPrimaryRetry && statusCode === 404) {\n        logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n        return true;\n      }\n\n      // Server internal error or server timeout\n      if (statusCode === 503 || statusCode === 500) {\n        logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n        return true;\n      }\n    }\n\n    if (err?.code === \"PARSE_ERROR\" && err?.message.startsWith(`Error \"Error: Unclosed root tag`)) {\n      logger.info(\n        \"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\"\n      );\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Delay a calculated time between retries.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param abortSignal -\n   */\n  private async delay(isPrimaryRetry: boolean, attempt: number, abortSignal?: AbortSignalLike) {\n    let delayTimeInMs: number = 0;\n\n    if (isPrimaryRetry) {\n      switch (this.retryOptions.retryPolicyType) {\n        case StorageRetryPolicyType.EXPONENTIAL:\n          delayTimeInMs = Math.min(\n            (Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs!,\n            this.retryOptions.maxRetryDelayInMs!\n          );\n          break;\n        case StorageRetryPolicyType.FIXED:\n          delayTimeInMs = this.retryOptions.retryDelayInMs!;\n          break;\n      }\n    } else {\n      delayTimeInMs = Math.random() * 1000;\n    }\n\n    logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n    return delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}