{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { SpanKind, SpanStatusCode, createSpanFunction, getTraceParentHeader, isSpanContextValid } from \"@azure/core-tracing\";\nimport { logger } from \"../log\";\nvar createSpan = createSpanFunction({\n  packagePrefix: \"\",\n  namespace: \"\"\n});\n/**\n * Creates a policy that wraps outgoing requests with a tracing span.\n * @param tracingOptions - Tracing options.\n * @returns An instance of the {@link TracingPolicy} class.\n */\nexport function tracingPolicy() {\n  var tracingOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    create: function create(nextPolicy, options) {\n      return new TracingPolicy(nextPolicy, options, tracingOptions);\n    }\n  };\n}\n/**\n * A policy that wraps outgoing requests with a tracing span.\n */\nexport var TracingPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {\n  _inherits(TracingPolicy, _BaseRequestPolicy);\n  var _super = _createSuper(TracingPolicy);\n  function TracingPolicy(nextPolicy, options, tracingOptions) {\n    var _this;\n    _classCallCheck(this, TracingPolicy);\n    _this = _super.call(this, nextPolicy, options);\n    _this.userAgent = tracingOptions.userAgent;\n    return _this;\n  }\n  _createClass(TracingPolicy, [{\n    key: \"sendRequest\",\n    value: function () {\n      var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {\n        var span, response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (request.tracingContext) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\", this._nextPolicy.sendRequest(request));\n            case 2:\n              span = this.tryCreateSpan(request);\n              if (span) {\n                _context.next = 5;\n                break;\n              }\n              return _context.abrupt(\"return\", this._nextPolicy.sendRequest(request));\n            case 5:\n              _context.prev = 5;\n              _context.next = 8;\n              return this._nextPolicy.sendRequest(request);\n            case 8:\n              response = _context.sent;\n              this.tryProcessResponse(span, response);\n              return _context.abrupt(\"return\", response);\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](5);\n              this.tryProcessError(span, _context.t0);\n              throw _context.t0;\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[5, 13]]);\n      }));\n      function sendRequest(_x) {\n        return _sendRequest.apply(this, arguments);\n      }\n      return sendRequest;\n    }()\n  }, {\n    key: \"tryCreateSpan\",\n    value: function tryCreateSpan(request) {\n      var _a;\n      try {\n        // Passing spanOptions as part of tracingOptions to maintain compatibility @azure/core-tracing@preview.13 and earlier.\n        // We can pass this as a separate parameter once we upgrade to the latest core-tracing.\n        var _createSpan = createSpan(\"HTTP \".concat(request.method), {\n            tracingOptions: {\n              spanOptions: Object.assign(Object.assign({}, request.spanOptions), {\n                kind: SpanKind.CLIENT\n              }),\n              tracingContext: request.tracingContext\n            }\n          }),\n          span = _createSpan.span;\n        // If the span is not recording, don't do any more work.\n        if (!span.isRecording()) {\n          span.end();\n          return undefined;\n        }\n        var namespaceFromContext = (_a = request.tracingContext) === null || _a === void 0 ? void 0 : _a.getValue(Symbol.for(\"az.namespace\"));\n        if (typeof namespaceFromContext === \"string\") {\n          span.setAttribute(\"az.namespace\", namespaceFromContext);\n        }\n        span.setAttributes({\n          \"http.method\": request.method,\n          \"http.url\": request.url,\n          requestId: request.requestId\n        });\n        if (this.userAgent) {\n          span.setAttribute(\"http.user_agent\", this.userAgent);\n        }\n        // set headers\n        var spanContext = span.spanContext();\n        var traceParentHeader = getTraceParentHeader(spanContext);\n        if (traceParentHeader && isSpanContextValid(spanContext)) {\n          request.headers.set(\"traceparent\", traceParentHeader);\n          var traceState = spanContext.traceState && spanContext.traceState.serialize();\n          // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent\n          if (traceState) {\n            request.headers.set(\"tracestate\", traceState);\n          }\n        }\n        return span;\n      } catch (error) {\n        logger.warning(\"Skipping creating a tracing span due to an error: \".concat(error.message));\n        return undefined;\n      }\n    }\n  }, {\n    key: \"tryProcessError\",\n    value: function tryProcessError(span, err) {\n      try {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: err.message\n        });\n        if (err.statusCode) {\n          span.setAttribute(\"http.status_code\", err.statusCode);\n        }\n        span.end();\n      } catch (error) {\n        logger.warning(\"Skipping tracing span processing due to an error: \".concat(error.message));\n      }\n    }\n  }, {\n    key: \"tryProcessResponse\",\n    value: function tryProcessResponse(span, response) {\n      try {\n        span.setAttribute(\"http.status_code\", response.status);\n        var serviceRequestId = response.headers.get(\"x-ms-request-id\");\n        if (serviceRequestId) {\n          span.setAttribute(\"serviceRequestId\", serviceRequestId);\n        }\n        span.setStatus({\n          code: SpanStatusCode.OK\n        });\n        span.end();\n      } catch (error) {\n        logger.warning(\"Skipping tracing span processing due to an error: \".concat(error.message));\n      }\n    }\n  }]);\n  return TracingPolicy;\n}(BaseRequestPolicy);","map":{"version":3,"names":["BaseRequestPolicy","SpanKind","SpanStatusCode","createSpanFunction","getTraceParentHeader","isSpanContextValid","logger","createSpan","packagePrefix","namespace","tracingPolicy","tracingOptions","arguments","length","undefined","create","nextPolicy","options","TracingPolicy","_BaseRequestPolicy","_inherits","_super","_createSuper","_this","_classCallCheck","call","userAgent","_createClass","key","value","_sendRequest","_asyncToGenerator","_regeneratorRuntime","mark","_callee","request","span","response","wrap","_callee$","_context","prev","next","tracingContext","abrupt","_nextPolicy","sendRequest","tryCreateSpan","sent","tryProcessResponse","t0","tryProcessError","stop","_x","apply","_createSpan","concat","method","spanOptions","Object","assign","kind","CLIENT","isRecording","end","namespaceFromContext","_a","getValue","Symbol","for","setAttribute","setAttributes","url","requestId","spanContext","traceParentHeader","headers","set","traceState","serialize","error","warning","message","err","setStatus","code","ERROR","statusCode","status","serviceRequestId","get","OK"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\policies\\tracingPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport {\n  Span,\n  SpanKind,\n  SpanStatusCode,\n  createSpanFunction,\n  getTraceParentHeader,\n  isSpanContextValid,\n} from \"@azure/core-tracing\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport { logger } from \"../log\";\n\nconst createSpan = createSpanFunction({\n  packagePrefix: \"\",\n  namespace: \"\",\n});\n\n/**\n * Options to customize the tracing policy.\n */\nexport interface TracingPolicyOptions {\n  /**\n   * User agent used to better identify the outgoing requests traced by the tracing policy.\n   */\n  userAgent?: string;\n}\n\n/**\n * Creates a policy that wraps outgoing requests with a tracing span.\n * @param tracingOptions - Tracing options.\n * @returns An instance of the {@link TracingPolicy} class.\n */\nexport function tracingPolicy(tracingOptions: TracingPolicyOptions = {}): RequestPolicyFactory {\n  return {\n    create(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n      return new TracingPolicy(nextPolicy, options, tracingOptions);\n    },\n  };\n}\n\n/**\n * A policy that wraps outgoing requests with a tracing span.\n */\nexport class TracingPolicy extends BaseRequestPolicy {\n  private userAgent?: string;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    tracingOptions: TracingPolicyOptions\n  ) {\n    super(nextPolicy, options);\n    this.userAgent = tracingOptions.userAgent;\n  }\n\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!request.tracingContext) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    const span = this.tryCreateSpan(request);\n\n    if (!span) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    try {\n      const response = await this._nextPolicy.sendRequest(request);\n      this.tryProcessResponse(span, response);\n      return response;\n    } catch (err: any) {\n      this.tryProcessError(span, err);\n      throw err;\n    }\n  }\n\n  tryCreateSpan(request: WebResourceLike): Span | undefined {\n    try {\n      // Passing spanOptions as part of tracingOptions to maintain compatibility @azure/core-tracing@preview.13 and earlier.\n      // We can pass this as a separate parameter once we upgrade to the latest core-tracing.\n      const { span } = createSpan(`HTTP ${request.method}`, {\n        tracingOptions: {\n          spanOptions: {\n            ...(request as any).spanOptions,\n            kind: SpanKind.CLIENT,\n          },\n          tracingContext: request.tracingContext,\n        },\n      });\n\n      // If the span is not recording, don't do any more work.\n      if (!span.isRecording()) {\n        span.end();\n        return undefined;\n      }\n\n      const namespaceFromContext = request.tracingContext?.getValue(Symbol.for(\"az.namespace\"));\n\n      if (typeof namespaceFromContext === \"string\") {\n        span.setAttribute(\"az.namespace\", namespaceFromContext);\n      }\n\n      span.setAttributes({\n        \"http.method\": request.method,\n        \"http.url\": request.url,\n        requestId: request.requestId,\n      });\n\n      if (this.userAgent) {\n        span.setAttribute(\"http.user_agent\", this.userAgent);\n      }\n\n      // set headers\n      const spanContext = span.spanContext();\n      const traceParentHeader = getTraceParentHeader(spanContext);\n      if (traceParentHeader && isSpanContextValid(spanContext)) {\n        request.headers.set(\"traceparent\", traceParentHeader);\n        const traceState = spanContext.traceState && spanContext.traceState.serialize();\n        // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent\n        if (traceState) {\n          request.headers.set(\"tracestate\", traceState);\n        }\n      }\n      return span;\n    } catch (error: any) {\n      logger.warning(`Skipping creating a tracing span due to an error: ${error.message}`);\n      return undefined;\n    }\n  }\n\n  private tryProcessError(span: Span, err: any): void {\n    try {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: err.message,\n      });\n\n      if (err.statusCode) {\n        span.setAttribute(\"http.status_code\", err.statusCode);\n      }\n      span.end();\n    } catch (error: any) {\n      logger.warning(`Skipping tracing span processing due to an error: ${error.message}`);\n    }\n  }\n\n  private tryProcessResponse(span: Span, response: HttpOperationResponse): void {\n    try {\n      span.setAttribute(\"http.status_code\", response.status);\n      const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n      if (serviceRequestId) {\n        span.setAttribute(\"serviceRequestId\", serviceRequestId);\n      }\n      span.setStatus({\n        code: SpanStatusCode.OK,\n      });\n      span.end();\n    } catch (error: any) {\n      logger.warning(`Skipping tracing span processing due to an error: ${error.message}`);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}