{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { SpanKind, setSpan, context as otContext, getTracer } from \"./interfaces\";\nimport { trace, INVALID_SPAN_CONTEXT } from \"@opentelemetry/api\";\nexport function isTracingDisabled() {\n  var _a;\n  if (typeof process === \"undefined\") {\n    // not supported in browser for now without polyfills\n    return false;\n  }\n  const azureTracingDisabledValue = (_a = process.env.AZURE_TRACING_DISABLED) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n  if (azureTracingDisabledValue === \"false\" || azureTracingDisabledValue === \"0\") {\n    return false;\n  }\n  return Boolean(azureTracingDisabledValue);\n}\n/**\n * Creates a function that can be used to create spans using the global tracer.\n *\n * Usage:\n *\n * ```typescript\n * // once\n * const createSpan = createSpanFunction({ packagePrefix: \"Azure.Data.AppConfiguration\", namespace: \"Microsoft.AppConfiguration\" });\n *\n * // in each operation\n * const span = createSpan(\"deleteConfigurationSetting\", operationOptions);\n *    // code...\n * span.end();\n * ```\n *\n * @hidden\n * @param args - allows configuration of the prefix for each span as well as the az.namespace field.\n */\nexport function createSpanFunction(args) {\n  return function (operationName, operationOptions) {\n    const tracer = getTracer();\n    const tracingOptions = (operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) || {};\n    const spanOptions = Object.assign({\n      kind: SpanKind.INTERNAL\n    }, tracingOptions.spanOptions);\n    const spanName = args.packagePrefix ? `${args.packagePrefix}.${operationName}` : operationName;\n    let span;\n    if (isTracingDisabled()) {\n      span = trace.wrapSpanContext(INVALID_SPAN_CONTEXT);\n    } else {\n      span = tracer.startSpan(spanName, spanOptions, tracingOptions.tracingContext);\n    }\n    if (args.namespace) {\n      span.setAttribute(\"az.namespace\", args.namespace);\n    }\n    let newSpanOptions = tracingOptions.spanOptions || {};\n    if (span.isRecording() && args.namespace) {\n      newSpanOptions = Object.assign(Object.assign({}, tracingOptions.spanOptions), {\n        attributes: Object.assign(Object.assign({}, spanOptions.attributes), {\n          \"az.namespace\": args.namespace\n        })\n      });\n    }\n    const newTracingOptions = Object.assign(Object.assign({}, tracingOptions), {\n      spanOptions: newSpanOptions,\n      tracingContext: setSpan(tracingOptions.tracingContext || otContext.active(), span)\n    });\n    const newOperationOptions = Object.assign(Object.assign({}, operationOptions), {\n      tracingOptions: newTracingOptions\n    });\n    return {\n      span,\n      updatedOptions: newOperationOptions\n    };\n  };\n}","map":{"version":3,"names":["SpanKind","setSpan","context","otContext","getTracer","trace","INVALID_SPAN_CONTEXT","isTracingDisabled","process","azureTracingDisabledValue","_a","env","AZURE_TRACING_DISABLED","toLowerCase","Boolean","createSpanFunction","args","operationName","operationOptions","tracer","tracingOptions","spanOptions","Object","assign","kind","INTERNAL","spanName","packagePrefix","span","wrapSpanContext","startSpan","tracingContext","namespace","setAttribute","newSpanOptions","isRecording","attributes","newTracingOptions","active","newOperationOptions","updatedOptions"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-tracing\\src\\createSpan.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  OperationTracingOptions,\n  Span,\n  SpanOptions,\n  SpanKind,\n  setSpan,\n  context as otContext,\n  getTracer\n} from \"./interfaces\";\nimport { trace, INVALID_SPAN_CONTEXT } from \"@opentelemetry/api\";\n\n/**\n * Arguments for `createSpanFunction` that allow you to specify the\n * prefix for each created span as well as the `az.namespace` attribute.\n *\n * @hidden\n */\nexport interface CreateSpanFunctionArgs {\n  /**\n   * Package name prefix.\n   *\n   * NOTE: if this is empty no prefix will be applied to created Span names.\n   */\n  packagePrefix: string;\n  /**\n   * Service namespace\n   *\n   * NOTE: if this is empty no `az.namespace` attribute will be added to created Spans.\n   */\n  namespace: string;\n}\n\nexport function isTracingDisabled(): boolean {\n  if (typeof process === \"undefined\") {\n    // not supported in browser for now without polyfills\n    return false;\n  }\n\n  const azureTracingDisabledValue = process.env.AZURE_TRACING_DISABLED?.toLowerCase();\n\n  if (azureTracingDisabledValue === \"false\" || azureTracingDisabledValue === \"0\") {\n    return false;\n  }\n\n  return Boolean(azureTracingDisabledValue);\n}\n\n/**\n * Creates a function that can be used to create spans using the global tracer.\n *\n * Usage:\n *\n * ```typescript\n * // once\n * const createSpan = createSpanFunction({ packagePrefix: \"Azure.Data.AppConfiguration\", namespace: \"Microsoft.AppConfiguration\" });\n *\n * // in each operation\n * const span = createSpan(\"deleteConfigurationSetting\", operationOptions);\n *    // code...\n * span.end();\n * ```\n *\n * @hidden\n * @param args - allows configuration of the prefix for each span as well as the az.namespace field.\n */\nexport function createSpanFunction(args: CreateSpanFunctionArgs) {\n  return function<T extends { tracingOptions?: OperationTracingOptions }>(\n    operationName: string,\n    operationOptions: T | undefined\n  ): { span: Span; updatedOptions: T } {\n    const tracer = getTracer();\n    const tracingOptions = operationOptions?.tracingOptions || {};\n    const spanOptions: SpanOptions = {\n      kind: SpanKind.INTERNAL,\n      ...tracingOptions.spanOptions\n    };\n\n    const spanName = args.packagePrefix ? `${args.packagePrefix}.${operationName}` : operationName;\n\n    let span: Span;\n    if (isTracingDisabled()) {\n      span = trace.wrapSpanContext(INVALID_SPAN_CONTEXT);\n    } else {\n      span = tracer.startSpan(spanName, spanOptions, tracingOptions.tracingContext);\n    }\n\n    if (args.namespace) {\n      span.setAttribute(\"az.namespace\", args.namespace);\n    }\n\n    let newSpanOptions = tracingOptions.spanOptions || {};\n\n    if (span.isRecording() && args.namespace) {\n      newSpanOptions = {\n        ...tracingOptions.spanOptions,\n        attributes: {\n          ...spanOptions.attributes,\n          \"az.namespace\": args.namespace\n        }\n      };\n    }\n\n    const newTracingOptions: Required<OperationTracingOptions> = {\n      ...tracingOptions,\n      spanOptions: newSpanOptions,\n      tracingContext: setSpan(tracingOptions.tracingContext || otContext.active(), span)\n    };\n\n    const newOperationOptions = {\n      ...operationOptions,\n      tracingOptions: newTracingOptions\n    } as T & { tracingOptions: Required<OperationTracingOptions> };\n\n    return {\n      span,\n      updatedOptions: newOperationOptions\n    };\n  };\n}\n"],"mappings":"AAAA;AACA;AAEA,SAIEA,QAAQ,EACRC,OAAO,EACPC,OAAO,IAAIC,SAAS,EACpBC,SAAS,QACJ,cAAc;AACrB,SAASC,KAAK,EAAEC,oBAAoB,QAAQ,oBAAoB;AAuBhE,OAAM,SAAUC,iBAAiBA,CAAA;;EAC/B,IAAI,OAAOC,OAAO,KAAK,WAAW,EAAE;IAClC;IACA,OAAO,KAAK;;EAGd,MAAMC,yBAAyB,GAAG,CAAAC,EAAA,GAAAF,OAAO,CAACG,GAAG,CAACC,sBAAsB,cAAAF,EAAA,uBAAAA,EAAA,CAAEG,WAAW,EAAE;EAEnF,IAAIJ,yBAAyB,KAAK,OAAO,IAAIA,yBAAyB,KAAK,GAAG,EAAE;IAC9E,OAAO,KAAK;;EAGd,OAAOK,OAAO,CAACL,yBAAyB,CAAC;AAC3C;AAEA;;;;;;;;;;;;;;;;;;AAkBA,OAAM,SAAUM,kBAAkBA,CAACC,IAA4B;EAC7D,OAAO,UACLC,aAAqB,EACrBC,gBAA+B;IAE/B,MAAMC,MAAM,GAAGf,SAAS,EAAE;IAC1B,MAAMgB,cAAc,GAAG,CAAAF,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEE,cAAc,KAAI,EAAE;IAC7D,MAAMC,WAAW,GAAAC,MAAA,CAAAC,MAAA;MACfC,IAAI,EAAExB,QAAQ,CAACyB;IAAQ,GACpBL,cAAc,CAACC,WAAW,CAC9B;IAED,MAAMK,QAAQ,GAAGV,IAAI,CAACW,aAAa,GAAG,GAAGX,IAAI,CAACW,aAAa,IAAIV,aAAa,EAAE,GAAGA,aAAa;IAE9F,IAAIW,IAAU;IACd,IAAIrB,iBAAiB,EAAE,EAAE;MACvBqB,IAAI,GAAGvB,KAAK,CAACwB,eAAe,CAACvB,oBAAoB,CAAC;KACnD,MAAM;MACLsB,IAAI,GAAGT,MAAM,CAACW,SAAS,CAACJ,QAAQ,EAAEL,WAAW,EAAED,cAAc,CAACW,cAAc,CAAC;;IAG/E,IAAIf,IAAI,CAACgB,SAAS,EAAE;MAClBJ,IAAI,CAACK,YAAY,CAAC,cAAc,EAAEjB,IAAI,CAACgB,SAAS,CAAC;;IAGnD,IAAIE,cAAc,GAAGd,cAAc,CAACC,WAAW,IAAI,EAAE;IAErD,IAAIO,IAAI,CAACO,WAAW,EAAE,IAAInB,IAAI,CAACgB,SAAS,EAAE;MACxCE,cAAc,GAAAZ,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACTH,cAAc,CAACC,WAAW;QAC7Be,UAAU,EAAAd,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACLF,WAAW,CAACe,UAAU;UACzB,cAAc,EAAEpB,IAAI,CAACgB;QAAS;MAAA,EAEjC;;IAGH,MAAMK,iBAAiB,GAAAf,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAClBH,cAAc;MACjBC,WAAW,EAAEa,cAAc;MAC3BH,cAAc,EAAE9B,OAAO,CAACmB,cAAc,CAACW,cAAc,IAAI5B,SAAS,CAACmC,MAAM,EAAE,EAAEV,IAAI;IAAC,EACnF;IAED,MAAMW,mBAAmB,GAAGjB,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACvBL,gBAAgB;MACnBE,cAAc,EAAEiB;IAAiB,EAC2B;IAE9D,OAAO;MACLT,IAAI;MACJY,cAAc,EAAED;KACjB;EACH,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}