{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class representing a Blob. */\nexport class Blob {\n  /**\n   * Initialize a new instance of the class Blob class.\n   * @param client Reference to the service client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * The Download operation reads or downloads a blob from the system, including its metadata and\n   * properties. You can also call Download to read a snapshot.\n   * @param options The options parameters.\n   */\n  download(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, downloadOperationSpec);\n  }\n  /**\n   * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system\n   * properties for the blob. It does not return the content of the blob.\n   * @param options The options parameters.\n   */\n  getProperties(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, getPropertiesOperationSpec);\n  }\n  /**\n   * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is\n   * permanently removed from the storage account. If the storage account's soft delete feature is\n   * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible\n   * immediately. However, the blob service retains the blob or snapshot for the number of days specified\n   * by the DeleteRetentionPolicy section of [Storage service properties]\n   * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is\n   * permanently removed from the storage account. Note that you continue to be charged for the\n   * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the\n   * \"include=deleted\" query parameter to discover which blobs and snapshots have been soft deleted. You\n   * can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a\n   * soft-deleted blob or snapshot causes the service to return an HTTP status code of 404\n   * (ResourceNotFound).\n   * @param options The options parameters.\n   */\n  delete(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, deleteOperationSpec);\n  }\n  /**\n   * Undelete a blob that was previously soft deleted\n   * @param options The options parameters.\n   */\n  undelete(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, undeleteOperationSpec);\n  }\n  /**\n   * Sets the time a blob will expire and be deleted.\n   * @param expiryOptions Required. Indicates mode of the expiry time\n   * @param options The options parameters.\n   */\n  setExpiry(expiryOptions, options) {\n    const operationArguments = {\n      expiryOptions,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, setExpiryOperationSpec);\n  }\n  /**\n   * The Set HTTP Headers operation sets system properties on the blob\n   * @param options The options parameters.\n   */\n  setHttpHeaders(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, setHttpHeadersOperationSpec);\n  }\n  /**\n   * The Set Immutability Policy operation sets the immutability policy on the blob\n   * @param options The options parameters.\n   */\n  setImmutabilityPolicy(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, setImmutabilityPolicyOperationSpec);\n  }\n  /**\n   * The Delete Immutability Policy operation deletes the immutability policy on the blob\n   * @param options The options parameters.\n   */\n  deleteImmutabilityPolicy(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, deleteImmutabilityPolicyOperationSpec);\n  }\n  /**\n   * The Set Legal Hold operation sets a legal hold on the blob.\n   * @param legalHold Specified if a legal hold should be set on the blob.\n   * @param options The options parameters.\n   */\n  setLegalHold(legalHold, options) {\n    const operationArguments = {\n      legalHold,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, setLegalHoldOperationSpec);\n  }\n  /**\n   * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more\n   * name-value pairs\n   * @param options The options parameters.\n   */\n  setMetadata(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, setMetadataOperationSpec);\n  }\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param options The options parameters.\n   */\n  acquireLease(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, acquireLeaseOperationSpec);\n  }\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  releaseLease(leaseId, options) {\n    const operationArguments = {\n      leaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, releaseLeaseOperationSpec);\n  }\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  renewLease(leaseId, options) {\n    const operationArguments = {\n      leaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, renewLeaseOperationSpec);\n  }\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   *                        (String) for a list of valid GUID string formats.\n   * @param options The options parameters.\n   */\n  changeLease(leaseId, proposedLeaseId, options) {\n    const operationArguments = {\n      leaseId,\n      proposedLeaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, changeLeaseOperationSpec);\n  }\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param options The options parameters.\n   */\n  breakLease(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, breakLeaseOperationSpec);\n  }\n  /**\n   * The Create Snapshot operation creates a read-only snapshot of a blob\n   * @param options The options parameters.\n   */\n  createSnapshot(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, createSnapshotOperationSpec);\n  }\n  /**\n   * The Start Copy From URL operation copies a blob or an internet resource to a new blob.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  startCopyFromURL(copySource, options) {\n    const operationArguments = {\n      copySource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, startCopyFromURLOperationSpec);\n  }\n  /**\n   * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return\n   * a response until the copy is complete.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  copyFromURL(copySource, options) {\n    const operationArguments = {\n      copySource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, copyFromURLOperationSpec);\n  }\n  /**\n   * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination\n   * blob with zero length and full metadata.\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob\n   *               operation.\n   * @param options The options parameters.\n   */\n  abortCopyFromURL(copyId, options) {\n    const operationArguments = {\n      copyId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, abortCopyFromURLOperationSpec);\n  }\n  /**\n   * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant storage only). A\n   * premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block\n   * blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's\n   * ETag.\n   * @param tier Indicates the tier to be set on the blob.\n   * @param options The options parameters.\n   */\n  setTier(tier, options) {\n    const operationArguments = {\n      tier,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, setTierOperationSpec);\n  }\n  /**\n   * Returns the sku name and account kind\n   * @param options The options parameters.\n   */\n  getAccountInfo(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, getAccountInfoOperationSpec);\n  }\n  /**\n   * The Query operation enables users to select/project on blob data by providing simple query\n   * expressions.\n   * @param options The options parameters.\n   */\n  query(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, queryOperationSpec);\n  }\n  /**\n   * The Get Tags operation enables users to get the tags associated with a blob.\n   * @param options The options parameters.\n   */\n  getTags(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, getTagsOperationSpec);\n  }\n  /**\n   * The Set Tags operation enables users to set tags on a blob.\n   * @param options The options parameters.\n   */\n  setTags(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, setTagsOperationSpec);\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */true);\nconst downloadOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Stream\"\n        },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobDownloadHeaders\n    },\n    206: {\n      bodyMapper: {\n        type: {\n          name: \"Stream\"\n        },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobDownloadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDownloadExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.rangeGetContentMD5, Parameters.rangeGetContentCRC64, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPropertiesOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst deleteOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDeleteExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId, Parameters.blobDeleteType],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.deleteSnapshots],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst undeleteOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobUndeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobUndeleteExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp8],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setExpiryOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetExpiryHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetExpiryExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp11],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.expiryOptions, Parameters.expiresOn],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setHttpHeadersOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetHttpHeadersHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetHttpHeadersExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setImmutabilityPolicyOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetImmutabilityPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetImmutabilityPolicyExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp12],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifUnmodifiedSince, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst deleteImmutabilityPolicyOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobDeleteImmutabilityPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDeleteImmutabilityPolicyExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp12],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setLegalHoldOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetLegalHoldHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetLegalHoldExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp13],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.legalHold],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setMetadataOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetMetadataExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp6],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst acquireLeaseOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobAcquireLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobAcquireLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action, Parameters.duration, Parameters.proposedLeaseId, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst releaseLeaseOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobReleaseLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobReleaseLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action1, Parameters.leaseId1, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst renewLeaseOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobRenewLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobRenewLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action2, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst changeLeaseOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobChangeLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobChangeLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action4, Parameters.proposedLeaseId1, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst breakLeaseOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobBreakLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobBreakLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action3, Parameters.breakPeriod, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst createSnapshotOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobCreateSnapshotHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobCreateSnapshotExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp14],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst startCopyFromURLOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobStartCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobStartCopyFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.tier, Parameters.rehydratePriority, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceIfTags, Parameters.copySource, Parameters.blobTagsString, Parameters.sealBlob, Parameters.legalHold1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst copyFromURLOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobCopyFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.copySource, Parameters.blobTagsString, Parameters.legalHold1, Parameters.xMsRequiresSync, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.copySourceTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst abortCopyFromURLOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {\n      headersMapper: Mappers.BlobAbortCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobAbortCopyFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp15, Parameters.copyId],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.copyActionAbortConstant],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setTierOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetTierHeaders\n    },\n    202: {\n      headersMapper: Mappers.BlobSetTierHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetTierExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId, Parameters.comp16],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifTags, Parameters.rehydratePriority, Parameters.tier1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getAccountInfoOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetAccountInfoExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.restype1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst queryOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Stream\"\n        },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobQueryHeaders\n    },\n    206: {\n      bodyMapper: {\n        type: {\n          name: \"Stream\"\n        },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobQueryHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobQueryExceptionHeaders\n    }\n  },\n  requestBody: Parameters.queryRequest,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.comp17],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getTagsOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobTags,\n      headersMapper: Mappers.BlobGetTagsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetTagsExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId, Parameters.comp18],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setTagsOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {\n      headersMapper: Mappers.BlobSetTagsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetTagsExceptionHeaders\n    }\n  },\n  requestBody: Parameters.tags,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.versionId, Parameters.comp18],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.leaseId, Parameters.ifTags, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};","map":{"version":3,"names":["coreHttp","Mappers","Parameters","Blob","constructor","client","download","options","operationArguments","operationOptionsToRequestOptionsBase","sendOperationRequest","downloadOperationSpec","getProperties","getPropertiesOperationSpec","delete","deleteOperationSpec","undelete","undeleteOperationSpec","setExpiry","expiryOptions","setExpiryOperationSpec","setHttpHeaders","setHttpHeadersOperationSpec","setImmutabilityPolicy","setImmutabilityPolicyOperationSpec","deleteImmutabilityPolicy","deleteImmutabilityPolicyOperationSpec","setLegalHold","legalHold","setLegalHoldOperationSpec","setMetadata","setMetadataOperationSpec","acquireLease","acquireLeaseOperationSpec","releaseLease","leaseId","releaseLeaseOperationSpec","renewLease","renewLeaseOperationSpec","changeLease","proposedLeaseId","changeLeaseOperationSpec","breakLease","breakLeaseOperationSpec","createSnapshot","createSnapshotOperationSpec","startCopyFromURL","copySource","startCopyFromURLOperationSpec","copyFromURL","copyFromURLOperationSpec","abortCopyFromURL","copyId","abortCopyFromURLOperationSpec","setTier","tier","setTierOperationSpec","getAccountInfo","getAccountInfoOperationSpec","query","queryOperationSpec","getTags","getTagsOperationSpec","setTags","setTagsOperationSpec","xmlSerializer","Serializer","path","httpMethod","responses","bodyMapper","type","name","serializedName","headersMapper","BlobDownloadHeaders","default","StorageError","BlobDownloadExceptionHeaders","queryParameters","timeoutInSeconds","snapshot","versionId","urlParameters","url","headerParameters","version","requestId","accept1","ifModifiedSince","ifUnmodifiedSince","range","rangeGetContentMD5","rangeGetContentCRC64","encryptionKey","encryptionKeySha256","encryptionAlgorithm","ifMatch","ifNoneMatch","ifTags","isXML","serializer","BlobGetPropertiesHeaders","BlobGetPropertiesExceptionHeaders","BlobDeleteHeaders","BlobDeleteExceptionHeaders","blobDeleteType","deleteSnapshots","BlobUndeleteHeaders","BlobUndeleteExceptionHeaders","comp8","BlobSetExpiryHeaders","BlobSetExpiryExceptionHeaders","comp11","expiresOn","BlobSetHttpHeadersHeaders","BlobSetHttpHeadersExceptionHeaders","comp","blobCacheControl","blobContentType","blobContentMD5","blobContentEncoding","blobContentLanguage","blobContentDisposition","BlobSetImmutabilityPolicyHeaders","BlobSetImmutabilityPolicyExceptionHeaders","comp12","immutabilityPolicyExpiry","immutabilityPolicyMode","BlobDeleteImmutabilityPolicyHeaders","BlobDeleteImmutabilityPolicyExceptionHeaders","BlobSetLegalHoldHeaders","BlobSetLegalHoldExceptionHeaders","comp13","BlobSetMetadataHeaders","BlobSetMetadataExceptionHeaders","comp6","metadata","encryptionScope","BlobAcquireLeaseHeaders","BlobAcquireLeaseExceptionHeaders","comp10","action","duration","BlobReleaseLeaseHeaders","BlobReleaseLeaseExceptionHeaders","action1","leaseId1","BlobRenewLeaseHeaders","BlobRenewLeaseExceptionHeaders","action2","BlobChangeLeaseHeaders","BlobChangeLeaseExceptionHeaders","action4","proposedLeaseId1","BlobBreakLeaseHeaders","BlobBreakLeaseExceptionHeaders","action3","breakPeriod","BlobCreateSnapshotHeaders","BlobCreateSnapshotExceptionHeaders","comp14","BlobStartCopyFromURLHeaders","BlobStartCopyFromURLExceptionHeaders","rehydratePriority","sourceIfModifiedSince","sourceIfUnmodifiedSince","sourceIfMatch","sourceIfNoneMatch","sourceIfTags","blobTagsString","sealBlob","legalHold1","BlobCopyFromURLHeaders","BlobCopyFromURLExceptionHeaders","xMsRequiresSync","sourceContentMD5","copySourceAuthorization","copySourceTags","BlobAbortCopyFromURLHeaders","BlobAbortCopyFromURLExceptionHeaders","comp15","copyActionAbortConstant","BlobSetTierHeaders","BlobSetTierExceptionHeaders","comp16","tier1","BlobGetAccountInfoHeaders","BlobGetAccountInfoExceptionHeaders","restype1","BlobQueryHeaders","BlobQueryExceptionHeaders","requestBody","queryRequest","comp17","contentType","accept","mediaType","BlobTags","BlobGetTagsHeaders","BlobGetTagsExceptionHeaders","comp18","BlobSetTagsHeaders","BlobSetTagsExceptionHeaders","tags","transactionalContentMD5","transactionalContentCrc64"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\generated\\src\\operations\\blob.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  BlobDownloadOptionalParams,\n  BlobDownloadResponse,\n  BlobGetPropertiesOptionalParams,\n  BlobGetPropertiesResponse,\n  BlobDeleteOptionalParams,\n  BlobDeleteResponse,\n  BlobUndeleteOptionalParams,\n  BlobUndeleteResponse,\n  BlobExpiryOptions,\n  BlobSetExpiryOptionalParams,\n  BlobSetExpiryResponse,\n  BlobSetHttpHeadersOptionalParams,\n  BlobSetHttpHeadersResponse,\n  BlobSetImmutabilityPolicyOptionalParams,\n  BlobSetImmutabilityPolicyResponse,\n  BlobDeleteImmutabilityPolicyOptionalParams,\n  BlobDeleteImmutabilityPolicyResponse,\n  BlobSetLegalHoldOptionalParams,\n  BlobSetLegalHoldResponse,\n  BlobSetMetadataOptionalParams,\n  BlobSetMetadataResponse,\n  BlobAcquireLeaseOptionalParams,\n  BlobAcquireLeaseResponse,\n  BlobReleaseLeaseOptionalParams,\n  BlobReleaseLeaseResponse,\n  BlobRenewLeaseOptionalParams,\n  BlobRenewLeaseResponse,\n  BlobChangeLeaseOptionalParams,\n  BlobChangeLeaseResponse,\n  BlobBreakLeaseOptionalParams,\n  BlobBreakLeaseResponse,\n  BlobCreateSnapshotOptionalParams,\n  BlobCreateSnapshotResponse,\n  BlobStartCopyFromURLOptionalParams,\n  BlobStartCopyFromURLResponse,\n  BlobCopyFromURLOptionalParams,\n  BlobCopyFromURLResponse,\n  BlobAbortCopyFromURLOptionalParams,\n  BlobAbortCopyFromURLResponse,\n  AccessTier,\n  BlobSetTierOptionalParams,\n  BlobSetTierResponse,\n  BlobGetAccountInfoResponse,\n  BlobQueryOptionalParams,\n  BlobQueryResponse,\n  BlobGetTagsOptionalParams,\n  BlobGetTagsResponse,\n  BlobSetTagsOptionalParams,\n  BlobSetTagsResponse\n} from \"../models\";\n\n/** Class representing a Blob. */\nexport class Blob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class Blob class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Download operation reads or downloads a blob from the system, including its metadata and\n   * properties. You can also call Download to read a snapshot.\n   * @param options The options parameters.\n   */\n  download(\n    options?: BlobDownloadOptionalParams\n  ): Promise<BlobDownloadResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      downloadOperationSpec\n    ) as Promise<BlobDownloadResponse>;\n  }\n\n  /**\n   * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system\n   * properties for the blob. It does not return the content of the blob.\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: BlobGetPropertiesOptionalParams\n  ): Promise<BlobGetPropertiesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getPropertiesOperationSpec\n    ) as Promise<BlobGetPropertiesResponse>;\n  }\n\n  /**\n   * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is\n   * permanently removed from the storage account. If the storage account's soft delete feature is\n   * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible\n   * immediately. However, the blob service retains the blob or snapshot for the number of days specified\n   * by the DeleteRetentionPolicy section of [Storage service properties]\n   * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is\n   * permanently removed from the storage account. Note that you continue to be charged for the\n   * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the\n   * \"include=deleted\" query parameter to discover which blobs and snapshots have been soft deleted. You\n   * can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a\n   * soft-deleted blob or snapshot causes the service to return an HTTP status code of 404\n   * (ResourceNotFound).\n   * @param options The options parameters.\n   */\n  delete(options?: BlobDeleteOptionalParams): Promise<BlobDeleteResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      deleteOperationSpec\n    ) as Promise<BlobDeleteResponse>;\n  }\n\n  /**\n   * Undelete a blob that was previously soft deleted\n   * @param options The options parameters.\n   */\n  undelete(\n    options?: BlobUndeleteOptionalParams\n  ): Promise<BlobUndeleteResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      undeleteOperationSpec\n    ) as Promise<BlobUndeleteResponse>;\n  }\n\n  /**\n   * Sets the time a blob will expire and be deleted.\n   * @param expiryOptions Required. Indicates mode of the expiry time\n   * @param options The options parameters.\n   */\n  setExpiry(\n    expiryOptions: BlobExpiryOptions,\n    options?: BlobSetExpiryOptionalParams\n  ): Promise<BlobSetExpiryResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      expiryOptions,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setExpiryOperationSpec\n    ) as Promise<BlobSetExpiryResponse>;\n  }\n\n  /**\n   * The Set HTTP Headers operation sets system properties on the blob\n   * @param options The options parameters.\n   */\n  setHttpHeaders(\n    options?: BlobSetHttpHeadersOptionalParams\n  ): Promise<BlobSetHttpHeadersResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setHttpHeadersOperationSpec\n    ) as Promise<BlobSetHttpHeadersResponse>;\n  }\n\n  /**\n   * The Set Immutability Policy operation sets the immutability policy on the blob\n   * @param options The options parameters.\n   */\n  setImmutabilityPolicy(\n    options?: BlobSetImmutabilityPolicyOptionalParams\n  ): Promise<BlobSetImmutabilityPolicyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setImmutabilityPolicyOperationSpec\n    ) as Promise<BlobSetImmutabilityPolicyResponse>;\n  }\n\n  /**\n   * The Delete Immutability Policy operation deletes the immutability policy on the blob\n   * @param options The options parameters.\n   */\n  deleteImmutabilityPolicy(\n    options?: BlobDeleteImmutabilityPolicyOptionalParams\n  ): Promise<BlobDeleteImmutabilityPolicyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      deleteImmutabilityPolicyOperationSpec\n    ) as Promise<BlobDeleteImmutabilityPolicyResponse>;\n  }\n\n  /**\n   * The Set Legal Hold operation sets a legal hold on the blob.\n   * @param legalHold Specified if a legal hold should be set on the blob.\n   * @param options The options parameters.\n   */\n  setLegalHold(\n    legalHold: boolean,\n    options?: BlobSetLegalHoldOptionalParams\n  ): Promise<BlobSetLegalHoldResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      legalHold,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setLegalHoldOperationSpec\n    ) as Promise<BlobSetLegalHoldResponse>;\n  }\n\n  /**\n   * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more\n   * name-value pairs\n   * @param options The options parameters.\n   */\n  setMetadata(\n    options?: BlobSetMetadataOptionalParams\n  ): Promise<BlobSetMetadataResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setMetadataOperationSpec\n    ) as Promise<BlobSetMetadataResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param options The options parameters.\n   */\n  acquireLease(\n    options?: BlobAcquireLeaseOptionalParams\n  ): Promise<BlobAcquireLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      acquireLeaseOperationSpec\n    ) as Promise<BlobAcquireLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  releaseLease(\n    leaseId: string,\n    options?: BlobReleaseLeaseOptionalParams\n  ): Promise<BlobReleaseLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      leaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      releaseLeaseOperationSpec\n    ) as Promise<BlobReleaseLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  renewLease(\n    leaseId: string,\n    options?: BlobRenewLeaseOptionalParams\n  ): Promise<BlobRenewLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      leaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      renewLeaseOperationSpec\n    ) as Promise<BlobRenewLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   *                        (String) for a list of valid GUID string formats.\n   * @param options The options parameters.\n   */\n  changeLease(\n    leaseId: string,\n    proposedLeaseId: string,\n    options?: BlobChangeLeaseOptionalParams\n  ): Promise<BlobChangeLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      leaseId,\n      proposedLeaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      changeLeaseOperationSpec\n    ) as Promise<BlobChangeLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param options The options parameters.\n   */\n  breakLease(\n    options?: BlobBreakLeaseOptionalParams\n  ): Promise<BlobBreakLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      breakLeaseOperationSpec\n    ) as Promise<BlobBreakLeaseResponse>;\n  }\n\n  /**\n   * The Create Snapshot operation creates a read-only snapshot of a blob\n   * @param options The options parameters.\n   */\n  createSnapshot(\n    options?: BlobCreateSnapshotOptionalParams\n  ): Promise<BlobCreateSnapshotResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createSnapshotOperationSpec\n    ) as Promise<BlobCreateSnapshotResponse>;\n  }\n\n  /**\n   * The Start Copy From URL operation copies a blob or an internet resource to a new blob.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  startCopyFromURL(\n    copySource: string,\n    options?: BlobStartCopyFromURLOptionalParams\n  ): Promise<BlobStartCopyFromURLResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      copySource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      startCopyFromURLOperationSpec\n    ) as Promise<BlobStartCopyFromURLResponse>;\n  }\n\n  /**\n   * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return\n   * a response until the copy is complete.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  copyFromURL(\n    copySource: string,\n    options?: BlobCopyFromURLOptionalParams\n  ): Promise<BlobCopyFromURLResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      copySource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      copyFromURLOperationSpec\n    ) as Promise<BlobCopyFromURLResponse>;\n  }\n\n  /**\n   * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination\n   * blob with zero length and full metadata.\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob\n   *               operation.\n   * @param options The options parameters.\n   */\n  abortCopyFromURL(\n    copyId: string,\n    options?: BlobAbortCopyFromURLOptionalParams\n  ): Promise<BlobAbortCopyFromURLResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      copyId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      abortCopyFromURLOperationSpec\n    ) as Promise<BlobAbortCopyFromURLResponse>;\n  }\n\n  /**\n   * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant storage only). A\n   * premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block\n   * blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's\n   * ETag.\n   * @param tier Indicates the tier to be set on the blob.\n   * @param options The options parameters.\n   */\n  setTier(\n    tier: AccessTier,\n    options?: BlobSetTierOptionalParams\n  ): Promise<BlobSetTierResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      tier,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setTierOperationSpec\n    ) as Promise<BlobSetTierResponse>;\n  }\n\n  /**\n   * Returns the sku name and account kind\n   * @param options The options parameters.\n   */\n  getAccountInfo(\n    options?: coreHttp.OperationOptions\n  ): Promise<BlobGetAccountInfoResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getAccountInfoOperationSpec\n    ) as Promise<BlobGetAccountInfoResponse>;\n  }\n\n  /**\n   * The Query operation enables users to select/project on blob data by providing simple query\n   * expressions.\n   * @param options The options parameters.\n   */\n  query(options?: BlobQueryOptionalParams): Promise<BlobQueryResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      queryOperationSpec\n    ) as Promise<BlobQueryResponse>;\n  }\n\n  /**\n   * The Get Tags operation enables users to get the tags associated with a blob.\n   * @param options The options parameters.\n   */\n  getTags(options?: BlobGetTagsOptionalParams): Promise<BlobGetTagsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getTagsOperationSpec\n    ) as Promise<BlobGetTagsResponse>;\n  }\n\n  /**\n   * The Set Tags operation enables users to set tags on a blob.\n   * @param options The options parameters.\n   */\n  setTags(options?: BlobSetTagsOptionalParams): Promise<BlobSetTagsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setTagsOperationSpec\n    ) as Promise<BlobSetTagsResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\n\nconst downloadOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobDownloadHeaders\n    },\n    206: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobDownloadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDownloadExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.rangeGetContentMD5,\n    Parameters.rangeGetContentCRC64,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDeleteExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId,\n    Parameters.blobDeleteType\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.deleteSnapshots\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst undeleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobUndeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobUndeleteExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp8],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setExpiryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetExpiryHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetExpiryExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp11],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.expiryOptions,\n    Parameters.expiresOn\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setHttpHeadersOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetHttpHeadersHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetHttpHeadersExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setImmutabilityPolicyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetImmutabilityPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetImmutabilityPolicyExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp12],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifUnmodifiedSince,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst deleteImmutabilityPolicyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobDeleteImmutabilityPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDeleteImmutabilityPolicyExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp12],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setLegalHoldOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetLegalHoldHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetLegalHoldExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp13],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.legalHold\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setMetadataOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetMetadataExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp6],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst acquireLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobAcquireLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobAcquireLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action,\n    Parameters.duration,\n    Parameters.proposedLeaseId,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst releaseLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobReleaseLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobReleaseLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action1,\n    Parameters.leaseId1,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst renewLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobRenewLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobRenewLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.leaseId1,\n    Parameters.action2,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst changeLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobChangeLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobChangeLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.leaseId1,\n    Parameters.action4,\n    Parameters.proposedLeaseId1,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst breakLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobBreakLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobBreakLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action3,\n    Parameters.breakPeriod,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst createSnapshotOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobCreateSnapshotHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobCreateSnapshotExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp14],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst startCopyFromURLOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobStartCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobStartCopyFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.tier,\n    Parameters.rehydratePriority,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceIfTags,\n    Parameters.copySource,\n    Parameters.blobTagsString,\n    Parameters.sealBlob,\n    Parameters.legalHold1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst copyFromURLOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobCopyFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.copySource,\n    Parameters.blobTagsString,\n    Parameters.legalHold1,\n    Parameters.xMsRequiresSync,\n    Parameters.sourceContentMD5,\n    Parameters.copySourceAuthorization,\n    Parameters.copySourceTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst abortCopyFromURLOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {\n      headersMapper: Mappers.BlobAbortCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobAbortCopyFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp15,\n    Parameters.copyId\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.copyActionAbortConstant\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setTierOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetTierHeaders\n    },\n    202: {\n      headersMapper: Mappers.BlobSetTierHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetTierExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId,\n    Parameters.comp16\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifTags,\n    Parameters.rehydratePriority,\n    Parameters.tier1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getAccountInfoOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetAccountInfoExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.restype1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst queryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobQueryHeaders\n    },\n    206: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobQueryHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobQueryExceptionHeaders\n    }\n  },\n  requestBody: Parameters.queryRequest,\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.comp17\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getTagsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobTags,\n      headersMapper: Mappers.BlobGetTagsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetTagsExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId,\n    Parameters.comp18\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setTagsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {\n      headersMapper: Mappers.BlobSetTagsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetTagsExceptionHeaders\n    }\n  },\n  requestBody: Parameters.tags,\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.versionId,\n    Parameters.comp18\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId,\n    Parameters.ifTags,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}