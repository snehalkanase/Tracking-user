{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createAbortablePromise } from \"./createAbortablePromise\";\nconst StandardAbortMessage = \"The delay was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\nexport function delay(timeInMs, options) {\n  let token;\n  const {\n    abortSignal,\n    abortErrorMsg\n  } = options !== null && options !== void 0 ? options : {};\n  return createAbortablePromise(resolve => {\n    token = setTimeout(resolve, timeInMs);\n  }, {\n    cleanupBeforeAbort: () => clearTimeout(token),\n    abortSignal,\n    abortErrorMsg: abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : StandardAbortMessage\n  });\n}","map":{"version":3,"names":["createAbortablePromise","StandardAbortMessage","delay","timeInMs","options","token","abortSignal","abortErrorMsg","resolve","setTimeout","cleanupBeforeAbort","clearTimeout"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-util\\src\\delay.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { createAbortablePromise } from \"./createAbortablePromise\";\n\nconst StandardAbortMessage = \"The delay was aborted.\";\n\n/**\n * Options for support abort functionality for the delay method\n */\nexport interface DelayOptions {\n  /**\n   * The abortSignal associated with containing operation.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * The abort error message associated with containing operation.\n   */\n  abortErrorMsg?: string;\n}\n\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\nexport function delay(timeInMs: number, options?: DelayOptions): Promise<void> {\n  let token: ReturnType<typeof setTimeout>;\n  const { abortSignal, abortErrorMsg } = options ?? {};\n  return createAbortablePromise(\n    (resolve) => {\n      token = setTimeout(resolve, timeInMs);\n    },\n    {\n      cleanupBeforeAbort: () => clearTimeout(token),\n      abortSignal,\n      abortErrorMsg: abortErrorMsg ?? StandardAbortMessage,\n    }\n  );\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,sBAAsB,QAAQ,0BAA0B;AAEjE,MAAMC,oBAAoB,GAAG,wBAAwB;AAgBrD;;;;;;AAMA,OAAM,SAAUC,KAAKA,CAACC,QAAgB,EAAEC,OAAsB;EAC5D,IAAIC,KAAoC;EACxC,MAAM;IAAEC,WAAW;IAAEC;EAAa,CAAE,GAAGH,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,EAAE;EACpD,OAAOJ,sBAAsB,CAC1BQ,OAAO,IAAI;IACVH,KAAK,GAAGI,UAAU,CAACD,OAAO,EAAEL,QAAQ,CAAC;EACvC,CAAC,EACD;IACEO,kBAAkB,EAAEA,CAAA,KAAMC,YAAY,CAACN,KAAK,CAAC;IAC7CC,WAAW;IACXC,aAAa,EAAEA,aAAa,aAAbA,aAAa,cAAbA,aAAa,GAAIN;GACjC,CACF;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}