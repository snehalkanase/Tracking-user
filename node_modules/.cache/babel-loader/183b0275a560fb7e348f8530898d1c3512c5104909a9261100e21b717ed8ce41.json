{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName) {\n  return headerName.toLowerCase();\n}\nexport function isHttpHeadersLike(object) {\n  if (object && typeof object === \"object\") {\n    const castObject = object;\n    if (typeof castObject.rawHeaders === \"function\" && typeof castObject.clone === \"function\" && typeof castObject.get === \"function\" && typeof castObject.set === \"function\" && typeof castObject.contains === \"function\" && typeof castObject.remove === \"function\" && typeof castObject.headersArray === \"function\" && typeof castObject.headerValues === \"function\" && typeof castObject.headerNames === \"function\" && typeof castObject.toJson === \"function\") {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport class HttpHeaders {\n  constructor(rawHeaders) {\n    this._headersMap = {};\n    if (rawHeaders) {\n      for (const headerName in rawHeaders) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName - The name of the header to set. This value is case-insensitive.\n   * @param headerValue - The value of the header to set.\n   */\n  set(headerName, headerValue) {\n    this._headersMap[getHeaderKey(headerName)] = {\n      name: headerName,\n      value: headerValue.toString()\n    };\n  }\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName - The name of the header.\n   */\n  get(headerName) {\n    const header = this._headersMap[getHeaderKey(headerName)];\n    return !header ? undefined : header.value;\n  }\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n  contains(headerName) {\n    return !!this._headersMap[getHeaderKey(headerName)];\n  }\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName - The name of the header to remove.\n   */\n  remove(headerName) {\n    const result = this.contains(headerName);\n    delete this._headersMap[getHeaderKey(headerName)];\n    return result;\n  }\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n  rawHeaders() {\n    return this.toJson({\n      preserveCase: true\n    });\n  }\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n  headersArray() {\n    const headers = [];\n    for (const headerKey in this._headersMap) {\n      headers.push(this._headersMap[headerKey]);\n    }\n    return headers;\n  }\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  headerNames() {\n    const headerNames = [];\n    const headers = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerNames.push(headers[i].name);\n    }\n    return headerNames;\n  }\n  /**\n   * Get the header values that are contained in this collection.\n   */\n  headerValues() {\n    const headerValues = [];\n    const headers = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerValues.push(headers[i].value);\n    }\n    return headerValues;\n  }\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  toJson() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const result = {};\n    if (options.preserveCase) {\n      for (const headerKey in this._headersMap) {\n        const header = this._headersMap[headerKey];\n        result[header.name] = header.value;\n      }\n    } else {\n      for (const headerKey in this._headersMap) {\n        const header = this._headersMap[headerKey];\n        result[getHeaderKey(header.name)] = header.value;\n      }\n    }\n    return result;\n  }\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  toString() {\n    return JSON.stringify(this.toJson({\n      preserveCase: true\n    }));\n  }\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n  clone() {\n    const resultPreservingCasing = {};\n    for (const headerKey in this._headersMap) {\n      const header = this._headersMap[headerKey];\n      resultPreservingCasing[header.name] = header.value;\n    }\n    return new HttpHeaders(resultPreservingCasing);\n  }\n}","map":{"version":3,"names":["getHeaderKey","headerName","toLowerCase","isHttpHeadersLike","object","castObject","rawHeaders","clone","get","set","contains","remove","headersArray","headerValues","headerNames","toJson","HttpHeaders","constructor","_headersMap","headerValue","name","value","toString","header","undefined","result","preserveCase","headers","headerKey","push","i","length","options","arguments","JSON","stringify","resultPreservingCasing"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\httpHeaders.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName: string): string {\n  return headerName.toLowerCase();\n}\n\n/**\n * An individual header within a HttpHeaders collection.\n */\nexport interface HttpHeader {\n  /**\n   * The name of the header.\n   */\n  name: string;\n\n  /**\n   * The value of the header.\n   */\n  value: string;\n}\n\n/**\n * A HttpHeaders collection represented as a simple JSON object.\n */\nexport type RawHttpHeaders = { [headerName: string]: string };\n\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport interface HttpHeadersLike {\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName - The name of the header to set. This value is case-insensitive.\n   * @param headerValue - The value of the header to set.\n   */\n  set(headerName: string, headerValue: string | number): void;\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName - The name of the header.\n   */\n  get(headerName: string): string | undefined;\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n  contains(headerName: string): boolean;\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName - The name of the header to remove.\n   */\n  remove(headerName: string): boolean;\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n  rawHeaders(): RawHttpHeaders;\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n  headersArray(): HttpHeader[];\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  headerNames(): string[];\n  /**\n   * Get the header values that are contained in this collection.\n   */\n  headerValues(): string[];\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n  clone(): HttpHeadersLike;\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   * The result is the same as `rawHeaders()`.\n   */\n  toJson(options?: { preserveCase?: boolean }): RawHttpHeaders;\n}\n\nexport function isHttpHeadersLike(object?: unknown): object is HttpHeadersLike {\n  if (object && typeof object === \"object\") {\n    const castObject = object as {\n      rawHeaders: unknown;\n      clone: unknown;\n      get: unknown;\n      set: unknown;\n      contains: unknown;\n      remove: unknown;\n      headersArray: unknown;\n      headerValues: unknown;\n      headerNames: unknown;\n      toJson: unknown;\n    };\n    if (\n      typeof castObject.rawHeaders === \"function\" &&\n      typeof castObject.clone === \"function\" &&\n      typeof castObject.get === \"function\" &&\n      typeof castObject.set === \"function\" &&\n      typeof castObject.contains === \"function\" &&\n      typeof castObject.remove === \"function\" &&\n      typeof castObject.headersArray === \"function\" &&\n      typeof castObject.headerValues === \"function\" &&\n      typeof castObject.headerNames === \"function\" &&\n      typeof castObject.toJson === \"function\"\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport class HttpHeaders implements HttpHeadersLike {\n  private readonly _headersMap: { [headerKey: string]: HttpHeader };\n\n  constructor(rawHeaders?: RawHttpHeaders) {\n    this._headersMap = {};\n    if (rawHeaders) {\n      for (const headerName in rawHeaders) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName - The name of the header to set. This value is case-insensitive.\n   * @param headerValue - The value of the header to set.\n   */\n  public set(headerName: string, headerValue: string | number): void {\n    this._headersMap[getHeaderKey(headerName)] = {\n      name: headerName,\n      value: headerValue.toString(),\n    };\n  }\n\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName - The name of the header.\n   */\n  public get(headerName: string): string | undefined {\n    const header: HttpHeader = this._headersMap[getHeaderKey(headerName)];\n    return !header ? undefined : header.value;\n  }\n\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n  public contains(headerName: string): boolean {\n    return !!this._headersMap[getHeaderKey(headerName)];\n  }\n\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName - The name of the header to remove.\n   */\n  public remove(headerName: string): boolean {\n    const result: boolean = this.contains(headerName);\n    delete this._headersMap[getHeaderKey(headerName)];\n    return result;\n  }\n\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n  public rawHeaders(): RawHttpHeaders {\n    return this.toJson({ preserveCase: true });\n  }\n\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n  public headersArray(): HttpHeader[] {\n    const headers: HttpHeader[] = [];\n    for (const headerKey in this._headersMap) {\n      headers.push(this._headersMap[headerKey]);\n    }\n    return headers;\n  }\n\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  public headerNames(): string[] {\n    const headerNames: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerNames.push(headers[i].name);\n    }\n    return headerNames;\n  }\n\n  /**\n   * Get the header values that are contained in this collection.\n   */\n  public headerValues(): string[] {\n    const headerValues: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerValues.push(headers[i].value);\n    }\n    return headerValues;\n  }\n\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  public toJson(options: { preserveCase?: boolean } = {}): RawHttpHeaders {\n    const result: RawHttpHeaders = {};\n    if (options.preserveCase) {\n      for (const headerKey in this._headersMap) {\n        const header: HttpHeader = this._headersMap[headerKey];\n        result[header.name] = header.value;\n      }\n    } else {\n      for (const headerKey in this._headersMap) {\n        const header: HttpHeader = this._headersMap[headerKey];\n        result[getHeaderKey(header.name)] = header.value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  public toString(): string {\n    return JSON.stringify(this.toJson({ preserveCase: true }));\n  }\n\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n  public clone(): HttpHeaders {\n    const resultPreservingCasing: RawHttpHeaders = {};\n    for (const headerKey in this._headersMap) {\n      const header: HttpHeader = this._headersMap[headerKey];\n      resultPreservingCasing[header.name] = header.value;\n    }\n    return new HttpHeaders(resultPreservingCasing);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}