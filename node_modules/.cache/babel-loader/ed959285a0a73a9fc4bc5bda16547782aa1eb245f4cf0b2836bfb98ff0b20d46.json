{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy, HttpHeaders, isNode } from \"@azure/core-http\";\nimport { HeaderConstants } from \"../utils/constants\";\n/**\n * TelemetryPolicy is a policy used to tag user-agent header for every requests.\n */\nexport class TelemetryPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of TelemetryPolicy.\n   * @param nextPolicy -\n   * @param options -\n   * @param telemetry -\n   */\n  constructor(nextPolicy, options, telemetry) {\n    super(nextPolicy, options);\n    this.telemetry = telemetry;\n  }\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   */\n  async sendRequest(request) {\n    if (isNode) {\n      if (!request.headers) {\n        request.headers = new HttpHeaders();\n      }\n      if (!request.headers.get(HeaderConstants.USER_AGENT)) {\n        request.headers.set(HeaderConstants.USER_AGENT, this.telemetry);\n      }\n    }\n    return this._nextPolicy.sendRequest(request);\n  }\n}","map":{"version":3,"names":["BaseRequestPolicy","HttpHeaders","isNode","HeaderConstants","TelemetryPolicy","constructor","nextPolicy","options","telemetry","sendRequest","request","headers","get","USER_AGENT","set","_nextPolicy"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\policies\\TelemetryPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  HttpHeaders,\n  HttpOperationResponse,\n  isNode,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource,\n} from \"@azure/core-http\";\n\nimport { HeaderConstants } from \"../utils/constants\";\n\n/**\n * TelemetryPolicy is a policy used to tag user-agent header for every requests.\n */\nexport class TelemetryPolicy extends BaseRequestPolicy {\n  /**\n   * Telemetry string.\n   */\n  public readonly telemetry: string;\n\n  /**\n   * Creates an instance of TelemetryPolicy.\n   * @param nextPolicy -\n   * @param options -\n   * @param telemetry -\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, telemetry: string) {\n    super(nextPolicy, options);\n    this.telemetry = telemetry;\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (isNode) {\n      if (!request.headers) {\n        request.headers = new HttpHeaders();\n      }\n      if (!request.headers.get(HeaderConstants.USER_AGENT)) {\n        request.headers.set(HeaderConstants.USER_AGENT, this.telemetry);\n      }\n    }\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA,SACEA,iBAAiB,EACjBC,WAAW,EAEXC,MAAM,QAID,kBAAkB;AAEzB,SAASC,eAAe,QAAQ,oBAAoB;AAEpD;;;AAGA,OAAM,MAAOC,eAAgB,SAAQJ,iBAAiB;EAMpD;;;;;;EAMAK,YAAYC,UAAyB,EAAEC,OAA6B,EAAEC,SAAiB;IACrF,KAAK,CAACF,UAAU,EAAEC,OAAO,CAAC;IAC1B,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC5B;EAEA;;;;;EAKO,MAAMC,WAAWA,CAACC,OAAoB;IAC3C,IAAIR,MAAM,EAAE;MACV,IAAI,CAACQ,OAAO,CAACC,OAAO,EAAE;QACpBD,OAAO,CAACC,OAAO,GAAG,IAAIV,WAAW,EAAE;;MAErC,IAAI,CAACS,OAAO,CAACC,OAAO,CAACC,GAAG,CAACT,eAAe,CAACU,UAAU,CAAC,EAAE;QACpDH,OAAO,CAACC,OAAO,CAACG,GAAG,CAACX,eAAe,CAACU,UAAU,EAAE,IAAI,CAACL,SAAS,CAAC;;;IAInE,OAAO,IAAI,CAACO,WAAW,CAACN,WAAW,CAACC,OAAO,CAAC;EAC9C"},"metadata":{},"sourceType":"module","externalDependencies":[]}