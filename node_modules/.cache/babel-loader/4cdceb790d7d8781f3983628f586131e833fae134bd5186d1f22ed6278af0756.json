{"ast":null,"code":"import _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { HttpPipelineLogLevel } from \"../httpPipelineLogLevel\";\n/**\n * The base class from which all request policies derive.\n */\nexport var BaseRequestPolicy = /*#__PURE__*/function () {\n  /**\n   * The main method to implement that manipulates a request/response.\n   */\n  function BaseRequestPolicy(\n  /**\n   * The next policy in the pipeline. Each policy is responsible for executing the next one if the request is to continue through the pipeline.\n   */\n  _nextPolicy,\n  /**\n   * The options that can be passed to a given request policy.\n   */\n  _options) {\n    _classCallCheck(this, BaseRequestPolicy);\n    this._nextPolicy = _nextPolicy;\n    this._options = _options;\n  }\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel - The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  _createClass(BaseRequestPolicy, [{\n    key: \"shouldLog\",\n    value: function shouldLog(logLevel) {\n      return this._options.shouldLog(logLevel);\n    }\n    /**\n     * Attempt to log the provided message to the provided logger. If no logger was provided or if\n     * the log level does not meat the logger's threshold, then nothing will be logged.\n     * @param logLevel - The log level of this log.\n     * @param message - The message of this log.\n     */\n  }, {\n    key: \"log\",\n    value: function log(logLevel, message) {\n      this._options.log(logLevel, message);\n    }\n  }]);\n  return BaseRequestPolicy;\n}();\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\nexport var RequestPolicyOptions = /*#__PURE__*/function () {\n  function RequestPolicyOptions(_logger) {\n    _classCallCheck(this, RequestPolicyOptions);\n    this._logger = _logger;\n  }\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel - The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  _createClass(RequestPolicyOptions, [{\n    key: \"shouldLog\",\n    value: function shouldLog(logLevel) {\n      return !!this._logger && logLevel !== HttpPipelineLogLevel.OFF && logLevel <= this._logger.minimumLogLevel;\n    }\n    /**\n     * Attempt to log the provided message to the provided logger. If no logger was provided or if\n     * the log level does not meet the logger's threshold, then nothing will be logged.\n     * @param logLevel - The log level of this log.\n     * @param message - The message of this log.\n     */\n  }, {\n    key: \"log\",\n    value: function log(logLevel, message) {\n      if (this._logger && this.shouldLog(logLevel)) {\n        this._logger.log(logLevel, message);\n      }\n    }\n  }]);\n  return RequestPolicyOptions;\n}();","map":{"version":3,"names":["HttpPipelineLogLevel","BaseRequestPolicy","_nextPolicy","_options","_classCallCheck","_createClass","key","value","shouldLog","logLevel","log","message","RequestPolicyOptions","_logger","OFF","minimumLogLevel"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\policies\\requestPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { HttpPipelineLogLevel } from \"../httpPipelineLogLevel\";\nimport { HttpPipelineLogger } from \"../httpPipelineLogger\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Creates a new RequestPolicy per-request that uses the provided nextPolicy.\n */\nexport type RequestPolicyFactory = {\n  create(nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike): RequestPolicy;\n};\n\n/**\n * The underlying structure of a request policy.\n */\nexport interface RequestPolicy {\n  /**\n   * A method that retrieves an {@link HttpOperationResponse} given a {@link WebResourceLike} describing the request to be made.\n   * @param httpRequest - {@link WebResourceLike} describing the request to be made.\n   */\n  sendRequest(httpRequest: WebResourceLike): Promise<HttpOperationResponse>;\n}\n\n/**\n * The base class from which all request policies derive.\n */\nexport abstract class BaseRequestPolicy implements RequestPolicy {\n  /**\n   * The main method to implement that manipulates a request/response.\n   */\n  protected constructor(\n    /**\n     * The next policy in the pipeline. Each policy is responsible for executing the next one if the request is to continue through the pipeline.\n     */\n    readonly _nextPolicy: RequestPolicy,\n    /**\n     * The options that can be passed to a given request policy.\n     */\n    readonly _options: RequestPolicyOptionsLike\n  ) {}\n\n  /**\n   * Sends a network request based on the given web resource.\n   * @param webResource - A {@link WebResourceLike} that describes a HTTP request to be made.\n   */\n  public abstract sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse>;\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel - The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return this._options.shouldLog(logLevel);\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel - The log level of this log.\n   * @param message - The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    this._options.log(logLevel, message);\n  }\n}\n\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\nexport interface RequestPolicyOptionsLike {\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel - The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  shouldLog(logLevel: HttpPipelineLogLevel): boolean;\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meet the logger's threshold, then nothing will be logged.\n   * @param logLevel - The log level of this log.\n   * @param message - The message of this log.\n   */\n  log(logLevel: HttpPipelineLogLevel, message: string): void;\n}\n\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\nexport class RequestPolicyOptions {\n  constructor(private _logger?: HttpPipelineLogger) {}\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel - The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return (\n      !!this._logger &&\n      logLevel !== HttpPipelineLogLevel.OFF &&\n      logLevel <= this._logger.minimumLogLevel\n    );\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meet the logger's threshold, then nothing will be logged.\n   * @param logLevel - The log level of this log.\n   * @param message - The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    if (this._logger && this.shouldLog(logLevel)) {\n      this._logger.log(logLevel, message);\n    }\n  }\n}\n"],"mappings":";;AAAA;AACA;AAGA,SAASA,oBAAoB,QAAQ,yBAAyB;AAsB9D;;;AAGA,WAAsBC,iBAAiB;EACrC;;;EAGA,SAAAA;EACE;;;EAGSC,WAA0B;EACnC;;;EAGSC,QAAkC;IAAAC,eAAA,OAAAH,iBAAA;IAJlC,KAAAC,WAAW,GAAXA,WAAW;IAIX,KAAAC,QAAQ,GAARA,QAAQ;EAChB;EAQH;;;;;EAAAE,YAAA,CAAAJ,iBAAA;IAAAK,GAAA;IAAAC,KAAA,EAKO,SAAAC,UAAUC,QAA8B;MAC7C,OAAO,IAAI,CAACN,QAAQ,CAACK,SAAS,CAACC,QAAQ,CAAC;IAC1C;IAEA;;;;;;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAMO,SAAAG,IAAID,QAA8B,EAAEE,OAAe;MACxD,IAAI,CAACR,QAAQ,CAACO,GAAG,CAACD,QAAQ,EAAEE,OAAO,CAAC;IACtC;EAAC;EAAA,OAAAV,iBAAA;AAAA;AAuBH;;;AAGA,WAAaW,oBAAoB;EAC/B,SAAAA,qBAAoBC,OAA4B;IAAAT,eAAA,OAAAQ,oBAAA;IAA5B,KAAAC,OAAO,GAAPA,OAAO;EAAwB;EAEnD;;;;;EAAAR,YAAA,CAAAO,oBAAA;IAAAN,GAAA;IAAAC,KAAA,EAKO,SAAAC,UAAUC,QAA8B;MAC7C,OACE,CAAC,CAAC,IAAI,CAACI,OAAO,IACdJ,QAAQ,KAAKT,oBAAoB,CAACc,GAAG,IACrCL,QAAQ,IAAI,IAAI,CAACI,OAAO,CAACE,eAAe;IAE5C;IAEA;;;;;;EAAA;IAAAT,GAAA;IAAAC,KAAA,EAMO,SAAAG,IAAID,QAA8B,EAAEE,OAAe;MACxD,IAAI,IAAI,CAACE,OAAO,IAAI,IAAI,CAACL,SAAS,CAACC,QAAQ,CAAC,EAAE;QAC5C,IAAI,CAACI,OAAO,CAACH,GAAG,CAACD,QAAQ,EAAEE,OAAO,CAAC;;IAEvC;EAAC;EAAA,OAAAC,oBAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}