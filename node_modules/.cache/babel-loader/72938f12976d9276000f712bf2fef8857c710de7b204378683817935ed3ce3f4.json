{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/// <reference path=\"../shims-public.d.ts\" />\nconst listenersMap = new WeakMap();\nconst abortedMap = new WeakMap();\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.\n * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation\n * cannot or will not ever be cancelled.\n *\n * @example\n * Abort without timeout\n * ```ts\n * await doAsyncWork(AbortSignal.none);\n * ```\n */\nexport class AbortSignal {\n  constructor() {\n    /**\n     * onabort event listener.\n     */\n    this.onabort = null;\n    listenersMap.set(this, []);\n    abortedMap.set(this, false);\n  }\n  /**\n   * Status of whether aborted or not.\n   *\n   * @readonly\n   */\n  get aborted() {\n    if (!abortedMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n    return abortedMap.get(this);\n  }\n  /**\n   * Creates a new AbortSignal instance that will never be aborted.\n   *\n   * @readonly\n   */\n  static get none() {\n    return new AbortSignal();\n  }\n  /**\n   * Added new \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be added\n   */\n  addEventListener(\n  // tslint:disable-next-line:variable-name\n  _type, listener) {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n    const listeners = listenersMap.get(this);\n    listeners.push(listener);\n  }\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be removed\n   */\n  removeEventListener(\n  // tslint:disable-next-line:variable-name\n  _type, listener) {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n    const listeners = listenersMap.get(this);\n    const index = listeners.indexOf(listener);\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n  }\n  /**\n   * Dispatches a synthetic event to the AbortSignal.\n   */\n  dispatchEvent(_event) {\n    throw new Error(\"This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.\");\n  }\n}\n/**\n * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.\n * Will try to trigger abort event for all linked AbortSignal nodes.\n *\n * - If there is a timeout, the timer will be cancelled.\n * - If aborted is true, nothing will happen.\n *\n * @internal\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\nexport function abortSignal(signal) {\n  if (signal.aborted) {\n    return;\n  }\n  if (signal.onabort) {\n    signal.onabort.call(signal);\n  }\n  const listeners = listenersMap.get(signal);\n  if (listeners) {\n    // Create a copy of listeners so mutations to the array\n    // (e.g. via removeListener calls) don't affect the listeners\n    // we invoke.\n    listeners.slice().forEach(listener => {\n      listener.call(signal, {\n        type: \"abort\"\n      });\n    });\n  }\n  abortedMap.set(signal, true);\n}","map":{"version":3,"names":["listenersMap","WeakMap","abortedMap","AbortSignal","constructor","onabort","set","aborted","has","TypeError","get","none","addEventListener","_type","listener","listeners","push","removeEventListener","index","indexOf","splice","dispatchEvent","_event","Error","abortSignal","signal","call","slice","forEach","type"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\abort-controller\\src\\AbortSignal.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../shims-public.d.ts\" />\n\ntype AbortEventListener = (this: AbortSignalLike, ev?: any) => any;\n\nconst listenersMap = new WeakMap<AbortSignal, AbortEventListener[]>();\nconst abortedMap = new WeakMap<AbortSignal, boolean>();\n\n/**\n * Allows the request to be aborted upon firing of the \"abort\" event.\n * Compatible with the browser built-in AbortSignal and common polyfills.\n */\nexport interface AbortSignalLike {\n  /**\n   * Indicates if the signal has already been aborted.\n   */\n  readonly aborted: boolean;\n  /**\n   * Add new \"abort\" event listener, only support \"abort\" event.\n   */\n  addEventListener(\n    type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any,\n    options?: any\n  ): void;\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   */\n  removeEventListener(\n    type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any,\n    options?: any\n  ): void;\n}\n\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.\n * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation\n * cannot or will not ever be cancelled.\n *\n * @example\n * Abort without timeout\n * ```ts\n * await doAsyncWork(AbortSignal.none);\n * ```\n */\nexport class AbortSignal implements AbortSignalLike {\n  constructor() {\n    listenersMap.set(this, []);\n    abortedMap.set(this, false);\n  }\n\n  /**\n   * Status of whether aborted or not.\n   *\n   * @readonly\n   */\n  public get aborted(): boolean {\n    if (!abortedMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    return abortedMap.get(this)!;\n  }\n\n  /**\n   * Creates a new AbortSignal instance that will never be aborted.\n   *\n   * @readonly\n   */\n  public static get none(): AbortSignal {\n    return new AbortSignal();\n  }\n\n  /**\n   * onabort event listener.\n   */\n  public onabort: ((ev?: Event) => any) | null = null;\n\n  /**\n   * Added new \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be added\n   */\n  public addEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this)!;\n    listeners.push(listener);\n  }\n\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be removed\n   */\n  public removeEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this)!;\n\n    const index = listeners.indexOf(listener);\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Dispatches a synthetic event to the AbortSignal.\n   */\n  dispatchEvent(_event: Event): boolean {\n    throw new Error(\n      \"This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.\"\n    );\n  }\n}\n\n/**\n * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.\n * Will try to trigger abort event for all linked AbortSignal nodes.\n *\n * - If there is a timeout, the timer will be cancelled.\n * - If aborted is true, nothing will happen.\n *\n * @internal\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\nexport function abortSignal(signal: AbortSignal): void {\n  if (signal.aborted) {\n    return;\n  }\n\n  if (signal.onabort) {\n    signal.onabort.call(signal);\n  }\n\n  const listeners = listenersMap.get(signal)!;\n  if (listeners) {\n    // Create a copy of listeners so mutations to the array\n    // (e.g. via removeListener calls) don't affect the listeners\n    // we invoke.\n    listeners.slice().forEach((listener) => {\n      listener.call(signal, { type: \"abort\" });\n    });\n  }\n\n  abortedMap.set(signal, true);\n}\n"],"mappings":"AAAA;AACA;AAGA;AAIA,MAAMA,YAAY,GAAG,IAAIC,OAAO,EAAqC;AACrE,MAAMC,UAAU,GAAG,IAAID,OAAO,EAAwB;AA6BtD;;;;;;;;;;;;;AAaA,OAAM,MAAOE,WAAW;EACtBC,YAAA;IA2BA;;;IAGO,KAAAC,OAAO,GAAiC,IAAI;IA7BjDL,YAAY,CAACM,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC;IAC1BJ,UAAU,CAACI,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC;EAC7B;EAEA;;;;;EAKA,IAAWC,OAAOA,CAAA;IAChB,IAAI,CAACL,UAAU,CAACM,GAAG,CAAC,IAAI,CAAC,EAAE;MACzB,MAAM,IAAIC,SAAS,CAAC,mDAAmD,CAAC;;IAG1E,OAAOP,UAAU,CAACQ,GAAG,CAAC,IAAI,CAAE;EAC9B;EAEA;;;;;EAKO,WAAWC,IAAIA,CAAA;IACpB,OAAO,IAAIR,WAAW,EAAE;EAC1B;EAOA;;;;;;EAMOS,gBAAgBA;EACrB;EACAC,KAAc,EACdC,QAAiD;IAEjD,IAAI,CAACd,YAAY,CAACQ,GAAG,CAAC,IAAI,CAAC,EAAE;MAC3B,MAAM,IAAIC,SAAS,CAAC,mDAAmD,CAAC;;IAG1E,MAAMM,SAAS,GAAGf,YAAY,CAACU,GAAG,CAAC,IAAI,CAAE;IACzCK,SAAS,CAACC,IAAI,CAACF,QAAQ,CAAC;EAC1B;EAEA;;;;;;EAMOG,mBAAmBA;EACxB;EACAJ,KAAc,EACdC,QAAiD;IAEjD,IAAI,CAACd,YAAY,CAACQ,GAAG,CAAC,IAAI,CAAC,EAAE;MAC3B,MAAM,IAAIC,SAAS,CAAC,mDAAmD,CAAC;;IAG1E,MAAMM,SAAS,GAAGf,YAAY,CAACU,GAAG,CAAC,IAAI,CAAE;IAEzC,MAAMQ,KAAK,GAAGH,SAAS,CAACI,OAAO,CAACL,QAAQ,CAAC;IACzC,IAAII,KAAK,GAAG,CAAC,CAAC,EAAE;MACdH,SAAS,CAACK,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;;EAE9B;EAEA;;;EAGAG,aAAaA,CAACC,MAAa;IACzB,MAAM,IAAIC,KAAK,CACb,kHAAkH,CACnH;EACH;;AAGF;;;;;;;;;AASA;AACA,OAAM,SAAUC,WAAWA,CAACC,MAAmB;EAC7C,IAAIA,MAAM,CAAClB,OAAO,EAAE;IAClB;;EAGF,IAAIkB,MAAM,CAACpB,OAAO,EAAE;IAClBoB,MAAM,CAACpB,OAAO,CAACqB,IAAI,CAACD,MAAM,CAAC;;EAG7B,MAAMV,SAAS,GAAGf,YAAY,CAACU,GAAG,CAACe,MAAM,CAAE;EAC3C,IAAIV,SAAS,EAAE;IACb;IACA;IACA;IACAA,SAAS,CAACY,KAAK,EAAE,CAACC,OAAO,CAAEd,QAAQ,IAAI;MACrCA,QAAQ,CAACY,IAAI,CAACD,MAAM,EAAE;QAAEI,IAAI,EAAE;MAAO,CAAE,CAAC;IAC1C,CAAC,CAAC;;EAGJ3B,UAAU,CAACI,GAAG,CAACmB,MAAM,EAAE,IAAI,CAAC;AAC9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}