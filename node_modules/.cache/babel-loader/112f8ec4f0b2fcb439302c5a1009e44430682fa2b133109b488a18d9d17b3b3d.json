{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst VERSION = \"00\";\n/**\n * Generates a `SpanContext` given a `traceparent` header value.\n * @param traceParent - Serialized span context data as a `traceparent` header value.\n * @returns The `SpanContext` generated from the `traceparent` value.\n */\nexport function extractSpanContextFromTraceParentHeader(traceParentHeader) {\n  const parts = traceParentHeader.split(\"-\");\n  if (parts.length !== 4) {\n    return;\n  }\n  const [version, traceId, spanId, traceOptions] = parts;\n  if (version !== VERSION) {\n    return;\n  }\n  const traceFlags = parseInt(traceOptions, 16);\n  const spanContext = {\n    spanId,\n    traceId,\n    traceFlags\n  };\n  return spanContext;\n}\n/**\n * Generates a `traceparent` value given a span context.\n * @param spanContext - Contains context for a specific span.\n * @returns The `spanContext` represented as a `traceparent` value.\n */\nexport function getTraceParentHeader(spanContext) {\n  const missingFields = [];\n  if (!spanContext.traceId) {\n    missingFields.push(\"traceId\");\n  }\n  if (!spanContext.spanId) {\n    missingFields.push(\"spanId\");\n  }\n  if (missingFields.length) {\n    return;\n  }\n  const flags = spanContext.traceFlags || 0 /* NONE */;\n  const hexFlags = flags.toString(16);\n  const traceFlags = hexFlags.length === 1 ? `0${hexFlags}` : hexFlags;\n  // https://www.w3.org/TR/trace-context/#traceparent-header-field-values\n  return `${VERSION}-${spanContext.traceId}-${spanContext.spanId}-${traceFlags}`;\n}","map":{"version":3,"names":["VERSION","extractSpanContextFromTraceParentHeader","traceParentHeader","parts","split","length","version","traceId","spanId","traceOptions","traceFlags","parseInt","spanContext","getTraceParentHeader","missingFields","push","flags","hexFlags","toString"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-tracing\\src\\utils\\traceParentHeader.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SpanContext, TraceFlags } from \"../interfaces\";\n\nconst VERSION = \"00\";\n\n/**\n * Generates a `SpanContext` given a `traceparent` header value.\n * @param traceParent - Serialized span context data as a `traceparent` header value.\n * @returns The `SpanContext` generated from the `traceparent` value.\n */\nexport function extractSpanContextFromTraceParentHeader(\n  traceParentHeader: string\n): SpanContext | undefined {\n  const parts = traceParentHeader.split(\"-\");\n\n  if (parts.length !== 4) {\n    return;\n  }\n\n  const [version, traceId, spanId, traceOptions] = parts;\n\n  if (version !== VERSION) {\n    return;\n  }\n\n  const traceFlags = parseInt(traceOptions, 16);\n\n  const spanContext: SpanContext = {\n    spanId,\n    traceId,\n    traceFlags\n  };\n\n  return spanContext;\n}\n\n/**\n * Generates a `traceparent` value given a span context.\n * @param spanContext - Contains context for a specific span.\n * @returns The `spanContext` represented as a `traceparent` value.\n */\nexport function getTraceParentHeader(spanContext: SpanContext): string | undefined {\n  const missingFields: string[] = [];\n  if (!spanContext.traceId) {\n    missingFields.push(\"traceId\");\n  }\n  if (!spanContext.spanId) {\n    missingFields.push(\"spanId\");\n  }\n\n  if (missingFields.length) {\n    return;\n  }\n\n  const flags = spanContext.traceFlags || TraceFlags.NONE;\n  const hexFlags = flags.toString(16);\n  const traceFlags = hexFlags.length === 1 ? `0${hexFlags}` : hexFlags;\n\n  // https://www.w3.org/TR/trace-context/#traceparent-header-field-values\n  return `${VERSION}-${spanContext.traceId}-${spanContext.spanId}-${traceFlags}`;\n}\n"],"mappings":"AAAA;AACA;AAIA,MAAMA,OAAO,GAAG,IAAI;AAEpB;;;;;AAKA,OAAM,SAAUC,uCAAuCA,CACrDC,iBAAyB;EAEzB,MAAMC,KAAK,GAAGD,iBAAiB,CAACE,KAAK,CAAC,GAAG,CAAC;EAE1C,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;IACtB;;EAGF,MAAM,CAACC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAEC,YAAY,CAAC,GAAGN,KAAK;EAEtD,IAAIG,OAAO,KAAKN,OAAO,EAAE;IACvB;;EAGF,MAAMU,UAAU,GAAGC,QAAQ,CAACF,YAAY,EAAE,EAAE,CAAC;EAE7C,MAAMG,WAAW,GAAgB;IAC/BJ,MAAM;IACND,OAAO;IACPG;GACD;EAED,OAAOE,WAAW;AACpB;AAEA;;;;;AAKA,OAAM,SAAUC,oBAAoBA,CAACD,WAAwB;EAC3D,MAAME,aAAa,GAAa,EAAE;EAClC,IAAI,CAACF,WAAW,CAACL,OAAO,EAAE;IACxBO,aAAa,CAACC,IAAI,CAAC,SAAS,CAAC;;EAE/B,IAAI,CAACH,WAAW,CAACJ,MAAM,EAAE;IACvBM,aAAa,CAACC,IAAI,CAAC,QAAQ,CAAC;;EAG9B,IAAID,aAAa,CAACT,MAAM,EAAE;IACxB;;EAGF,MAAMW,KAAK,GAAGJ,WAAW,CAACF,UAAU;EACpC,MAAMO,QAAQ,GAAGD,KAAK,CAACE,QAAQ,CAAC,EAAE,CAAC;EACnC,MAAMR,UAAU,GAAGO,QAAQ,CAACZ,MAAM,KAAK,CAAC,GAAG,IAAIY,QAAQ,EAAE,GAAGA,QAAQ;EAEpE;EACA,OAAO,GAAGjB,OAAO,IAAIY,WAAW,CAACL,OAAO,IAAIK,WAAW,CAACJ,MAAM,IAAIE,UAAU,EAAE;AAChF"},"metadata":{},"sourceType":"module","externalDependencies":[]}