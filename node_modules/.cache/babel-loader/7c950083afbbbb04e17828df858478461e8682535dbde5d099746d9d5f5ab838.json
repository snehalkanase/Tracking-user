{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class representing a PageBlob. */\nexport class PageBlob {\n  /**\n   * Initialize a new instance of the class PageBlob class.\n   * @param client Reference to the service client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * The Create operation creates a new page blob.\n   * @param contentLength The length of the request.\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n   *                          page blob size must be aligned to a 512-byte boundary.\n   * @param options The options parameters.\n   */\n  create(contentLength, blobContentLength, options) {\n    const operationArguments = {\n      contentLength,\n      blobContentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, createOperationSpec);\n  }\n  /**\n   * The Upload Pages operation writes a range of pages to a page blob\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  uploadPages(contentLength, body, options) {\n    const operationArguments = {\n      contentLength,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, uploadPagesOperationSpec);\n  }\n  /**\n   * The Clear Pages operation clears a set of pages from a page blob\n   * @param contentLength The length of the request.\n   * @param options The options parameters.\n   */\n  clearPages(contentLength, options) {\n    const operationArguments = {\n      contentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, clearPagesOperationSpec);\n  }\n  /**\n   * The Upload Pages operation writes a range of pages to a page blob where the contents are read from a\n   * URL\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param sourceRange Bytes of source data in the specified range. The length of this range should\n   *                    match the ContentLength header and x-ms-range/Range destination range header.\n   * @param contentLength The length of the request.\n   * @param range The range of bytes to which the source range would be written. The range should be 512\n   *              aligned and range-end is required.\n   * @param options The options parameters.\n   */\n  uploadPagesFromURL(sourceUrl, sourceRange, contentLength, range, options) {\n    const operationArguments = {\n      sourceUrl,\n      sourceRange,\n      contentLength,\n      range,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, uploadPagesFromURLOperationSpec);\n  }\n  /**\n   * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a\n   * page blob\n   * @param options The options parameters.\n   */\n  getPageRanges(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, getPageRangesOperationSpec);\n  }\n  /**\n   * The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that were\n   * changed between target blob and previous snapshot.\n   * @param options The options parameters.\n   */\n  getPageRangesDiff(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, getPageRangesDiffOperationSpec);\n  }\n  /**\n   * Resize the Blob\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n   *                          page blob size must be aligned to a 512-byte boundary.\n   * @param options The options parameters.\n   */\n  resize(blobContentLength, options) {\n    const operationArguments = {\n      blobContentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, resizeOperationSpec);\n  }\n  /**\n   * Update the sequence number of the blob\n   * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the request.\n   *                             This property applies to page blobs only. This property indicates how the service should modify the\n   *                             blob's sequence number\n   * @param options The options parameters.\n   */\n  updateSequenceNumber(sequenceNumberAction, options) {\n    const operationArguments = {\n      sequenceNumberAction,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, updateSequenceNumberOperationSpec);\n  }\n  /**\n   * The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob.\n   * The snapshot is copied such that only the differential changes between the previously copied\n   * snapshot are transferred to the destination. The copied snapshots are complete copies of the\n   * original snapshot and can be read or copied from as usual. This API is supported since REST version\n   * 2016-05-31.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  copyIncremental(copySource, options) {\n    const operationArguments = {\n      copySource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, copyIncrementalOperationSpec);\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */true);\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */false);\nconst createOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.blobTagsString, Parameters.legalHold1, Parameters.blobType, Parameters.blobContentLength, Parameters.blobSequenceNumber],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst uploadPagesOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobUploadPagesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUploadPagesExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.contentType1, Parameters.accept2, Parameters.pageWrite, Parameters.ifSequenceNumberLessThanOrEqualTo, Parameters.ifSequenceNumberLessThan, Parameters.ifSequenceNumberEqualTo],\n  mediaType: \"binary\",\n  serializer\n};\nconst clearPagesOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobClearPagesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobClearPagesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.ifSequenceNumberLessThanOrEqualTo, Parameters.ifSequenceNumberLessThan, Parameters.ifSequenceNumberEqualTo, Parameters.pageWrite1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst uploadPagesFromURLOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobUploadPagesFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUploadPagesFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.pageWrite, Parameters.ifSequenceNumberLessThanOrEqualTo, Parameters.ifSequenceNumberLessThan, Parameters.ifSequenceNumberEqualTo, Parameters.sourceUrl, Parameters.sourceRange, Parameters.sourceContentCrc64, Parameters.range1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPageRangesOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PageList,\n      headersMapper: Mappers.PageBlobGetPageRangesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobGetPageRangesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.snapshot, Parameters.comp20],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPageRangesDiffOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PageList,\n      headersMapper: Mappers.PageBlobGetPageRangesDiffHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobGetPageRangesDiffExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.snapshot, Parameters.comp20, Parameters.prevsnapshot],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.prevSnapshotUrl],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst resizeOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PageBlobResizeHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobResizeExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.blobContentLength],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst updateSequenceNumberOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PageBlobUpdateSequenceNumberHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUpdateSequenceNumberExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobSequenceNumber, Parameters.sequenceNumberAction],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst copyIncrementalOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.PageBlobCopyIncrementalHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobCopyIncrementalExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp21],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.copySource],\n  isXML: true,\n  serializer: xmlSerializer\n};","map":{"version":3,"names":["coreHttp","Mappers","Parameters","PageBlob","constructor","client","create","contentLength","blobContentLength","options","operationArguments","operationOptionsToRequestOptionsBase","sendOperationRequest","createOperationSpec","uploadPages","body","uploadPagesOperationSpec","clearPages","clearPagesOperationSpec","uploadPagesFromURL","sourceUrl","sourceRange","range","uploadPagesFromURLOperationSpec","getPageRanges","getPageRangesOperationSpec","getPageRangesDiff","getPageRangesDiffOperationSpec","resize","resizeOperationSpec","updateSequenceNumber","sequenceNumberAction","updateSequenceNumberOperationSpec","copyIncremental","copySource","copyIncrementalOperationSpec","xmlSerializer","Serializer","serializer","path","httpMethod","responses","headersMapper","PageBlobCreateHeaders","default","bodyMapper","StorageError","PageBlobCreateExceptionHeaders","queryParameters","timeoutInSeconds","urlParameters","url","headerParameters","version","requestId","accept1","metadata","leaseId","ifModifiedSince","ifUnmodifiedSince","encryptionKey","encryptionKeySha256","encryptionAlgorithm","ifMatch","ifNoneMatch","ifTags","blobCacheControl","blobContentType","blobContentMD5","blobContentEncoding","blobContentLanguage","blobContentDisposition","immutabilityPolicyExpiry","immutabilityPolicyMode","encryptionScope","tier","blobTagsString","legalHold1","blobType","blobSequenceNumber","isXML","PageBlobUploadPagesHeaders","PageBlobUploadPagesExceptionHeaders","requestBody","body1","comp19","transactionalContentMD5","transactionalContentCrc64","contentType1","accept2","pageWrite","ifSequenceNumberLessThanOrEqualTo","ifSequenceNumberLessThan","ifSequenceNumberEqualTo","mediaType","PageBlobClearPagesHeaders","PageBlobClearPagesExceptionHeaders","pageWrite1","PageBlobUploadPagesFromURLHeaders","PageBlobUploadPagesFromURLExceptionHeaders","sourceIfModifiedSince","sourceIfUnmodifiedSince","sourceIfMatch","sourceIfNoneMatch","sourceContentMD5","copySourceAuthorization","sourceContentCrc64","range1","PageList","PageBlobGetPageRangesHeaders","PageBlobGetPageRangesExceptionHeaders","marker","maxPageSize","snapshot","comp20","PageBlobGetPageRangesDiffHeaders","PageBlobGetPageRangesDiffExceptionHeaders","prevsnapshot","prevSnapshotUrl","PageBlobResizeHeaders","PageBlobResizeExceptionHeaders","comp","PageBlobUpdateSequenceNumberHeaders","PageBlobUpdateSequenceNumberExceptionHeaders","PageBlobCopyIncrementalHeaders","PageBlobCopyIncrementalExceptionHeaders","comp21"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\generated\\src\\operations\\pageBlob.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  PageBlobCreateOptionalParams,\n  PageBlobCreateResponse,\n  PageBlobUploadPagesOptionalParams,\n  PageBlobUploadPagesResponse,\n  PageBlobClearPagesOptionalParams,\n  PageBlobClearPagesResponse,\n  PageBlobUploadPagesFromURLOptionalParams,\n  PageBlobUploadPagesFromURLResponse,\n  PageBlobGetPageRangesOptionalParams,\n  PageBlobGetPageRangesResponse,\n  PageBlobGetPageRangesDiffOptionalParams,\n  PageBlobGetPageRangesDiffResponse,\n  PageBlobResizeOptionalParams,\n  PageBlobResizeResponse,\n  SequenceNumberActionType,\n  PageBlobUpdateSequenceNumberOptionalParams,\n  PageBlobUpdateSequenceNumberResponse,\n  PageBlobCopyIncrementalOptionalParams,\n  PageBlobCopyIncrementalResponse\n} from \"../models\";\n\n/** Class representing a PageBlob. */\nexport class PageBlob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class PageBlob class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Create operation creates a new page blob.\n   * @param contentLength The length of the request.\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n   *                          page blob size must be aligned to a 512-byte boundary.\n   * @param options The options parameters.\n   */\n  create(\n    contentLength: number,\n    blobContentLength: number,\n    options?: PageBlobCreateOptionalParams\n  ): Promise<PageBlobCreateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      blobContentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOperationSpec\n    ) as Promise<PageBlobCreateResponse>;\n  }\n\n  /**\n   * The Upload Pages operation writes a range of pages to a page blob\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  uploadPages(\n    contentLength: number,\n    body: coreHttp.HttpRequestBody,\n    options?: PageBlobUploadPagesOptionalParams\n  ): Promise<PageBlobUploadPagesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      uploadPagesOperationSpec\n    ) as Promise<PageBlobUploadPagesResponse>;\n  }\n\n  /**\n   * The Clear Pages operation clears a set of pages from a page blob\n   * @param contentLength The length of the request.\n   * @param options The options parameters.\n   */\n  clearPages(\n    contentLength: number,\n    options?: PageBlobClearPagesOptionalParams\n  ): Promise<PageBlobClearPagesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      clearPagesOperationSpec\n    ) as Promise<PageBlobClearPagesResponse>;\n  }\n\n  /**\n   * The Upload Pages operation writes a range of pages to a page blob where the contents are read from a\n   * URL\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param sourceRange Bytes of source data in the specified range. The length of this range should\n   *                    match the ContentLength header and x-ms-range/Range destination range header.\n   * @param contentLength The length of the request.\n   * @param range The range of bytes to which the source range would be written. The range should be 512\n   *              aligned and range-end is required.\n   * @param options The options parameters.\n   */\n  uploadPagesFromURL(\n    sourceUrl: string,\n    sourceRange: string,\n    contentLength: number,\n    range: string,\n    options?: PageBlobUploadPagesFromURLOptionalParams\n  ): Promise<PageBlobUploadPagesFromURLResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      sourceUrl,\n      sourceRange,\n      contentLength,\n      range,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      uploadPagesFromURLOperationSpec\n    ) as Promise<PageBlobUploadPagesFromURLResponse>;\n  }\n\n  /**\n   * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a\n   * page blob\n   * @param options The options parameters.\n   */\n  getPageRanges(\n    options?: PageBlobGetPageRangesOptionalParams\n  ): Promise<PageBlobGetPageRangesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getPageRangesOperationSpec\n    ) as Promise<PageBlobGetPageRangesResponse>;\n  }\n\n  /**\n   * The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that were\n   * changed between target blob and previous snapshot.\n   * @param options The options parameters.\n   */\n  getPageRangesDiff(\n    options?: PageBlobGetPageRangesDiffOptionalParams\n  ): Promise<PageBlobGetPageRangesDiffResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getPageRangesDiffOperationSpec\n    ) as Promise<PageBlobGetPageRangesDiffResponse>;\n  }\n\n  /**\n   * Resize the Blob\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n   *                          page blob size must be aligned to a 512-byte boundary.\n   * @param options The options parameters.\n   */\n  resize(\n    blobContentLength: number,\n    options?: PageBlobResizeOptionalParams\n  ): Promise<PageBlobResizeResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      blobContentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      resizeOperationSpec\n    ) as Promise<PageBlobResizeResponse>;\n  }\n\n  /**\n   * Update the sequence number of the blob\n   * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the request.\n   *                             This property applies to page blobs only. This property indicates how the service should modify the\n   *                             blob's sequence number\n   * @param options The options parameters.\n   */\n  updateSequenceNumber(\n    sequenceNumberAction: SequenceNumberActionType,\n    options?: PageBlobUpdateSequenceNumberOptionalParams\n  ): Promise<PageBlobUpdateSequenceNumberResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      sequenceNumberAction,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      updateSequenceNumberOperationSpec\n    ) as Promise<PageBlobUpdateSequenceNumberResponse>;\n  }\n\n  /**\n   * The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob.\n   * The snapshot is copied such that only the differential changes between the previously copied\n   * snapshot are transferred to the destination. The copied snapshots are complete copies of the\n   * original snapshot and can be read or copied from as usual. This API is supported since REST version\n   * 2016-05-31.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  copyIncremental(\n    copySource: string,\n    options?: PageBlobCopyIncrementalOptionalParams\n  ): Promise<PageBlobCopyIncrementalResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      copySource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      copyIncrementalOperationSpec\n    ) as Promise<PageBlobCopyIncrementalResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst createOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.blobTagsString,\n    Parameters.legalHold1,\n    Parameters.blobType,\n    Parameters.blobContentLength,\n    Parameters.blobSequenceNumber\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst uploadPagesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobUploadPagesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUploadPagesExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64,\n    Parameters.contentType1,\n    Parameters.accept2,\n    Parameters.pageWrite,\n    Parameters.ifSequenceNumberLessThanOrEqualTo,\n    Parameters.ifSequenceNumberLessThan,\n    Parameters.ifSequenceNumberEqualTo\n  ],\n  mediaType: \"binary\",\n  serializer\n};\nconst clearPagesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobClearPagesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobClearPagesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.ifSequenceNumberLessThanOrEqualTo,\n    Parameters.ifSequenceNumberLessThan,\n    Parameters.ifSequenceNumberEqualTo,\n    Parameters.pageWrite1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst uploadPagesFromURLOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobUploadPagesFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUploadPagesFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceContentMD5,\n    Parameters.copySourceAuthorization,\n    Parameters.pageWrite,\n    Parameters.ifSequenceNumberLessThanOrEqualTo,\n    Parameters.ifSequenceNumberLessThan,\n    Parameters.ifSequenceNumberEqualTo,\n    Parameters.sourceUrl,\n    Parameters.sourceRange,\n    Parameters.sourceContentCrc64,\n    Parameters.range1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPageRangesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PageList,\n      headersMapper: Mappers.PageBlobGetPageRangesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobGetPageRangesExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.snapshot,\n    Parameters.comp20\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPageRangesDiffOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PageList,\n      headersMapper: Mappers.PageBlobGetPageRangesDiffHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobGetPageRangesDiffExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.snapshot,\n    Parameters.comp20,\n    Parameters.prevsnapshot\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.prevSnapshotUrl\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst resizeOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PageBlobResizeHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobResizeExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.blobContentLength\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst updateSequenceNumberOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PageBlobUpdateSequenceNumberHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUpdateSequenceNumberExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobSequenceNumber,\n    Parameters.sequenceNumberAction\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst copyIncrementalOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.PageBlobCopyIncrementalHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobCopyIncrementalExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp21],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.copySource\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}