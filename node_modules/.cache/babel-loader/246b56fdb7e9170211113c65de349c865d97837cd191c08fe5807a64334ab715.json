{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"../policies/requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { delay } from \"@azure/core-util\";\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS = {\n  forcedRefreshWindowInMs: 1000,\n  retryIntervalInMs: 3000,\n  refreshWindowInMs: 1000 * 60 * 2 // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - a function that produces a promise of an access\n * token that may fail by returning null\n * @param retryIntervalInMs - the time (in milliseconds) to wait between retry\n * attempts\n * @param timeoutInMs - the timestamp after which the refresh attempt will fail,\n * throwing an exception\n * @returns - a promise that, if it resolves, will resolve with an access token\n */\nasync function beginRefresh(getAccessToken, retryIntervalInMs, timeoutInMs) {\n  // This wrapper handles exceptions gracefully as long as we haven't exceeded\n  // the timeout.\n  async function tryGetAccessToken() {\n    if (Date.now() < timeoutInMs) {\n      try {\n        return await getAccessToken();\n      } catch (_a) {\n        return null;\n      }\n    } else {\n      const finalToken = await getAccessToken();\n      // Timeout is up, so throw if it's still null\n      if (finalToken === null) {\n        throw new Error(\"Failed to refresh access token.\");\n      }\n      return finalToken;\n    }\n  }\n  let token = await tryGetAccessToken();\n  while (token === null) {\n    await delay(retryIntervalInMs);\n    token = await tryGetAccessToken();\n  }\n  return token;\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param scopes - the scopes to request authorization for\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction createTokenCycler(credential, scopes, tokenCyclerOptions) {\n  let refreshWorker = null;\n  let token = null;\n  const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing() {\n      return refreshWorker !== null;\n    },\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh() {\n      var _a;\n      return !cycler.isRefreshing && ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();\n    },\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh() {\n      return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();\n    }\n  };\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n  function refresh(getTokenOptions) {\n    var _a;\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);\n      // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n      refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs,\n      // If we don't have a token, then we should timeout immediately\n      (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then(_token => {\n        refreshWorker = null;\n        token = _token;\n        return token;\n      }).catch(reason => {\n        // We also should reset the refresher if we enter a failed state.  All\n        // existing awaiters will throw, but subsequent requests will start a\n        // new retry chain.\n        refreshWorker = null;\n        token = null;\n        throw reason;\n      });\n    }\n    return refreshWorker;\n  }\n  return async tokenOptions => {\n    //\n    // Simple rules:\n    // - If we MUST refresh, then return the refresh task, blocking\n    //   the pipeline until a token is available.\n    // - If we SHOULD refresh, then run refresh but don't return it\n    //   (we can still use the cached token).\n    // - Return the token, since it's fine if we didn't return in\n    //   step 1.\n    //\n    if (cycler.mustRefresh) return refresh(tokenOptions);\n    if (cycler.shouldRefresh) {\n      refresh(tokenOptions);\n    }\n    return token;\n  };\n}\n// #endregion\n/**\n * Creates a new factory for a RequestPolicy that applies a bearer token to\n * the requests' `Authorization` headers.\n *\n * @param credential - The TokenCredential implementation that can supply the bearer token.\n * @param scopes - The scopes for which the bearer token applies.\n */\nexport function bearerTokenAuthenticationPolicy(credential, scopes) {\n  // This simple function encapsulates the entire process of reliably retrieving the token\n  const getToken = createTokenCycler(credential, scopes /* , options */);\n  class BearerTokenAuthenticationPolicy extends BaseRequestPolicy {\n    constructor(nextPolicy, options) {\n      super(nextPolicy, options);\n    }\n    async sendRequest(webResource) {\n      if (!webResource.url.toLowerCase().startsWith(\"https://\")) {\n        throw new Error(\"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\");\n      }\n      const {\n        token\n      } = await getToken({\n        abortSignal: webResource.abortSignal,\n        tracingOptions: {\n          tracingContext: webResource.tracingContext\n        }\n      });\n      webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${token}`);\n      return this._nextPolicy.sendRequest(webResource);\n    }\n  }\n  return {\n    create: (nextPolicy, options) => {\n      return new BearerTokenAuthenticationPolicy(nextPolicy, options);\n    }\n  };\n}","map":{"version":3,"names":["BaseRequestPolicy","Constants","delay","DEFAULT_CYCLER_OPTIONS","forcedRefreshWindowInMs","retryIntervalInMs","refreshWindowInMs","beginRefresh","getAccessToken","timeoutInMs","tryGetAccessToken","Date","now","_a","finalToken","Error","token","createTokenCycler","credential","scopes","tokenCyclerOptions","refreshWorker","options","Object","assign","cycler","isRefreshing","shouldRefresh","expiresOnTimestamp","mustRefresh","refresh","getTokenOptions","getToken","then","_token","catch","reason","tokenOptions","bearerTokenAuthenticationPolicy","BearerTokenAuthenticationPolicy","constructor","nextPolicy","sendRequest","webResource","url","toLowerCase","startsWith","abortSignal","tracingOptions","tracingContext","headers","set","HeaderConstants","AUTHORIZATION","_nextPolicy","create"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\policies\\bearerTokenAuthenticationPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"../policies/requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport { delay } from \"@azure/core-util\";\n\n// #region Access Token Cycler\n\n/**\n * A function that gets a promise of an access token and allows providing\n * options.\n *\n * @param options - the options to pass to the underlying token provider\n */\ntype AccessTokenGetter = (options: GetTokenOptions) => Promise<AccessToken>;\n\ninterface TokenCyclerOptions {\n  /**\n   * The window of time before token expiration during which the token will be\n   * considered unusable due to risk of the token expiring before sending the\n   * request.\n   *\n   * This will only become meaningful if the refresh fails for over\n   * (refreshWindow - forcedRefreshWindow) milliseconds.\n   */\n  forcedRefreshWindowInMs: number;\n  /**\n   * Interval in milliseconds to retry failed token refreshes.\n   */\n  retryIntervalInMs: number;\n  /**\n   * The window of time before token expiration during which\n   * we will attempt to refresh the token.\n   */\n  refreshWindowInMs: number;\n}\n\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS: TokenCyclerOptions = {\n  forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n  retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n  refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - a function that produces a promise of an access\n * token that may fail by returning null\n * @param retryIntervalInMs - the time (in milliseconds) to wait between retry\n * attempts\n * @param timeoutInMs - the timestamp after which the refresh attempt will fail,\n * throwing an exception\n * @returns - a promise that, if it resolves, will resolve with an access token\n */\nasync function beginRefresh(\n  getAccessToken: () => Promise<AccessToken | null>,\n  retryIntervalInMs: number,\n  timeoutInMs: number\n): Promise<AccessToken> {\n  // This wrapper handles exceptions gracefully as long as we haven't exceeded\n  // the timeout.\n  async function tryGetAccessToken(): Promise<AccessToken | null> {\n    if (Date.now() < timeoutInMs) {\n      try {\n        return await getAccessToken();\n      } catch {\n        return null;\n      }\n    } else {\n      const finalToken = await getAccessToken();\n\n      // Timeout is up, so throw if it's still null\n      if (finalToken === null) {\n        throw new Error(\"Failed to refresh access token.\");\n      }\n\n      return finalToken;\n    }\n  }\n\n  let token: AccessToken | null = await tryGetAccessToken();\n\n  while (token === null) {\n    await delay(retryIntervalInMs);\n\n    token = await tryGetAccessToken();\n  }\n\n  return token;\n}\n\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param scopes - the scopes to request authorization for\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction createTokenCycler(\n  credential: TokenCredential,\n  scopes: string | string[],\n  tokenCyclerOptions?: Partial<TokenCyclerOptions>\n): AccessTokenGetter {\n  let refreshWorker: Promise<AccessToken> | null = null;\n  let token: AccessToken | null = null;\n\n  const options = {\n    ...DEFAULT_CYCLER_OPTIONS,\n    ...tokenCyclerOptions,\n  };\n\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing(): boolean {\n      return refreshWorker !== null;\n    },\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh(): boolean {\n      return (\n        !cycler.isRefreshing &&\n        (token?.expiresOnTimestamp ?? 0) - options.refreshWindowInMs < Date.now()\n      );\n    },\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh(): boolean {\n      return (\n        token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now()\n      );\n    },\n  };\n\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n  function refresh(getTokenOptions: GetTokenOptions): Promise<AccessToken> {\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = (): Promise<AccessToken | null> =>\n        credential.getToken(scopes, getTokenOptions);\n\n      // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n      refreshWorker = beginRefresh(\n        tryGetAccessToken,\n        options.retryIntervalInMs,\n        // If we don't have a token, then we should timeout immediately\n        token?.expiresOnTimestamp ?? Date.now()\n      )\n        .then((_token) => {\n          refreshWorker = null;\n          token = _token;\n          return token;\n        })\n        .catch((reason) => {\n          // We also should reset the refresher if we enter a failed state.  All\n          // existing awaiters will throw, but subsequent requests will start a\n          // new retry chain.\n          refreshWorker = null;\n          token = null;\n          throw reason;\n        });\n    }\n\n    return refreshWorker as Promise<AccessToken>;\n  }\n\n  return async (tokenOptions: GetTokenOptions): Promise<AccessToken> => {\n    //\n    // Simple rules:\n    // - If we MUST refresh, then return the refresh task, blocking\n    //   the pipeline until a token is available.\n    // - If we SHOULD refresh, then run refresh but don't return it\n    //   (we can still use the cached token).\n    // - Return the token, since it's fine if we didn't return in\n    //   step 1.\n    //\n\n    if (cycler.mustRefresh) return refresh(tokenOptions);\n\n    if (cycler.shouldRefresh) {\n      refresh(tokenOptions);\n    }\n\n    return token as AccessToken;\n  };\n}\n\n// #endregion\n\n/**\n * Creates a new factory for a RequestPolicy that applies a bearer token to\n * the requests' `Authorization` headers.\n *\n * @param credential - The TokenCredential implementation that can supply the bearer token.\n * @param scopes - The scopes for which the bearer token applies.\n */\nexport function bearerTokenAuthenticationPolicy(\n  credential: TokenCredential,\n  scopes: string | string[]\n): RequestPolicyFactory {\n  // This simple function encapsulates the entire process of reliably retrieving the token\n  const getToken = createTokenCycler(credential, scopes /* , options */);\n\n  class BearerTokenAuthenticationPolicy extends BaseRequestPolicy {\n    public constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n      super(nextPolicy, options);\n    }\n\n    public async sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse> {\n      if (!webResource.url.toLowerCase().startsWith(\"https://\")) {\n        throw new Error(\n          \"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\"\n        );\n      }\n\n      const { token } = await getToken({\n        abortSignal: webResource.abortSignal,\n        tracingOptions: {\n          tracingContext: webResource.tracingContext,\n        },\n      });\n      webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${token}`);\n      return this._nextPolicy.sendRequest(webResource);\n    }\n  }\n\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new BearerTokenAuthenticationPolicy(nextPolicy, options);\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}