{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { XML_CHARKEY } from \"../util/serializer.common\";\nimport { MapperType } from \"../serializer\";\nimport { RestError } from \"../restError\";\nimport { parseXML } from \"../util/xml\";\n/**\n * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they\n * pass through the HTTP pipeline.\n */\nexport function deserializationPolicy(deserializationContentTypes, parsingOptions) {\n  return {\n    create: function create(nextPolicy, options) {\n      return new DeserializationPolicy(nextPolicy, options, deserializationContentTypes, parsingOptions);\n    }\n  };\n}\nexport var defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nexport var defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\nexport var DefaultDeserializationOptions = {\n  expectedContentTypes: {\n    json: defaultJsonContentTypes,\n    xml: defaultXmlContentTypes\n  }\n};\n/**\n * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the\n * HTTP pipeline.\n */\nexport var DeserializationPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {\n  _inherits(DeserializationPolicy, _BaseRequestPolicy);\n  var _super = _createSuper(DeserializationPolicy);\n  function DeserializationPolicy(nextPolicy, requestPolicyOptions, deserializationContentTypes) {\n    var _this;\n    var parsingOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    _classCallCheck(this, DeserializationPolicy);\n    var _a;\n    _this = _super.call(this, nextPolicy, requestPolicyOptions);\n    _this.jsonContentTypes = deserializationContentTypes && deserializationContentTypes.json || defaultJsonContentTypes;\n    _this.xmlContentTypes = deserializationContentTypes && deserializationContentTypes.xml || defaultXmlContentTypes;\n    _this.xmlCharKey = (_a = parsingOptions.xmlCharKey) !== null && _a !== void 0 ? _a : XML_CHARKEY;\n    return _this;\n  }\n  _createClass(DeserializationPolicy, [{\n    key: \"sendRequest\",\n    value: function () {\n      var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {\n        var _this2 = this;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this._nextPolicy.sendRequest(request).then(function (response) {\n                return deserializeResponseBody(_this2.jsonContentTypes, _this2.xmlContentTypes, response, {\n                  xmlCharKey: _this2.xmlCharKey\n                });\n              }));\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function sendRequest(_x) {\n        return _sendRequest.apply(this, arguments);\n      }\n      return sendRequest;\n    }()\n  }]);\n  return DeserializationPolicy;\n}(BaseRequestPolicy);\nfunction getOperationResponse(parsedResponse) {\n  var result;\n  var request = parsedResponse.request;\n  var operationSpec = request.operationSpec;\n  if (operationSpec) {\n    var operationResponseGetter = request.operationResponseGetter;\n    if (!operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\nfunction shouldDeserializeResponse(parsedResponse) {\n  var shouldDeserialize = parsedResponse.request.shouldDeserialize;\n  var result;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\n/**\n * Given a particular set of content types to parse as either JSON or XML, consumes the HTTP response to produce the result object defined by the request's {@link OperationSpec}.\n * @param jsonContentTypes - Response content types to parse the body as JSON.\n * @param xmlContentTypes  - Response content types to parse the body as XML.\n * @param response - HTTP Response from the pipeline.\n * @param options  - Options to the serializer, mostly for configuring the XML parser if needed.\n * @returns A parsed {@link HttpOperationResponse} object that can be returned by the {@link ServiceClient}.\n */\nexport function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var _a, _b, _c;\n  var updatedOptions = {\n    rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : \"\",\n    includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,\n    xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY\n  };\n  return parse(jsonContentTypes, xmlContentTypes, response, updatedOptions).then(function (parsedResponse) {\n    if (!shouldDeserializeResponse(parsedResponse)) {\n      return parsedResponse;\n    }\n    var operationSpec = parsedResponse.request.operationSpec;\n    if (!operationSpec || !operationSpec.responses) {\n      return parsedResponse;\n    }\n    var responseSpec = getOperationResponse(parsedResponse);\n    var _handleErrorResponse = handleErrorResponse(parsedResponse, operationSpec, responseSpec),\n      error = _handleErrorResponse.error,\n      shouldReturnResponse = _handleErrorResponse.shouldReturnResponse;\n    if (error) {\n      throw error;\n    } else if (shouldReturnResponse) {\n      return parsedResponse;\n    }\n    // An operation response spec does exist for current status code, so\n    // use it to deserialize the response.\n    if (responseSpec) {\n      if (responseSpec.bodyMapper) {\n        var valueToDeserialize = parsedResponse.parsedBody;\n        if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {\n          valueToDeserialize = typeof valueToDeserialize === \"object\" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName] : [];\n        }\n        try {\n          parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\", options);\n        } catch (innerError) {\n          var restError = new RestError(\"Error \".concat(innerError, \" occurred in deserializing the responseBody - \").concat(parsedResponse.bodyAsText), undefined, parsedResponse.status, parsedResponse.request, parsedResponse);\n          throw restError;\n        }\n      } else if (operationSpec.httpMethod === \"HEAD\") {\n        // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n        parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n      }\n      if (responseSpec.headersMapper) {\n        parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJson(), \"operationRes.parsedHeaders\", options);\n      }\n    }\n    return parsedResponse;\n  });\n}\nfunction isOperationSpecEmpty(operationSpec) {\n  var expectedStatusCodes = Object.keys(operationSpec.responses);\n  return expectedStatusCodes.length === 0 || expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\";\n}\nfunction handleErrorResponse(parsedResponse, operationSpec, responseSpec) {\n  var _a;\n  var isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n  var isExpectedStatusCode = isOperationSpecEmpty(operationSpec) ? isSuccessByStatus : !!responseSpec;\n  if (isExpectedStatusCode) {\n    if (responseSpec) {\n      if (!responseSpec.isError) {\n        return {\n          error: null,\n          shouldReturnResponse: false\n        };\n      }\n    } else {\n      return {\n        error: null,\n        shouldReturnResponse: false\n      };\n    }\n  }\n  var errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;\n  var streaming = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status)) || parsedResponse.request.streamResponseBody;\n  var initialErrorMessage = streaming ? \"Unexpected status code: \".concat(parsedResponse.status) : parsedResponse.bodyAsText;\n  var error = new RestError(initialErrorMessage, undefined, parsedResponse.status, parsedResponse.request, parsedResponse);\n  // If the item failed but there's no error spec or default spec to deserialize the error,\n  // we should fail so we just throw the parsed response\n  if (!errorResponseSpec) {\n    throw error;\n  }\n  var defaultBodyMapper = errorResponseSpec.bodyMapper;\n  var defaultHeadersMapper = errorResponseSpec.headersMapper;\n  try {\n    // If error response has a body, try to deserialize it using default body mapper.\n    // Then try to extract error code & message from it\n    if (parsedResponse.parsedBody) {\n      var parsedBody = parsedResponse.parsedBody;\n      var parsedError;\n      if (defaultBodyMapper) {\n        var valueToDeserialize = parsedBody;\n        if (operationSpec.isXML && defaultBodyMapper.type.name === MapperType.Sequence) {\n          valueToDeserialize = typeof parsedBody === \"object\" ? parsedBody[defaultBodyMapper.xmlElementName] : [];\n        }\n        parsedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, \"error.response.parsedBody\");\n      }\n      var internalError = parsedBody.error || parsedError || parsedBody;\n      error.code = internalError.code;\n      if (internalError.message) {\n        error.message = internalError.message;\n      }\n      if (defaultBodyMapper) {\n        error.response.parsedBody = parsedError;\n      }\n    }\n    // If error response has headers, try to deserialize it using default header mapper\n    if (parsedResponse.headers && defaultHeadersMapper) {\n      error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJson(), \"operationRes.parsedHeaders\");\n    }\n  } catch (defaultError) {\n    error.message = \"Error \\\"\".concat(defaultError.message, \"\\\" occurred in deserializing the responseBody - \\\"\").concat(parsedResponse.bodyAsText, \"\\\" for the default response.\");\n  }\n  return {\n    error: error,\n    shouldReturnResponse: false\n  };\n}\nfunction parse(jsonContentTypes, xmlContentTypes, operationResponse, opts) {\n  var _a;\n  var errorHandler = function errorHandler(err) {\n    var msg = \"Error \\\"\".concat(err, \"\\\" occurred while parsing the response body - \").concat(operationResponse.bodyAsText, \".\");\n    var errCode = err.code || RestError.PARSE_ERROR;\n    var e = new RestError(msg, errCode, operationResponse.status, operationResponse.request, operationResponse);\n    return Promise.reject(e);\n  };\n  var streaming = ((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) || operationResponse.request.streamResponseBody;\n  if (!streaming && operationResponse.bodyAsText) {\n    var text = operationResponse.bodyAsText;\n    var contentType = operationResponse.headers.get(\"Content-Type\") || \"\";\n    var contentComponents = !contentType ? [] : contentType.split(\";\").map(function (component) {\n      return component.toLowerCase();\n    });\n    if (contentComponents.length === 0 || contentComponents.some(function (component) {\n      return jsonContentTypes.indexOf(component) !== -1;\n    })) {\n      return new Promise(function (resolve) {\n        operationResponse.parsedBody = JSON.parse(text);\n        resolve(operationResponse);\n      }).catch(errorHandler);\n    } else if (contentComponents.some(function (component) {\n      return xmlContentTypes.indexOf(component) !== -1;\n    })) {\n      return parseXML(text, opts).then(function (body) {\n        operationResponse.parsedBody = body;\n        return operationResponse;\n      }).catch(errorHandler);\n    }\n  }\n  return Promise.resolve(operationResponse);\n}","map":{"version":3,"names":["BaseRequestPolicy","XML_CHARKEY","MapperType","RestError","parseXML","deserializationPolicy","deserializationContentTypes","parsingOptions","create","nextPolicy","options","DeserializationPolicy","defaultJsonContentTypes","defaultXmlContentTypes","DefaultDeserializationOptions","expectedContentTypes","json","xml","_BaseRequestPolicy","_inherits","_super","_createSuper","requestPolicyOptions","_this","arguments","length","undefined","_classCallCheck","call","jsonContentTypes","xmlContentTypes","xmlCharKey","_a","_createClass","key","value","_sendRequest","_asyncToGenerator","_regeneratorRuntime","mark","_callee","request","_this2","wrap","_callee$","_context","prev","next","abrupt","_nextPolicy","sendRequest","then","response","deserializeResponseBody","stop","_x","apply","getOperationResponse","parsedResponse","result","operationSpec","operationResponseGetter","responses","status","shouldDeserializeResponse","shouldDeserialize","updatedOptions","rootName","includeRoot","_b","_c","parse","responseSpec","_handleErrorResponse","handleErrorResponse","error","shouldReturnResponse","bodyMapper","valueToDeserialize","parsedBody","isXML","type","name","Sequence","xmlElementName","serializer","deserialize","innerError","restError","concat","bodyAsText","httpMethod","headersMapper","parsedHeaders","headers","toJson","isOperationSpecEmpty","expectedStatusCodes","Object","keys","isSuccessByStatus","isExpectedStatusCode","isError","errorResponseSpec","default","streaming","streamResponseStatusCodes","has","streamResponseBody","initialErrorMessage","defaultBodyMapper","defaultHeadersMapper","parsedError","internalError","code","message","defaultError","operationResponse","opts","errorHandler","err","msg","errCode","PARSE_ERROR","e","Promise","reject","text","contentType","get","contentComponents","split","map","component","toLowerCase","some","indexOf","resolve","JSON","catch","body"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\policies\\deserializationPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { SerializerOptions, XML_CHARKEY } from \"../util/serializer.common\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { MapperType } from \"../serializer\";\nimport { OperationResponse } from \"../operationResponse\";\nimport { OperationSpec } from \"../operationSpec\";\nimport { RestError } from \"../restError\";\nimport { WebResourceLike } from \"../webResource\";\nimport { parseXML } from \"../util/xml\";\n\n/**\n * Options to configure API response deserialization.\n */\nexport interface DeserializationOptions {\n  /**\n   * Configures the expected content types for the deserialization of\n   * JSON and XML response bodies.\n   */\n  expectedContentTypes: DeserializationContentTypes;\n}\n\n/**\n * The content-types that will indicate that an operation response should be deserialized in a\n * particular way.\n */\nexport interface DeserializationContentTypes {\n  /**\n   * The content-types that indicate that an operation response should be deserialized as JSON.\n   * Defaults to [ \"application/json\", \"text/json\" ].\n   */\n  json?: string[];\n\n  /**\n   * The content-types that indicate that an operation response should be deserialized as XML.\n   * Defaults to [ \"application/xml\", \"application/atom+xml\" ].\n   */\n  xml?: string[];\n}\n\n/**\n * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they\n * pass through the HTTP pipeline.\n */\nexport function deserializationPolicy(\n  deserializationContentTypes?: DeserializationContentTypes,\n  parsingOptions?: SerializerOptions\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new DeserializationPolicy(\n        nextPolicy,\n        options,\n        deserializationContentTypes,\n        parsingOptions\n      );\n    },\n  };\n}\n\nexport const defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nexport const defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n\nexport const DefaultDeserializationOptions: DeserializationOptions = {\n  expectedContentTypes: {\n    json: defaultJsonContentTypes,\n    xml: defaultXmlContentTypes,\n  },\n};\n\n/**\n * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the\n * HTTP pipeline.\n */\nexport class DeserializationPolicy extends BaseRequestPolicy {\n  public readonly jsonContentTypes: string[];\n  public readonly xmlContentTypes: string[];\n  public readonly xmlCharKey: string;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    requestPolicyOptions: RequestPolicyOptions,\n    deserializationContentTypes?: DeserializationContentTypes,\n    parsingOptions: SerializerOptions = {}\n  ) {\n    super(nextPolicy, requestPolicyOptions);\n\n    this.jsonContentTypes =\n      (deserializationContentTypes && deserializationContentTypes.json) || defaultJsonContentTypes;\n    this.xmlContentTypes =\n      (deserializationContentTypes && deserializationContentTypes.xml) || defaultXmlContentTypes;\n    this.xmlCharKey = parsingOptions.xmlCharKey ?? XML_CHARKEY;\n  }\n\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request).then((response: HttpOperationResponse) =>\n      deserializeResponseBody(this.jsonContentTypes, this.xmlContentTypes, response, {\n        xmlCharKey: this.xmlCharKey,\n      })\n    );\n  }\n}\n\nfunction getOperationResponse(\n  parsedResponse: HttpOperationResponse\n): undefined | OperationResponse {\n  let result: OperationResponse | undefined;\n  const request: WebResourceLike = parsedResponse.request;\n  const operationSpec: OperationSpec | undefined = request.operationSpec;\n  if (operationSpec) {\n    const operationResponseGetter:\n      | undefined\n      | ((\n          operationSpec: OperationSpec,\n          response: HttpOperationResponse\n        ) => undefined | OperationResponse) = request.operationResponseGetter;\n    if (!operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\n\nfunction shouldDeserializeResponse(parsedResponse: HttpOperationResponse): boolean {\n  const shouldDeserialize: undefined | boolean | ((response: HttpOperationResponse) => boolean) =\n    parsedResponse.request.shouldDeserialize;\n  let result: boolean;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\n\n/**\n * Given a particular set of content types to parse as either JSON or XML, consumes the HTTP response to produce the result object defined by the request's {@link OperationSpec}.\n * @param jsonContentTypes - Response content types to parse the body as JSON.\n * @param xmlContentTypes  - Response content types to parse the body as XML.\n * @param response - HTTP Response from the pipeline.\n * @param options  - Options to the serializer, mostly for configuring the XML parser if needed.\n * @returns A parsed {@link HttpOperationResponse} object that can be returned by the {@link ServiceClient}.\n */\nexport function deserializeResponseBody(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  response: HttpOperationResponse,\n  options: SerializerOptions = {}\n): Promise<HttpOperationResponse> {\n  const updatedOptions: Required<SerializerOptions> = {\n    rootName: options.rootName ?? \"\",\n    includeRoot: options.includeRoot ?? false,\n    xmlCharKey: options.xmlCharKey ?? XML_CHARKEY,\n  };\n  return parse(jsonContentTypes, xmlContentTypes, response, updatedOptions).then(\n    (parsedResponse) => {\n      if (!shouldDeserializeResponse(parsedResponse)) {\n        return parsedResponse;\n      }\n\n      const operationSpec = parsedResponse.request.operationSpec;\n      if (!operationSpec || !operationSpec.responses) {\n        return parsedResponse;\n      }\n\n      const responseSpec = getOperationResponse(parsedResponse);\n\n      const { error, shouldReturnResponse } = handleErrorResponse(\n        parsedResponse,\n        operationSpec,\n        responseSpec\n      );\n      if (error) {\n        throw error;\n      } else if (shouldReturnResponse) {\n        return parsedResponse;\n      }\n\n      // An operation response spec does exist for current status code, so\n      // use it to deserialize the response.\n      if (responseSpec) {\n        if (responseSpec.bodyMapper) {\n          let valueToDeserialize: any = parsedResponse.parsedBody;\n          if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {\n            valueToDeserialize =\n              typeof valueToDeserialize === \"object\"\n                ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName!]\n                : [];\n          }\n          try {\n            parsedResponse.parsedBody = operationSpec.serializer.deserialize(\n              responseSpec.bodyMapper,\n              valueToDeserialize,\n              \"operationRes.parsedBody\",\n              options\n            );\n          } catch (innerError: any) {\n            const restError = new RestError(\n              `Error ${innerError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`,\n              undefined,\n              parsedResponse.status,\n              parsedResponse.request,\n              parsedResponse\n            );\n            throw restError;\n          }\n        } else if (operationSpec.httpMethod === \"HEAD\") {\n          // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n          parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n        }\n\n        if (responseSpec.headersMapper) {\n          parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(\n            responseSpec.headersMapper,\n            parsedResponse.headers.toJson(),\n            \"operationRes.parsedHeaders\",\n            options\n          );\n        }\n      }\n\n      return parsedResponse;\n    }\n  );\n}\n\nfunction isOperationSpecEmpty(operationSpec: OperationSpec): boolean {\n  const expectedStatusCodes = Object.keys(operationSpec.responses);\n  return (\n    expectedStatusCodes.length === 0 ||\n    (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\")\n  );\n}\n\nfunction handleErrorResponse(\n  parsedResponse: HttpOperationResponse,\n  operationSpec: OperationSpec,\n  responseSpec: OperationResponse | undefined\n): { error: RestError | null; shouldReturnResponse: boolean } {\n  const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n  const isExpectedStatusCode: boolean = isOperationSpecEmpty(operationSpec)\n    ? isSuccessByStatus\n    : !!responseSpec;\n\n  if (isExpectedStatusCode) {\n    if (responseSpec) {\n      if (!responseSpec.isError) {\n        return { error: null, shouldReturnResponse: false };\n      }\n    } else {\n      return { error: null, shouldReturnResponse: false };\n    }\n  }\n\n  const errorResponseSpec = responseSpec ?? operationSpec.responses.default;\n  const streaming =\n    parsedResponse.request.streamResponseStatusCodes?.has(parsedResponse.status) ||\n    parsedResponse.request.streamResponseBody;\n  const initialErrorMessage = streaming\n    ? `Unexpected status code: ${parsedResponse.status}`\n    : (parsedResponse.bodyAsText as string);\n\n  const error = new RestError(\n    initialErrorMessage,\n    undefined,\n    parsedResponse.status,\n    parsedResponse.request,\n    parsedResponse\n  );\n\n  // If the item failed but there's no error spec or default spec to deserialize the error,\n  // we should fail so we just throw the parsed response\n  if (!errorResponseSpec) {\n    throw error;\n  }\n\n  const defaultBodyMapper = errorResponseSpec.bodyMapper;\n  const defaultHeadersMapper = errorResponseSpec.headersMapper;\n\n  try {\n    // If error response has a body, try to deserialize it using default body mapper.\n    // Then try to extract error code & message from it\n    if (parsedResponse.parsedBody) {\n      const parsedBody = parsedResponse.parsedBody;\n      let parsedError;\n      if (defaultBodyMapper) {\n        let valueToDeserialize: any = parsedBody;\n        if (operationSpec.isXML && defaultBodyMapper.type.name === MapperType.Sequence) {\n          valueToDeserialize =\n            typeof parsedBody === \"object\" ? parsedBody[defaultBodyMapper.xmlElementName!] : [];\n        }\n        parsedError = operationSpec.serializer.deserialize(\n          defaultBodyMapper,\n          valueToDeserialize,\n          \"error.response.parsedBody\"\n        );\n      }\n\n      const internalError: any = parsedBody.error || parsedError || parsedBody;\n      error.code = internalError.code;\n      if (internalError.message) {\n        error.message = internalError.message;\n      }\n\n      if (defaultBodyMapper) {\n        error.response!.parsedBody = parsedError;\n      }\n    }\n\n    // If error response has headers, try to deserialize it using default header mapper\n    if (parsedResponse.headers && defaultHeadersMapper) {\n      error.response!.parsedHeaders = operationSpec.serializer.deserialize(\n        defaultHeadersMapper,\n        parsedResponse.headers.toJson(),\n        \"operationRes.parsedHeaders\"\n      );\n    }\n  } catch (defaultError: any) {\n    error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n  }\n\n  return { error, shouldReturnResponse: false };\n}\n\nfunction parse(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  operationResponse: HttpOperationResponse,\n  opts: Required<SerializerOptions>\n): Promise<HttpOperationResponse> {\n  const errorHandler = (err: Error & { code: string }): Promise<never> => {\n    const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n    const errCode = err.code || RestError.PARSE_ERROR;\n    const e = new RestError(\n      msg,\n      errCode,\n      operationResponse.status,\n      operationResponse.request,\n      operationResponse\n    );\n    return Promise.reject(e);\n  };\n\n  const streaming =\n    operationResponse.request.streamResponseStatusCodes?.has(operationResponse.status) ||\n    operationResponse.request.streamResponseBody;\n  if (!streaming && operationResponse.bodyAsText) {\n    const text = operationResponse.bodyAsText;\n    const contentType: string = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents: string[] = !contentType\n      ? []\n      : contentType.split(\";\").map((component) => component.toLowerCase());\n    if (\n      contentComponents.length === 0 ||\n      contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)\n    ) {\n      return new Promise<HttpOperationResponse>((resolve) => {\n        operationResponse.parsedBody = JSON.parse(text);\n        resolve(operationResponse);\n      }).catch(errorHandler);\n    } else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n      return parseXML(text, opts)\n        .then((body) => {\n          operationResponse.parsedBody = body;\n          return operationResponse;\n        })\n        .catch(errorHandler);\n    }\n  }\n\n  return Promise.resolve(operationResponse);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}