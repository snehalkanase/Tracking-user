{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { blobToString } from \"./utils/utils.browser\";\nexport function getBodyAsText(_x) {\n  return _getBodyAsText.apply(this, arguments);\n}\nfunction _getBodyAsText() {\n  _getBodyAsText = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(batchResponse) {\n    var blob;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return batchResponse.blobBody;\n        case 2:\n          blob = _context.sent;\n          return _context.abrupt(\"return\", blobToString(blob));\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _getBodyAsText.apply(this, arguments);\n}\nexport function utf8ByteLength(str) {\n  return new Blob([str]).size;\n}","map":{"version":3,"names":["blobToString","getBodyAsText","_x","_getBodyAsText","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","batchResponse","blob","wrap","_callee$","_context","prev","next","blobBody","sent","abrupt","stop","utf8ByteLength","str","Blob","size"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\BatchUtils.browser.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ServiceSubmitBatchResponseModel } from \"./generatedModels\";\nimport { blobToString } from \"./utils/utils.browser\";\n\nexport async function getBodyAsText(\n  batchResponse: ServiceSubmitBatchResponseModel\n): Promise<string> {\n  const blob = (await batchResponse.blobBody) as Blob;\n  return blobToString(blob);\n}\n\nexport function utf8ByteLength(str: string): number {\n  return new Blob([str]).size;\n}\n"],"mappings":";;AAAA;AACA;AAGA,SAASA,YAAY,QAAQ,uBAAuB;AAEpD,gBAAsBC,aAAaA,CAAAC,EAAA;EAAA,OAAAC,cAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAKlC,SAAAF,eAAA;EAAAA,cAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CALM,SAAAC,QACLC,aAA8C;IAAA,IAAAC,IAAA;IAAA,OAAAJ,mBAAA,GAAAK,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA,OAE1BN,aAAa,CAACO,QAAQ;QAAA;UAApCN,IAAI,GAAAG,QAAA,CAAAI,IAAA;UAAA,OAAAJ,QAAA,CAAAK,MAAA,WACHnB,YAAY,CAACW,IAAI,CAAC;QAAA;QAAA;UAAA,OAAAG,QAAA,CAAAM,IAAA;MAAA;IAAA,GAAAX,OAAA;EAAA,CAC1B;EAAA,OAAAN,cAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,OAAM,SAAUgB,cAAcA,CAACC,GAAW;EACxC,OAAO,IAAIC,IAAI,CAAC,CAACD,GAAG,CAAC,CAAC,CAACE,IAAI;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}