{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * When a poller is manually stopped through the `stopPolling` method,\n * the poller will be rejected with an instance of the PollerStoppedError.\n */\nexport var PollerStoppedError = /*#__PURE__*/function (_Error) {\n  _inherits(PollerStoppedError, _Error);\n  var _super = _createSuper(PollerStoppedError);\n  function PollerStoppedError(message) {\n    var _this;\n    _classCallCheck(this, PollerStoppedError);\n    _this = _super.call(this, message);\n    _this.name = \"PollerStoppedError\";\n    Object.setPrototypeOf(_assertThisInitialized(_this), PollerStoppedError.prototype);\n    return _this;\n  }\n  return _createClass(PollerStoppedError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * When the operation is cancelled, the poller will be rejected with an instance\n * of the PollerCancelledError.\n */\nexport var PollerCancelledError = /*#__PURE__*/function (_Error2) {\n  _inherits(PollerCancelledError, _Error2);\n  var _super2 = _createSuper(PollerCancelledError);\n  function PollerCancelledError(message) {\n    var _this2;\n    _classCallCheck(this, PollerCancelledError);\n    _this2 = _super2.call(this, message);\n    _this2.name = \"PollerCancelledError\";\n    Object.setPrototypeOf(_assertThisInitialized(_this2), PollerCancelledError.prototype);\n    return _this2;\n  }\n  return _createClass(PollerCancelledError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * A class that represents the definition of a program that polls through consecutive requests\n * until it reaches a state of completion.\n *\n * A poller can be executed manually, by polling request by request by calling to the `poll()` method repeatedly, until its operation is completed.\n * It also provides a way to wait until the operation completes, by calling `pollUntilDone()` and waiting until the operation finishes.\n * Pollers can also request the cancellation of the ongoing process to whom is providing the underlying long running operation.\n *\n * ```ts\n * const poller = new MyPoller();\n *\n * // Polling just once:\n * await poller.poll();\n *\n * // We can try to cancel the request here, by calling:\n * //\n * //     await poller.cancelOperation();\n * //\n *\n * // Getting the final result:\n * const result = await poller.pollUntilDone();\n * ```\n *\n * The Poller is defined by two types, a type representing the state of the poller, which\n * must include a basic set of properties from `PollOperationState<TResult>`,\n * and a return type defined by `TResult`, which can be anything.\n *\n * The Poller class implements the `PollerLike` interface, which allows poller implementations to avoid having\n * to export the Poller's class directly, and instead only export the already instantiated poller with the PollerLike type.\n *\n * ```ts\n * class Client {\n *   public async makePoller: PollerLike<MyOperationState, MyResult> {\n *     const poller = new MyPoller({});\n *     // It might be preferred to return the poller after the first request is made,\n *     // so that some information can be obtained right away.\n *     await poller.poll();\n *     return poller;\n *   }\n * }\n *\n * const poller: PollerLike<MyOperationState, MyResult> = myClient.makePoller();\n * ```\n *\n * A poller can be created through its constructor, then it can be polled until it's completed.\n * At any point in time, the state of the poller can be obtained without delay through the getOperationState method.\n * At any point in time, the intermediate forms of the result type can be requested without delay.\n * Once the underlying operation is marked as completed, the poller will stop and the final value will be returned.\n *\n * ```ts\n * const poller = myClient.makePoller();\n * const state: MyOperationState = poller.getOperationState();\n *\n * // The intermediate result can be obtained at any time.\n * const result: MyResult | undefined = poller.getResult();\n *\n * // The final result can only be obtained after the poller finishes.\n * const result: MyResult = await poller.pollUntilDone();\n * ```\n *\n */\n// eslint-disable-next-line no-use-before-define\nexport var Poller = /*#__PURE__*/function () {\n  /**\n   * A poller needs to be initialized by passing in at least the basic properties of the `PollOperation<TState, TResult>`.\n   *\n   * When writing an implementation of a Poller, this implementation needs to deal with the initialization\n   * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's\n   * operation has already been defined, at least its basic properties. The code below shows how to approach\n   * the definition of the constructor of a new custom poller.\n   *\n   * ```ts\n   * export class MyPoller extends Poller<MyOperationState, string> {\n   *   constructor({\n   *     // Anything you might need outside of the basics\n   *   }) {\n   *     let state: MyOperationState = {\n   *       privateProperty: private,\n   *       publicProperty: public,\n   *     };\n   *\n   *     const operation = {\n   *       state,\n   *       update,\n   *       cancel,\n   *       toString\n   *     }\n   *\n   *     // Sending the operation to the parent's constructor.\n   *     super(operation);\n   *\n   *     // You can assign more local properties here.\n   *   }\n   * }\n   * ```\n   *\n   * Inside of this constructor, a new promise is created. This will be used to\n   * tell the user when the poller finishes (see `pollUntilDone()`). The promise's\n   * resolve and reject methods are also used internally to control when to resolve\n   * or reject anyone waiting for the poller to finish.\n   *\n   * The constructor of a custom implementation of a poller is where any serialized version of\n   * a previous poller's operation should be deserialized into the operation sent to the\n   * base constructor. For example:\n   *\n   * ```ts\n   * export class MyPoller extends Poller<MyOperationState, string> {\n   *   constructor(\n   *     baseOperation: string | undefined\n   *   ) {\n   *     let state: MyOperationState = {};\n   *     if (baseOperation) {\n   *       state = {\n   *         ...JSON.parse(baseOperation).state,\n   *         ...state\n   *       };\n   *     }\n   *     const operation = {\n   *       state,\n   *       // ...\n   *     }\n   *     super(operation);\n   *   }\n   * }\n   * ```\n   *\n   * @param operation - Must contain the basic properties of `PollOperation<State, TResult>`.\n   */\n  function Poller(operation) {\n    var _this3 = this;\n    _classCallCheck(this, Poller);\n    /** controls whether to throw an error if the operation failed or was canceled. */\n    this.resolveOnUnsuccessful = false;\n    this.stopped = true;\n    this.pollProgressCallbacks = [];\n    this.operation = operation;\n    this.promise = new Promise(function (resolve, reject) {\n      _this3.resolve = resolve;\n      _this3.reject = reject;\n    });\n    // This prevents the UnhandledPromiseRejectionWarning in node.js from being thrown.\n    // The above warning would get thrown if `poller.poll` is called, it returns an error,\n    // and pullUntilDone did not have a .catch or await try/catch on it's return value.\n    this.promise.catch(function () {\n      /* intentionally blank */\n    });\n  }\n  /**\n   * Starts a loop that will break only if the poller is done\n   * or if the poller is stopped.\n   */\n  _createClass(Poller, [{\n    key: \"startPolling\",\n    value: function () {\n      var _startPolling = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var pollOptions,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              pollOptions = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              if (this.stopped) {\n                this.stopped = false;\n              }\n            case 2:\n              if (!(!this.isStopped() && !this.isDone())) {\n                _context.next = 9;\n                break;\n              }\n              _context.next = 5;\n              return this.poll(pollOptions);\n            case 5:\n              _context.next = 7;\n              return this.delay();\n            case 7:\n              _context.next = 2;\n              break;\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function startPolling() {\n        return _startPolling.apply(this, arguments);\n      }\n      return startPolling;\n    }()\n    /**\n     * pollOnce does one polling, by calling to the update method of the underlying\n     * poll operation to make any relevant change effective.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n  }, {\n    key: \"pollOnce\",\n    value: function () {\n      var _pollOnce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var options,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n              if (this.isDone()) {\n                _context2.next = 5;\n                break;\n              }\n              _context2.next = 4;\n              return this.operation.update({\n                abortSignal: options.abortSignal,\n                fireProgress: this.fireProgress.bind(this)\n              });\n            case 4:\n              this.operation = _context2.sent;\n            case 5:\n              this.processUpdatedState();\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function pollOnce() {\n        return _pollOnce.apply(this, arguments);\n      }\n      return pollOnce;\n    }()\n    /**\n     * fireProgress calls the functions passed in via onProgress the method of the poller.\n     *\n     * It loops over all of the callbacks received from onProgress, and executes them, sending them\n     * the current operation state.\n     *\n     * @param state - The current operation state.\n     */\n  }, {\n    key: \"fireProgress\",\n    value: function fireProgress(state) {\n      var _iterator = _createForOfIteratorHelper(this.pollProgressCallbacks),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var callback = _step.value;\n          callback(state);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Invokes the underlying operation's cancel method.\n     */\n  }, {\n    key: \"cancelOnce\",\n    value: function () {\n      var _cancelOnce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var options,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n              _context3.next = 3;\n              return this.operation.cancel(options);\n            case 3:\n              this.operation = _context3.sent;\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function cancelOnce() {\n        return _cancelOnce.apply(this, arguments);\n      }\n      return cancelOnce;\n    }()\n    /**\n     * Returns a promise that will resolve once a single polling request finishes.\n     * It does this by calling the update method of the Poller's operation.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      var _this4 = this;\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (!this.pollOncePromise) {\n        this.pollOncePromise = this.pollOnce(options);\n        var clearPollOncePromise = function clearPollOncePromise() {\n          _this4.pollOncePromise = undefined;\n        };\n        this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);\n      }\n      return this.pollOncePromise;\n    }\n  }, {\n    key: \"processUpdatedState\",\n    value: function processUpdatedState() {\n      if (this.operation.state.error) {\n        this.stopped = true;\n        if (!this.resolveOnUnsuccessful) {\n          this.reject(this.operation.state.error);\n          throw this.operation.state.error;\n        }\n      }\n      if (this.operation.state.isCancelled) {\n        this.stopped = true;\n        if (!this.resolveOnUnsuccessful) {\n          var error = new PollerCancelledError(\"Operation was canceled\");\n          this.reject(error);\n          throw error;\n        }\n      }\n      if (this.isDone() && this.resolve) {\n        // If the poller has finished polling, this means we now have a result.\n        // However, it can be the case that TResult is instantiated to void, so\n        // we are not expecting a result anyway. To assert that we might not\n        // have a result eventually after finishing polling, we cast the result\n        // to TResult.\n        this.resolve(this.getResult());\n      }\n    }\n    /**\n     * Returns a promise that will resolve once the underlying operation is completed.\n     */\n  }, {\n    key: \"pollUntilDone\",\n    value: function () {\n      var _pollUntilDone = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var pollOptions,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              pollOptions = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};\n              if (this.stopped) {\n                this.startPolling(pollOptions).catch(this.reject);\n              }\n              // This is needed because the state could have been updated by\n              // `cancelOperation`, e.g. the operation is canceled or an error occurred.\n              this.processUpdatedState();\n              return _context4.abrupt(\"return\", this.promise);\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function pollUntilDone() {\n        return _pollUntilDone.apply(this, arguments);\n      }\n      return pollUntilDone;\n    }()\n    /**\n     * Invokes the provided callback after each polling is completed,\n     * sending the current state of the poller's operation.\n     *\n     * It returns a method that can be used to stop receiving updates on the given callback function.\n     */\n  }, {\n    key: \"onProgress\",\n    value: function onProgress(callback) {\n      var _this5 = this;\n      this.pollProgressCallbacks.push(callback);\n      return function () {\n        _this5.pollProgressCallbacks = _this5.pollProgressCallbacks.filter(function (c) {\n          return c !== callback;\n        });\n      };\n    }\n    /**\n     * Returns true if the poller has finished polling.\n     */\n  }, {\n    key: \"isDone\",\n    value: function isDone() {\n      var state = this.operation.state;\n      return Boolean(state.isCompleted || state.isCancelled || state.error);\n    }\n    /**\n     * Stops the poller from continuing to poll.\n     */\n  }, {\n    key: \"stopPolling\",\n    value: function stopPolling() {\n      if (!this.stopped) {\n        this.stopped = true;\n        if (this.reject) {\n          this.reject(new PollerStoppedError(\"This poller is already stopped\"));\n        }\n      }\n    }\n    /**\n     * Returns true if the poller is stopped.\n     */\n  }, {\n    key: \"isStopped\",\n    value: function isStopped() {\n      return this.stopped;\n    }\n    /**\n     * Attempts to cancel the underlying operation.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * If it's called again before it finishes, it will throw an error.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n  }, {\n    key: \"cancelOperation\",\n    value: function cancelOperation() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (!this.cancelPromise) {\n        this.cancelPromise = this.cancelOnce(options);\n      } else if (options.abortSignal) {\n        throw new Error(\"A cancel request is currently pending\");\n      }\n      return this.cancelPromise;\n    }\n    /**\n     * Returns the state of the operation.\n     *\n     * Even though TState will be the same type inside any of the methods of any extension of the Poller class,\n     * implementations of the pollers can customize what's shared with the public by writing their own\n     * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller\n     * and a public type representing a safe to share subset of the properties of the internal state.\n     * Their definition of getOperationState can then return their public type.\n     *\n     * Example:\n     *\n     * ```ts\n     * // Let's say we have our poller's operation state defined as:\n     * interface MyOperationState extends PollOperationState<ResultType> {\n     *   privateProperty?: string;\n     *   publicProperty?: string;\n     * }\n     *\n     * // To allow us to have a true separation of public and private state, we have to define another interface:\n     * interface PublicState extends PollOperationState<ResultType> {\n     *   publicProperty?: string;\n     * }\n     *\n     * // Then, we define our Poller as follows:\n     * export class MyPoller extends Poller<MyOperationState, ResultType> {\n     *   // ... More content is needed here ...\n     *\n     *   public getOperationState(): PublicState {\n     *     const state: PublicState = this.operation.state;\n     *     return {\n     *       // Properties from PollOperationState<TResult>\n     *       isStarted: state.isStarted,\n     *       isCompleted: state.isCompleted,\n     *       isCancelled: state.isCancelled,\n     *       error: state.error,\n     *       result: state.result,\n     *\n     *       // The only other property needed by PublicState.\n     *       publicProperty: state.publicProperty\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * You can see this in the tests of this repository, go to the file:\n     * `../test/utils/testPoller.ts`\n     * and look for the getOperationState implementation.\n     */\n  }, {\n    key: \"getOperationState\",\n    value: function getOperationState() {\n      return this.operation.state;\n    }\n    /**\n     * Returns the result value of the operation,\n     * regardless of the state of the poller.\n     * It can return undefined or an incomplete form of the final TResult value\n     * depending on the implementation.\n     */\n  }, {\n    key: \"getResult\",\n    value: function getResult() {\n      var state = this.operation.state;\n      return state.result;\n    }\n    /**\n     * Returns a serialized version of the poller's operation\n     * by invoking the operation's toString method.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.operation.toString();\n    }\n  }]);\n  return Poller;\n}();","map":{"version":3,"names":["PollerStoppedError","_Error","_inherits","_super","_createSuper","message","_this","_classCallCheck","call","name","Object","setPrototypeOf","_assertThisInitialized","prototype","_createClass","_wrapNativeSuper","Error","PollerCancelledError","_Error2","_super2","_this2","Poller","operation","_this3","resolveOnUnsuccessful","stopped","pollProgressCallbacks","promise","Promise","resolve","reject","catch","key","value","_startPolling","_asyncToGenerator","_regeneratorRuntime","mark","_callee","pollOptions","_args","arguments","wrap","_callee$","_context","prev","next","length","undefined","isStopped","isDone","poll","delay","stop","startPolling","apply","_pollOnce","_callee2","options","_args2","_callee2$","_context2","update","abortSignal","fireProgress","bind","sent","processUpdatedState","pollOnce","state","_iterator","_createForOfIteratorHelper","_step","s","n","done","callback","err","e","f","_cancelOnce","_callee3","_args3","_callee3$","_context3","cancel","cancelOnce","_this4","pollOncePromise","clearPollOncePromise","then","error","isCancelled","getResult","_pollUntilDone","_callee4","_args4","_callee4$","_context4","abrupt","pollUntilDone","onProgress","_this5","push","filter","c","Boolean","isCompleted","stopPolling","cancelOperation","cancelPromise","getOperationState","result","toString"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-lro\\src\\legacy\\poller.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PollOperation, PollOperationState } from \"./pollOperation\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { CancelOnProgress } from \"../poller/models\";\nimport { PollerLike } from \"./models\";\n\n/**\n * PollProgressCallback<TState> is the type of the callback functions sent to onProgress.\n * These functions will receive a TState that is defined by your implementation of\n * the Poller class.\n */\nexport type PollProgressCallback<TState> = (state: TState) => void;\n\n/**\n * When a poller is manually stopped through the `stopPolling` method,\n * the poller will be rejected with an instance of the PollerStoppedError.\n */\nexport class PollerStoppedError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"PollerStoppedError\";\n    Object.setPrototypeOf(this, PollerStoppedError.prototype);\n  }\n}\n\n/**\n * When the operation is cancelled, the poller will be rejected with an instance\n * of the PollerCancelledError.\n */\nexport class PollerCancelledError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"PollerCancelledError\";\n    Object.setPrototypeOf(this, PollerCancelledError.prototype);\n  }\n}\n\n/**\n * A class that represents the definition of a program that polls through consecutive requests\n * until it reaches a state of completion.\n *\n * A poller can be executed manually, by polling request by request by calling to the `poll()` method repeatedly, until its operation is completed.\n * It also provides a way to wait until the operation completes, by calling `pollUntilDone()` and waiting until the operation finishes.\n * Pollers can also request the cancellation of the ongoing process to whom is providing the underlying long running operation.\n *\n * ```ts\n * const poller = new MyPoller();\n *\n * // Polling just once:\n * await poller.poll();\n *\n * // We can try to cancel the request here, by calling:\n * //\n * //     await poller.cancelOperation();\n * //\n *\n * // Getting the final result:\n * const result = await poller.pollUntilDone();\n * ```\n *\n * The Poller is defined by two types, a type representing the state of the poller, which\n * must include a basic set of properties from `PollOperationState<TResult>`,\n * and a return type defined by `TResult`, which can be anything.\n *\n * The Poller class implements the `PollerLike` interface, which allows poller implementations to avoid having\n * to export the Poller's class directly, and instead only export the already instantiated poller with the PollerLike type.\n *\n * ```ts\n * class Client {\n *   public async makePoller: PollerLike<MyOperationState, MyResult> {\n *     const poller = new MyPoller({});\n *     // It might be preferred to return the poller after the first request is made,\n *     // so that some information can be obtained right away.\n *     await poller.poll();\n *     return poller;\n *   }\n * }\n *\n * const poller: PollerLike<MyOperationState, MyResult> = myClient.makePoller();\n * ```\n *\n * A poller can be created through its constructor, then it can be polled until it's completed.\n * At any point in time, the state of the poller can be obtained without delay through the getOperationState method.\n * At any point in time, the intermediate forms of the result type can be requested without delay.\n * Once the underlying operation is marked as completed, the poller will stop and the final value will be returned.\n *\n * ```ts\n * const poller = myClient.makePoller();\n * const state: MyOperationState = poller.getOperationState();\n *\n * // The intermediate result can be obtained at any time.\n * const result: MyResult | undefined = poller.getResult();\n *\n * // The final result can only be obtained after the poller finishes.\n * const result: MyResult = await poller.pollUntilDone();\n * ```\n *\n */\n// eslint-disable-next-line no-use-before-define\nexport abstract class Poller<TState extends PollOperationState<TResult>, TResult>\n  implements PollerLike<TState, TResult>\n{\n  /** controls whether to throw an error if the operation failed or was canceled. */\n  protected resolveOnUnsuccessful: boolean = false;\n  private stopped: boolean = true;\n  private resolve?: (value: TResult) => void;\n  private reject?: (error: PollerStoppedError | PollerCancelledError | Error) => void;\n  private pollOncePromise?: Promise<void>;\n  private cancelPromise?: Promise<void>;\n  private promise: Promise<TResult>;\n  private pollProgressCallbacks: PollProgressCallback<TState>[] = [];\n\n  /**\n   * The poller's operation is available in full to any of the methods of the Poller class\n   * and any class extending the Poller class.\n   */\n  protected operation: PollOperation<TState, TResult>;\n\n  /**\n   * A poller needs to be initialized by passing in at least the basic properties of the `PollOperation<TState, TResult>`.\n   *\n   * When writing an implementation of a Poller, this implementation needs to deal with the initialization\n   * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's\n   * operation has already been defined, at least its basic properties. The code below shows how to approach\n   * the definition of the constructor of a new custom poller.\n   *\n   * ```ts\n   * export class MyPoller extends Poller<MyOperationState, string> {\n   *   constructor({\n   *     // Anything you might need outside of the basics\n   *   }) {\n   *     let state: MyOperationState = {\n   *       privateProperty: private,\n   *       publicProperty: public,\n   *     };\n   *\n   *     const operation = {\n   *       state,\n   *       update,\n   *       cancel,\n   *       toString\n   *     }\n   *\n   *     // Sending the operation to the parent's constructor.\n   *     super(operation);\n   *\n   *     // You can assign more local properties here.\n   *   }\n   * }\n   * ```\n   *\n   * Inside of this constructor, a new promise is created. This will be used to\n   * tell the user when the poller finishes (see `pollUntilDone()`). The promise's\n   * resolve and reject methods are also used internally to control when to resolve\n   * or reject anyone waiting for the poller to finish.\n   *\n   * The constructor of a custom implementation of a poller is where any serialized version of\n   * a previous poller's operation should be deserialized into the operation sent to the\n   * base constructor. For example:\n   *\n   * ```ts\n   * export class MyPoller extends Poller<MyOperationState, string> {\n   *   constructor(\n   *     baseOperation: string | undefined\n   *   ) {\n   *     let state: MyOperationState = {};\n   *     if (baseOperation) {\n   *       state = {\n   *         ...JSON.parse(baseOperation).state,\n   *         ...state\n   *       };\n   *     }\n   *     const operation = {\n   *       state,\n   *       // ...\n   *     }\n   *     super(operation);\n   *   }\n   * }\n   * ```\n   *\n   * @param operation - Must contain the basic properties of `PollOperation<State, TResult>`.\n   */\n  constructor(operation: PollOperation<TState, TResult>) {\n    this.operation = operation;\n    this.promise = new Promise<TResult>(\n      (\n        resolve: (result: TResult) => void,\n        reject: (error: PollerStoppedError | PollerCancelledError | Error) => void\n      ) => {\n        this.resolve = resolve;\n        this.reject = reject;\n      }\n    );\n    // This prevents the UnhandledPromiseRejectionWarning in node.js from being thrown.\n    // The above warning would get thrown if `poller.poll` is called, it returns an error,\n    // and pullUntilDone did not have a .catch or await try/catch on it's return value.\n    this.promise.catch(() => {\n      /* intentionally blank */\n    });\n  }\n\n  /**\n   * Defines how much to wait between each poll request.\n   * This has to be implemented by your custom poller.\n   *\n   * \\@azure/core-util has a simple implementation of a delay function that waits as many milliseconds as specified.\n   * This can be used as follows:\n   *\n   * ```ts\n   * import { delay } from \"@azure/core-util\";\n   *\n   * export class MyPoller extends Poller<MyOperationState, string> {\n   *   // The other necessary definitions.\n   *\n   *   async delay(): Promise<void> {\n   *     const milliseconds = 1000;\n   *     return delay(milliseconds);\n   *   }\n   * }\n   * ```\n   *\n   */\n  protected abstract delay(): Promise<void>;\n\n  /**\n   * Starts a loop that will break only if the poller is done\n   * or if the poller is stopped.\n   */\n  private async startPolling(pollOptions: { abortSignal?: AbortSignalLike } = {}): Promise<void> {\n    if (this.stopped) {\n      this.stopped = false;\n    }\n    while (!this.isStopped() && !this.isDone()) {\n      await this.poll(pollOptions);\n      await this.delay();\n    }\n  }\n\n  /**\n   * pollOnce does one polling, by calling to the update method of the underlying\n   * poll operation to make any relevant change effective.\n   *\n   * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n   *\n   * @param options - Optional properties passed to the operation's update method.\n   */\n  private async pollOnce(options: { abortSignal?: AbortSignalLike } = {}): Promise<void> {\n    if (!this.isDone()) {\n      this.operation = await this.operation.update({\n        abortSignal: options.abortSignal,\n        fireProgress: this.fireProgress.bind(this),\n      });\n    }\n    this.processUpdatedState();\n  }\n\n  /**\n   * fireProgress calls the functions passed in via onProgress the method of the poller.\n   *\n   * It loops over all of the callbacks received from onProgress, and executes them, sending them\n   * the current operation state.\n   *\n   * @param state - The current operation state.\n   */\n  private fireProgress(state: TState): void {\n    for (const callback of this.pollProgressCallbacks) {\n      callback(state);\n    }\n  }\n\n  /**\n   * Invokes the underlying operation's cancel method.\n   */\n  private async cancelOnce(options: { abortSignal?: AbortSignalLike } = {}): Promise<void> {\n    this.operation = await this.operation.cancel(options);\n  }\n\n  /**\n   * Returns a promise that will resolve once a single polling request finishes.\n   * It does this by calling the update method of the Poller's operation.\n   *\n   * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n   *\n   * @param options - Optional properties passed to the operation's update method.\n   */\n  public poll(options: { abortSignal?: AbortSignalLike } = {}): Promise<void> {\n    if (!this.pollOncePromise) {\n      this.pollOncePromise = this.pollOnce(options);\n      const clearPollOncePromise = (): void => {\n        this.pollOncePromise = undefined;\n      };\n      this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);\n    }\n    return this.pollOncePromise;\n  }\n\n  private processUpdatedState(): void {\n    if (this.operation.state.error) {\n      this.stopped = true;\n      if (!this.resolveOnUnsuccessful) {\n        this.reject!(this.operation.state.error);\n        throw this.operation.state.error;\n      }\n    }\n    if (this.operation.state.isCancelled) {\n      this.stopped = true;\n      if (!this.resolveOnUnsuccessful) {\n        const error = new PollerCancelledError(\"Operation was canceled\");\n        this.reject!(error);\n        throw error;\n      }\n    }\n    if (this.isDone() && this.resolve) {\n      // If the poller has finished polling, this means we now have a result.\n      // However, it can be the case that TResult is instantiated to void, so\n      // we are not expecting a result anyway. To assert that we might not\n      // have a result eventually after finishing polling, we cast the result\n      // to TResult.\n      this.resolve(this.getResult() as TResult);\n    }\n  }\n\n  /**\n   * Returns a promise that will resolve once the underlying operation is completed.\n   */\n  public async pollUntilDone(\n    pollOptions: { abortSignal?: AbortSignalLike } = {}\n  ): Promise<TResult> {\n    if (this.stopped) {\n      this.startPolling(pollOptions).catch(this.reject);\n    }\n    // This is needed because the state could have been updated by\n    // `cancelOperation`, e.g. the operation is canceled or an error occurred.\n    this.processUpdatedState();\n    return this.promise;\n  }\n\n  /**\n   * Invokes the provided callback after each polling is completed,\n   * sending the current state of the poller's operation.\n   *\n   * It returns a method that can be used to stop receiving updates on the given callback function.\n   */\n  public onProgress(callback: (state: TState) => void): CancelOnProgress {\n    this.pollProgressCallbacks.push(callback);\n    return (): void => {\n      this.pollProgressCallbacks = this.pollProgressCallbacks.filter((c) => c !== callback);\n    };\n  }\n\n  /**\n   * Returns true if the poller has finished polling.\n   */\n  public isDone(): boolean {\n    const state: PollOperationState<TResult> = this.operation.state;\n    return Boolean(state.isCompleted || state.isCancelled || state.error);\n  }\n\n  /**\n   * Stops the poller from continuing to poll.\n   */\n  public stopPolling(): void {\n    if (!this.stopped) {\n      this.stopped = true;\n      if (this.reject) {\n        this.reject(new PollerStoppedError(\"This poller is already stopped\"));\n      }\n    }\n  }\n\n  /**\n   * Returns true if the poller is stopped.\n   */\n  public isStopped(): boolean {\n    return this.stopped;\n  }\n\n  /**\n   * Attempts to cancel the underlying operation.\n   *\n   * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n   *\n   * If it's called again before it finishes, it will throw an error.\n   *\n   * @param options - Optional properties passed to the operation's update method.\n   */\n  public cancelOperation(options: { abortSignal?: AbortSignalLike } = {}): Promise<void> {\n    if (!this.cancelPromise) {\n      this.cancelPromise = this.cancelOnce(options);\n    } else if (options.abortSignal) {\n      throw new Error(\"A cancel request is currently pending\");\n    }\n    return this.cancelPromise;\n  }\n\n  /**\n   * Returns the state of the operation.\n   *\n   * Even though TState will be the same type inside any of the methods of any extension of the Poller class,\n   * implementations of the pollers can customize what's shared with the public by writing their own\n   * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller\n   * and a public type representing a safe to share subset of the properties of the internal state.\n   * Their definition of getOperationState can then return their public type.\n   *\n   * Example:\n   *\n   * ```ts\n   * // Let's say we have our poller's operation state defined as:\n   * interface MyOperationState extends PollOperationState<ResultType> {\n   *   privateProperty?: string;\n   *   publicProperty?: string;\n   * }\n   *\n   * // To allow us to have a true separation of public and private state, we have to define another interface:\n   * interface PublicState extends PollOperationState<ResultType> {\n   *   publicProperty?: string;\n   * }\n   *\n   * // Then, we define our Poller as follows:\n   * export class MyPoller extends Poller<MyOperationState, ResultType> {\n   *   // ... More content is needed here ...\n   *\n   *   public getOperationState(): PublicState {\n   *     const state: PublicState = this.operation.state;\n   *     return {\n   *       // Properties from PollOperationState<TResult>\n   *       isStarted: state.isStarted,\n   *       isCompleted: state.isCompleted,\n   *       isCancelled: state.isCancelled,\n   *       error: state.error,\n   *       result: state.result,\n   *\n   *       // The only other property needed by PublicState.\n   *       publicProperty: state.publicProperty\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * You can see this in the tests of this repository, go to the file:\n   * `../test/utils/testPoller.ts`\n   * and look for the getOperationState implementation.\n   */\n  public getOperationState(): TState {\n    return this.operation.state;\n  }\n\n  /**\n   * Returns the result value of the operation,\n   * regardless of the state of the poller.\n   * It can return undefined or an incomplete form of the final TResult value\n   * depending on the implementation.\n   */\n  public getResult(): TResult | undefined {\n    const state: PollOperationState<TResult> = this.operation.state;\n    return state.result;\n  }\n\n  /**\n   * Returns a serialized version of the poller's operation\n   * by invoking the operation's toString method.\n   */\n  public toString(): string {\n    return this.operation.toString();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}