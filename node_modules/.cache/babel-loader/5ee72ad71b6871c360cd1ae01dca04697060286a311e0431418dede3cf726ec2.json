{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport * as utils from \"../util/utils\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { delay } from \"@azure/core-util\";\nexport function rpRegistrationPolicy() {\n  var retryTimeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;\n  return {\n    create: function create(nextPolicy, options) {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    }\n  };\n}\nexport var RPRegistrationPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {\n  _inherits(RPRegistrationPolicy, _BaseRequestPolicy);\n  var _super = _createSuper(RPRegistrationPolicy);\n  function RPRegistrationPolicy(nextPolicy, options) {\n    var _this;\n    var _retryTimeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;\n    _classCallCheck(this, RPRegistrationPolicy);\n    _this = _super.call(this, nextPolicy, options);\n    _this._retryTimeout = _retryTimeout;\n    return _this;\n  }\n  _createClass(RPRegistrationPolicy, [{\n    key: \"sendRequest\",\n    value: function sendRequest(request) {\n      var _this2 = this;\n      return this._nextPolicy.sendRequest(request.clone()).then(function (response) {\n        return registerIfNeeded(_this2, request, response);\n      });\n    }\n  }]);\n  return RPRegistrationPolicy;\n}(BaseRequestPolicy);\nfunction registerIfNeeded(policy, request, response) {\n  if (response.status === 409) {\n    var rpName = checkRPNotRegisteredError(response.bodyAsText);\n    if (rpName) {\n      var urlPrefix = extractSubscriptionUrl(request.url);\n      return registerRP(policy, urlPrefix, rpName, request)\n      // Autoregistration of ${provider} failed for some reason. We will not return this error\n      // instead will return the initial response with 409 status code back to the user.\n      // do nothing here as we are returning the original response at the end of this method.\n      .catch(function () {\n        return false;\n      }).then(function (registrationStatus) {\n        if (registrationStatus) {\n          // Retry the original request. We have to change the x-ms-client-request-id\n          // otherwise Azure endpoint will return the initial 409 (cached) response.\n          request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n          return policy._nextPolicy.sendRequest(request.clone());\n        }\n        return response;\n      });\n    }\n  }\n  return Promise.resolve(response);\n}\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param originalRequest - The original request\n * @param reuseUrlToo - Should the url from the original request be reused as well. Default false.\n * @returns A new request object with desired headers.\n */\nfunction getRequestEssentials(originalRequest) {\n  var reuseUrlToo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var reqOptions = originalRequest.clone();\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  }\n  // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n  // Set content-type to application/json\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  return reqOptions;\n}\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param body - The response body received after making the original request.\n * @returns The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body) {\n  var result, responseBody;\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err) {\n      // do nothing;\n    }\n    if (responseBody && responseBody.error && responseBody.error.message && responseBody.error.code && responseBody.error.code === \"MissingSubscriptionRegistration\") {\n      var matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n  return result;\n}\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param url - The original request url\n * @returns The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url) {\n  var result;\n  var matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//gi);\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(\"Unable to extract subscriptionId from the given url - \".concat(url, \".\"));\n  }\n  return result;\n}\n/**\n * Registers the given provider.\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param urlPrefix - https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param provider - The provider name to be registered.\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n */\nfunction registerRP(_x, _x2, _x3, _x4) {\n  return _registerRP.apply(this, arguments);\n}\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param url - The request url for polling\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns True if RP Registration is successful.\n */\nfunction _registerRP() {\n  _registerRP = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(policy, urlPrefix, provider, originalRequest) {\n    var postUrl, getUrl, reqOptions, response;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          postUrl = \"\".concat(urlPrefix, \"providers/\").concat(provider, \"/register?api-version=2016-02-01\");\n          getUrl = \"\".concat(urlPrefix, \"providers/\").concat(provider, \"?api-version=2016-02-01\");\n          reqOptions = getRequestEssentials(originalRequest);\n          reqOptions.method = \"POST\";\n          reqOptions.url = postUrl;\n          _context.next = 7;\n          return policy._nextPolicy.sendRequest(reqOptions);\n        case 7:\n          response = _context.sent;\n          if (!(response.status !== 200)) {\n            _context.next = 10;\n            break;\n          }\n          throw new Error(\"Autoregistration of \".concat(provider, \" failed. Please try registering manually.\"));\n        case 10:\n          return _context.abrupt(\"return\", getRegistrationStatus(policy, getUrl, originalRequest));\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _registerRP.apply(this, arguments);\n}\nfunction getRegistrationStatus(_x5, _x6, _x7) {\n  return _getRegistrationStatus.apply(this, arguments);\n}\nfunction _getRegistrationStatus() {\n  _getRegistrationStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(policy, url, originalRequest) {\n    var reqOptions, res, obj;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          reqOptions = getRequestEssentials(originalRequest);\n          reqOptions.url = url;\n          reqOptions.method = \"GET\";\n          _context2.next = 5;\n          return policy._nextPolicy.sendRequest(reqOptions);\n        case 5:\n          res = _context2.sent;\n          obj = res.parsedBody;\n          if (!(res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\")) {\n            _context2.next = 11;\n            break;\n          }\n          return _context2.abrupt(\"return\", true);\n        case 11:\n          _context2.next = 13;\n          return delay(policy._retryTimeout * 1000);\n        case 13:\n          return _context2.abrupt(\"return\", getRegistrationStatus(policy, url, originalRequest));\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _getRegistrationStatus.apply(this, arguments);\n}","map":{"version":3,"names":["utils","BaseRequestPolicy","delay","rpRegistrationPolicy","retryTimeout","arguments","length","undefined","create","nextPolicy","options","RPRegistrationPolicy","_BaseRequestPolicy","_inherits","_super","_createSuper","_this","_retryTimeout","_classCallCheck","call","_createClass","key","value","sendRequest","request","_this2","_nextPolicy","clone","then","response","registerIfNeeded","policy","status","rpName","checkRPNotRegisteredError","bodyAsText","urlPrefix","extractSubscriptionUrl","url","registerRP","catch","registrationStatus","headers","set","generateUuid","Promise","resolve","getRequestEssentials","originalRequest","reuseUrlToo","reqOptions","body","result","responseBody","JSON","parse","err","error","message","code","matchRes","match","pop","Error","concat","_x","_x2","_x3","_x4","_registerRP","apply","_asyncToGenerator","_regeneratorRuntime","mark","_callee","provider","postUrl","getUrl","wrap","_callee$","_context","prev","next","method","sent","abrupt","getRegistrationStatus","stop","_x5","_x6","_x7","_getRegistrationStatus","_callee2","res","obj","_callee2$","_context2","parsedBody","registrationState"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-http\\src\\policies\\rpRegistrationPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as utils from \"../util/utils\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport { delay } from \"@azure/core-util\";\n\nexport function rpRegistrationPolicy(retryTimeout = 30): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    },\n  };\n}\n\nexport class RPRegistrationPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    readonly _retryTimeout = 30\n  ) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .then((response) => registerIfNeeded(this, request, response));\n  }\n}\n\nfunction registerIfNeeded(\n  policy: RPRegistrationPolicy,\n  request: WebResourceLike,\n  response: HttpOperationResponse\n): Promise<HttpOperationResponse> {\n  if (response.status === 409) {\n    const rpName = checkRPNotRegisteredError(response.bodyAsText as string);\n    if (rpName) {\n      const urlPrefix = extractSubscriptionUrl(request.url);\n      return (\n        registerRP(policy, urlPrefix, rpName, request)\n          // Autoregistration of ${provider} failed for some reason. We will not return this error\n          // instead will return the initial response with 409 status code back to the user.\n          // do nothing here as we are returning the original response at the end of this method.\n          .catch(() => false)\n          .then((registrationStatus) => {\n            if (registrationStatus) {\n              // Retry the original request. We have to change the x-ms-client-request-id\n              // otherwise Azure endpoint will return the initial 409 (cached) response.\n              request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n              return policy._nextPolicy.sendRequest(request.clone());\n            }\n            return response;\n          })\n      );\n    }\n  }\n\n  return Promise.resolve(response);\n}\n\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param originalRequest - The original request\n * @param reuseUrlToo - Should the url from the original request be reused as well. Default false.\n * @returns A new request object with desired headers.\n */\nfunction getRequestEssentials(\n  originalRequest: WebResourceLike,\n  reuseUrlToo = false\n): WebResourceLike {\n  const reqOptions: WebResourceLike = originalRequest.clone();\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  }\n\n  // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n\n  // Set content-type to application/json\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n\n  return reqOptions;\n}\n\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param body - The response body received after making the original request.\n * @returns The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body: string): string {\n  let result, responseBody;\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err: any) {\n      // do nothing;\n    }\n    if (\n      responseBody &&\n      responseBody.error &&\n      responseBody.error.message &&\n      responseBody.error.code &&\n      responseBody.error.code === \"MissingSubscriptionRegistration\"\n    ) {\n      const matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param url - The original request url\n * @returns The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url: string): string {\n  let result;\n  const matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//gi);\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(`Unable to extract subscriptionId from the given url - ${url}.`);\n  }\n  return result;\n}\n\n/**\n * Registers the given provider.\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param urlPrefix - https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param provider - The provider name to be registered.\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n */\nasync function registerRP(\n  policy: RPRegistrationPolicy,\n  urlPrefix: string,\n  provider: string,\n  originalRequest: WebResourceLike\n): Promise<boolean> {\n  const postUrl = `${urlPrefix}providers/${provider}/register?api-version=2016-02-01`;\n  const getUrl = `${urlPrefix}providers/${provider}?api-version=2016-02-01`;\n  const reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.method = \"POST\";\n  reqOptions.url = postUrl;\n\n  const response = await policy._nextPolicy.sendRequest(reqOptions);\n  if (response.status !== 200) {\n    throw new Error(`Autoregistration of ${provider} failed. Please try registering manually.`);\n  }\n  return getRegistrationStatus(policy, getUrl, originalRequest);\n}\n\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param url - The request url for polling\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns True if RP Registration is successful.\n */\nasync function getRegistrationStatus(\n  policy: RPRegistrationPolicy,\n  url: string,\n  originalRequest: WebResourceLike\n): Promise<boolean> {\n  const reqOptions: any = getRequestEssentials(originalRequest);\n  reqOptions.url = url;\n  reqOptions.method = \"GET\";\n\n  const res = await policy._nextPolicy.sendRequest(reqOptions);\n  const obj = res.parsedBody;\n  if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n    return true;\n  } else {\n    await delay(policy._retryTimeout * 1000);\n    return getRegistrationStatus(policy, url, originalRequest);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}