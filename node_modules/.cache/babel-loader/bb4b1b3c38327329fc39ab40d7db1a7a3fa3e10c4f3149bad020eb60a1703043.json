{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { escapeURLPath, getURLScheme, iEqual, getAccountNameFromUrl } from \"./utils/utils.common\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { isTokenCredential, isNode } from \"@azure/core-http\";\n/**\n * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}\n * and etc.\n */\nexport class StorageClient {\n  /**\n   * Creates an instance of StorageClient.\n   * @param url - url to resource\n   * @param pipeline - request policy pipeline.\n   */\n  constructor(url, pipeline) {\n    // URL should be encoded and only once, protocol layer shouldn't encode URL again\n    this.url = escapeURLPath(url);\n    this.accountName = getAccountNameFromUrl(url);\n    this.pipeline = pipeline;\n    this.storageClientContext = new StorageClientContext(this.url, pipeline.toServiceClientOptions());\n    this.isHttps = iEqual(getURLScheme(this.url) || \"\", \"https\");\n    this.credential = new AnonymousCredential();\n    for (const factory of this.pipeline.factories) {\n      if (isNode && factory instanceof StorageSharedKeyCredential || factory instanceof AnonymousCredential) {\n        this.credential = factory;\n      } else if (isTokenCredential(factory.credential)) {\n        // Only works if the factory has been attached a \"credential\" property.\n        // We do that in newPipeline() when using TokenCredential.\n        this.credential = factory.credential;\n      }\n    }\n    // Override protocol layer's default content-type\n    const storageClientContext = this.storageClientContext;\n    storageClientContext.requestContentType = undefined;\n  }\n}","map":{"version":3,"names":["StorageClientContext","escapeURLPath","getURLScheme","iEqual","getAccountNameFromUrl","AnonymousCredential","StorageSharedKeyCredential","isTokenCredential","isNode","StorageClient","constructor","url","pipeline","accountName","storageClientContext","toServiceClientOptions","isHttps","credential","factory","factories","requestContentType","undefined"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\StorageClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { PipelineLike } from \"./Pipeline\";\nimport { escapeURLPath, getURLScheme, iEqual, getAccountNameFromUrl } from \"./utils/utils.common\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { TokenCredential, isTokenCredential, isNode } from \"@azure/core-http\";\nimport { OperationTracingOptions } from \"@azure/core-tracing\";\n\n/**\n * An interface for options common to every remote operation.\n */\nexport interface CommonOptions {\n  /**\n   * Options to configure spans created when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n}\n\n/**\n * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}\n * and etc.\n */\nexport abstract class StorageClient {\n  /**\n   * Encoded URL string value.\n   */\n  public readonly url: string;\n  public readonly accountName: string;\n  /**\n   * Request policy pipeline.\n   *\n   * @internal\n   */\n  protected readonly pipeline: PipelineLike;\n  /**\n   * Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   */\n  public readonly credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential;\n  /**\n   * StorageClient is a reference to protocol layer operations entry, which is\n   * generated by AutoRest generator.\n   */\n  protected readonly storageClientContext: StorageClientContext;\n  /**\n   */\n  protected readonly isHttps: boolean;\n\n  /**\n   * Creates an instance of StorageClient.\n   * @param url - url to resource\n   * @param pipeline - request policy pipeline.\n   */\n  protected constructor(url: string, pipeline: PipelineLike) {\n    // URL should be encoded and only once, protocol layer shouldn't encode URL again\n    this.url = escapeURLPath(url);\n    this.accountName = getAccountNameFromUrl(url);\n    this.pipeline = pipeline;\n    this.storageClientContext = new StorageClientContext(\n      this.url,\n      pipeline.toServiceClientOptions()\n    );\n\n    this.isHttps = iEqual(getURLScheme(this.url) || \"\", \"https\");\n\n    this.credential = new AnonymousCredential();\n    for (const factory of this.pipeline.factories) {\n      if (\n        (isNode && factory instanceof StorageSharedKeyCredential) ||\n        factory instanceof AnonymousCredential\n      ) {\n        this.credential = factory;\n      } else if (isTokenCredential((factory as any).credential)) {\n        // Only works if the factory has been attached a \"credential\" property.\n        // We do that in newPipeline() when using TokenCredential.\n        this.credential = (factory as any).credential;\n      }\n    }\n\n    // Override protocol layer's default content-type\n    const storageClientContext = this.storageClientContext as any;\n    storageClientContext.requestContentType = undefined;\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,oBAAoB,QAAQ,sCAAsC;AAE3E,SAASC,aAAa,EAAEC,YAAY,EAAEC,MAAM,EAAEC,qBAAqB,QAAQ,sBAAsB;AACjG,SAASC,mBAAmB,QAAQ,mCAAmC;AACvE,SAASC,0BAA0B,QAAQ,0CAA0C;AACrF,SAA0BC,iBAAiB,EAAEC,MAAM,QAAQ,kBAAkB;AAa7E;;;;AAIA,OAAM,MAAgBC,aAAa;EAyBjC;;;;;EAKAC,YAAsBC,GAAW,EAAEC,QAAsB;IACvD;IACA,IAAI,CAACD,GAAG,GAAGV,aAAa,CAACU,GAAG,CAAC;IAC7B,IAAI,CAACE,WAAW,GAAGT,qBAAqB,CAACO,GAAG,CAAC;IAC7C,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,oBAAoB,GAAG,IAAId,oBAAoB,CAClD,IAAI,CAACW,GAAG,EACRC,QAAQ,CAACG,sBAAsB,EAAE,CAClC;IAED,IAAI,CAACC,OAAO,GAAGb,MAAM,CAACD,YAAY,CAAC,IAAI,CAACS,GAAG,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC;IAE5D,IAAI,CAACM,UAAU,GAAG,IAAIZ,mBAAmB,EAAE;IAC3C,KAAK,MAAMa,OAAO,IAAI,IAAI,CAACN,QAAQ,CAACO,SAAS,EAAE;MAC7C,IACGX,MAAM,IAAIU,OAAO,YAAYZ,0BAA0B,IACxDY,OAAO,YAAYb,mBAAmB,EACtC;QACA,IAAI,CAACY,UAAU,GAAGC,OAAO;OAC1B,MAAM,IAAIX,iBAAiB,CAAEW,OAAe,CAACD,UAAU,CAAC,EAAE;QACzD;QACA;QACA,IAAI,CAACA,UAAU,GAAIC,OAAe,CAACD,UAAU;;;IAIjD;IACA,MAAMH,oBAAoB,GAAG,IAAI,CAACA,oBAA2B;IAC7DA,oBAAoB,CAACM,kBAAkB,GAAGC,SAAS;EACrD"},"metadata":{},"sourceType":"module","externalDependencies":[]}