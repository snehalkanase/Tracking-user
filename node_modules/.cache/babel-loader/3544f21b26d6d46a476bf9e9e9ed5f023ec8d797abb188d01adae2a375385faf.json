{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isNode } from \"@azure/core-http\";\nimport * as os from \"os\";\nimport { TelemetryPolicy } from \"./policies/TelemetryPolicy\";\nimport { SDK_VERSION } from \"./utils/constants\";\n/**\n * TelemetryPolicyFactory is a factory class helping generating {@link TelemetryPolicy} objects.\n */\nexport class TelemetryPolicyFactory {\n  /**\n   * Creates an instance of TelemetryPolicyFactory.\n   * @param telemetry -\n   */\n  constructor(telemetry) {\n    const userAgentInfo = [];\n    if (isNode) {\n      if (telemetry) {\n        const telemetryString = telemetry.userAgentPrefix || \"\";\n        if (telemetryString.length > 0 && userAgentInfo.indexOf(telemetryString) === -1) {\n          userAgentInfo.push(telemetryString);\n        }\n      }\n      // e.g. azsdk-js-storageblob/10.0.0\n      const libInfo = `azsdk-js-storageblob/${SDK_VERSION}`;\n      if (userAgentInfo.indexOf(libInfo) === -1) {\n        userAgentInfo.push(libInfo);\n      }\n      // e.g. (NODE-VERSION 4.9.1; Windows_NT 10.0.16299)\n      let runtimeInfo = `(NODE-VERSION ${process.version})`;\n      if (os) {\n        runtimeInfo = `(NODE-VERSION ${process.version}; ${os.type()} ${os.release()})`;\n      }\n      if (userAgentInfo.indexOf(runtimeInfo) === -1) {\n        userAgentInfo.push(runtimeInfo);\n      }\n    }\n    this.telemetryString = userAgentInfo.join(\" \");\n  }\n  /**\n   * Creates a TelemetryPolicy object.\n   *\n   * @param nextPolicy -\n   * @param options -\n   */\n  create(nextPolicy, options) {\n    return new TelemetryPolicy(nextPolicy, options, this.telemetryString);\n  }\n}","map":{"version":3,"names":["isNode","os","TelemetryPolicy","SDK_VERSION","TelemetryPolicyFactory","constructor","telemetry","userAgentInfo","telemetryString","userAgentPrefix","length","indexOf","push","libInfo","runtimeInfo","process","version","type","release","join","create","nextPolicy","options"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\storage-blob\\src\\TelemetryPolicyFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  isNode,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  UserAgentOptions,\n} from \"@azure/core-http\";\nimport * as os from \"os\";\n\nimport { TelemetryPolicy } from \"./policies/TelemetryPolicy\";\nimport { SDK_VERSION } from \"./utils/constants\";\n\n/**\n * TelemetryPolicyFactory is a factory class helping generating {@link TelemetryPolicy} objects.\n */\nexport class TelemetryPolicyFactory implements RequestPolicyFactory {\n  /**\n   * @internal\n   */\n  public readonly telemetryString: string;\n\n  /**\n   * Creates an instance of TelemetryPolicyFactory.\n   * @param telemetry -\n   */\n  constructor(telemetry?: UserAgentOptions) {\n    const userAgentInfo: string[] = [];\n\n    if (isNode) {\n      if (telemetry) {\n        const telemetryString = telemetry.userAgentPrefix || \"\";\n        if (telemetryString.length > 0 && userAgentInfo.indexOf(telemetryString) === -1) {\n          userAgentInfo.push(telemetryString);\n        }\n      }\n\n      // e.g. azsdk-js-storageblob/10.0.0\n      const libInfo = `azsdk-js-storageblob/${SDK_VERSION}`;\n      if (userAgentInfo.indexOf(libInfo) === -1) {\n        userAgentInfo.push(libInfo);\n      }\n\n      // e.g. (NODE-VERSION 4.9.1; Windows_NT 10.0.16299)\n      let runtimeInfo = `(NODE-VERSION ${process.version})`;\n      if (os) {\n        runtimeInfo = `(NODE-VERSION ${process.version}; ${os.type()} ${os.release()})`;\n      }\n      if (userAgentInfo.indexOf(runtimeInfo) === -1) {\n        userAgentInfo.push(runtimeInfo);\n      }\n    }\n\n    this.telemetryString = userAgentInfo.join(\" \");\n  }\n\n  /**\n   * Creates a TelemetryPolicy object.\n   *\n   * @param nextPolicy -\n   * @param options -\n   */\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): TelemetryPolicy {\n    return new TelemetryPolicy(nextPolicy, options, this.telemetryString);\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA,SACEA,MAAM,QAKD,kBAAkB;AACzB,OAAO,KAAKC,EAAE,MAAM,IAAI;AAExB,SAASC,eAAe,QAAQ,4BAA4B;AAC5D,SAASC,WAAW,QAAQ,mBAAmB;AAE/C;;;AAGA,OAAM,MAAOC,sBAAsB;EAMjC;;;;EAIAC,YAAYC,SAA4B;IACtC,MAAMC,aAAa,GAAa,EAAE;IAElC,IAAIP,MAAM,EAAE;MACV,IAAIM,SAAS,EAAE;QACb,MAAME,eAAe,GAAGF,SAAS,CAACG,eAAe,IAAI,EAAE;QACvD,IAAID,eAAe,CAACE,MAAM,GAAG,CAAC,IAAIH,aAAa,CAACI,OAAO,CAACH,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE;UAC/ED,aAAa,CAACK,IAAI,CAACJ,eAAe,CAAC;;;MAIvC;MACA,MAAMK,OAAO,GAAG,wBAAwBV,WAAW,EAAE;MACrD,IAAII,aAAa,CAACI,OAAO,CAACE,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;QACzCN,aAAa,CAACK,IAAI,CAACC,OAAO,CAAC;;MAG7B;MACA,IAAIC,WAAW,GAAG,iBAAiBC,OAAO,CAACC,OAAO,GAAG;MACrD,IAAIf,EAAE,EAAE;QACNa,WAAW,GAAG,iBAAiBC,OAAO,CAACC,OAAO,KAAKf,EAAE,CAACgB,IAAI,EAAE,IAAIhB,EAAE,CAACiB,OAAO,EAAE,GAAG;;MAEjF,IAAIX,aAAa,CAACI,OAAO,CAACG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;QAC7CP,aAAa,CAACK,IAAI,CAACE,WAAW,CAAC;;;IAInC,IAAI,CAACN,eAAe,GAAGD,aAAa,CAACY,IAAI,CAAC,GAAG,CAAC;EAChD;EAEA;;;;;;EAMOC,MAAMA,CAACC,UAAyB,EAAEC,OAA6B;IACpE,OAAO,IAAIpB,eAAe,CAACmB,UAAU,EAAEC,OAAO,EAAE,IAAI,CAACd,eAAe,CAAC;EACvE"},"metadata":{},"sourceType":"module","externalDependencies":[]}