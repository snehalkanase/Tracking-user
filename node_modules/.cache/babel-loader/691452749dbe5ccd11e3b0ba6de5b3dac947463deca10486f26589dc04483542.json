{"ast":null,"code":"import _classCallCheck from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Genxhire/Projects/Website/esurveillance-local-tracker/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { GenericPollOperation } from \"./operation\";\nimport { POLL_INTERVAL_IN_MS } from \"../../poller/constants\";\nimport { Poller } from \"../poller\";\nimport { deserializeState } from \"../../poller/operation\";\n/**\n * The LRO Engine, a class that performs polling.\n */\nexport var LroEngine = /*#__PURE__*/function (_Poller) {\n  _inherits(LroEngine, _Poller);\n  var _super = _createSuper(LroEngine);\n  function LroEngine(lro, options) {\n    var _this;\n    _classCallCheck(this, LroEngine);\n    var _ref = options || {},\n      _ref$intervalInMs = _ref.intervalInMs,\n      intervalInMs = _ref$intervalInMs === void 0 ? POLL_INTERVAL_IN_MS : _ref$intervalInMs,\n      resumeFrom = _ref.resumeFrom,\n      _ref$resolveOnUnsucce = _ref.resolveOnUnsuccessful,\n      resolveOnUnsuccessful = _ref$resolveOnUnsucce === void 0 ? false : _ref$resolveOnUnsucce,\n      isDone = _ref.isDone,\n      lroResourceLocationConfig = _ref.lroResourceLocationConfig,\n      processResult = _ref.processResult,\n      updateState = _ref.updateState;\n    var state = resumeFrom ? deserializeState(resumeFrom) : {};\n    var operation = new GenericPollOperation(state, lro, !resolveOnUnsuccessful, lroResourceLocationConfig, processResult, updateState, isDone);\n    _this = _super.call(this, operation);\n    _this.resolveOnUnsuccessful = resolveOnUnsuccessful;\n    _this.config = {\n      intervalInMs: intervalInMs\n    };\n    operation.setPollerConfig(_this.config);\n    return _this;\n  }\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   */\n  _createClass(LroEngine, [{\n    key: \"delay\",\n    value: function delay() {\n      var _this2 = this;\n      return new Promise(function (resolve) {\n        return setTimeout(function () {\n          return resolve();\n        }, _this2.config.intervalInMs);\n      });\n    }\n  }]);\n  return LroEngine;\n}(Poller);","map":{"version":3,"names":["GenericPollOperation","POLL_INTERVAL_IN_MS","Poller","deserializeState","LroEngine","_Poller","_inherits","_super","_createSuper","lro","options","_this","_classCallCheck","_ref","_ref$intervalInMs","intervalInMs","resumeFrom","_ref$resolveOnUnsucce","resolveOnUnsuccessful","isDone","lroResourceLocationConfig","processResult","updateState","state","operation","call","config","setPollerConfig","_createClass","key","value","delay","_this2","Promise","resolve","setTimeout"],"sources":["C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\node_modules\\@azure\\core-lro\\src\\legacy\\lroEngine\\lroEngine.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { LroEngineOptions, PollerConfig } from \"./models\";\nimport { GenericPollOperation } from \"./operation\";\nimport { LongRunningOperation } from \"../../http/models\";\nimport { POLL_INTERVAL_IN_MS } from \"../../poller/constants\";\nimport { PollOperationState } from \"../pollOperation\";\nimport { Poller } from \"../poller\";\nimport { RestorableOperationState } from \"../../poller/models\";\nimport { deserializeState } from \"../../poller/operation\";\n\n/**\n * The LRO Engine, a class that performs polling.\n */\nexport class LroEngine<TResult, TState extends PollOperationState<TResult>> extends Poller<\n  TState,\n  TResult\n> {\n  private config: PollerConfig;\n\n  constructor(lro: LongRunningOperation<TResult>, options?: LroEngineOptions<TResult, TState>) {\n    const {\n      intervalInMs = POLL_INTERVAL_IN_MS,\n      resumeFrom,\n      resolveOnUnsuccessful = false,\n      isDone,\n      lroResourceLocationConfig,\n      processResult,\n      updateState,\n    } = options || {};\n    const state: RestorableOperationState<TState> = resumeFrom\n      ? deserializeState(resumeFrom)\n      : ({} as RestorableOperationState<TState>);\n    const operation = new GenericPollOperation(\n      state,\n      lro,\n      !resolveOnUnsuccessful,\n      lroResourceLocationConfig,\n      processResult,\n      updateState,\n      isDone\n    );\n    super(operation);\n    this.resolveOnUnsuccessful = resolveOnUnsuccessful;\n\n    this.config = { intervalInMs: intervalInMs };\n    operation.setPollerConfig(this.config);\n  }\n\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   */\n  delay(): Promise<void> {\n    return new Promise((resolve) => setTimeout(() => resolve(), this.config.intervalInMs));\n  }\n}\n"],"mappings":";;;;AAAA;AACA;AAGA,SAASA,oBAAoB,QAAQ,aAAa;AAElD,SAASC,mBAAmB,QAAQ,wBAAwB;AAE5D,SAASC,MAAM,QAAQ,WAAW;AAElC,SAASC,gBAAgB,QAAQ,wBAAwB;AAEzD;;;AAGA,WAAaC,SAA+D,0BAAAC,OAAA;EAAAC,SAAA,CAAAF,SAAA,EAAAC,OAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,SAAA;EAM1E,SAAAA,UAAYK,GAAkC,EAAEC,OAA2C;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAR,SAAA;IACzF,IAAAS,IAAA,GAQIH,OAAO,IAAI,EAAE;MAAAI,iBAAA,GAAAD,IAAA,CAPfE,YAAY;MAAZA,YAAY,GAAAD,iBAAA,cAAGb,mBAAmB,GAAAa,iBAAA;MAClCE,UAAU,GAAAH,IAAA,CAAVG,UAAU;MAAAC,qBAAA,GAAAJ,IAAA,CACVK,qBAAqB;MAArBA,qBAAqB,GAAAD,qBAAA,cAAG,KAAK,GAAAA,qBAAA;MAC7BE,MAAM,GAAAN,IAAA,CAANM,MAAM;MACNC,yBAAyB,GAAAP,IAAA,CAAzBO,yBAAyB;MACzBC,aAAa,GAAAR,IAAA,CAAbQ,aAAa;MACbC,WAAW,GAAAT,IAAA,CAAXS,WAAW;IAEb,IAAMC,KAAK,GAAqCP,UAAU,GACtDb,gBAAgB,CAACa,UAAU,CAAC,GAC3B,EAAuC;IAC5C,IAAMQ,SAAS,GAAG,IAAIxB,oBAAoB,CACxCuB,KAAK,EACLd,GAAG,EACH,CAACS,qBAAqB,EACtBE,yBAAyB,EACzBC,aAAa,EACbC,WAAW,EACXH,MAAM,CACP;IACDR,KAAA,GAAAJ,MAAA,CAAAkB,IAAA,OAAMD,SAAS;IACfb,KAAA,CAAKO,qBAAqB,GAAGA,qBAAqB;IAElDP,KAAA,CAAKe,MAAM,GAAG;MAAEX,YAAY,EAAEA;IAAY,CAAE;IAC5CS,SAAS,CAACG,eAAe,CAAChB,KAAA,CAAKe,MAAM,CAAC;IAAC,OAAAf,KAAA;EACzC;EAEA;;;EAAAiB,YAAA,CAAAxB,SAAA;IAAAyB,GAAA;IAAAC,KAAA,EAGA,SAAAC,MAAA,EAAK;MAAA,IAAAC,MAAA;MACH,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO;QAAA,OAAKC,UAAU,CAAC;UAAA,OAAMD,OAAO,EAAE;QAAA,GAAEF,MAAI,CAACN,MAAM,CAACX,YAAY,CAAC;MAAA,EAAC;IACxF;EAAC;EAAA,OAAAX,SAAA;AAAA,EAxCiFF,MAGnF"},"metadata":{},"sourceType":"module","externalDependencies":[]}