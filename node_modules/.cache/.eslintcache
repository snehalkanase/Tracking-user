[{"C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\src\\index.js":"1","C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\src\\App.js":"2","C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\src\\pages\\error.jsx":"3","C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\src\\pages\\homes.jsx":"4"},{"size":490,"mtime":1688975900072,"results":"5","hashOfConfig":"6"},{"size":3190,"mtime":1688721183013,"results":"7","hashOfConfig":"6"},{"size":361,"mtime":1688716047180,"results":"8","hashOfConfig":"6"},{"size":6705,"mtime":1688993634460,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"138r9zc",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\src\\index.js",[],[],[],"C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\src\\App.js",[],[],"C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\src\\pages\\error.jsx",[],[],"C:\\Users\\Genxhire\\Projects\\Website\\esurveillance-local-tracker\\src\\pages\\homes.jsx",["24","25","26","27","28","29"],[],"import React, { useState } from \"react\";\r\nimport \"../style.css\";\r\nimport { BlobServiceClient } from \"@azure/storage-blob\";\r\nimport { AnonymousCredential } from \"@azure/storage-blob\";\r\n\r\n\r\nexport default function Home({ token, name }) {\r\n  //Location\r\n  const [status, setStatus] = React.useState(\"\");\r\n  const [mapLink, setMapLink] = React.useState({ href: \"\", textContent: \"\" });\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  // const success = React.useCallback((position) => {\r\n  //   const latitude = position.coords.latitude;\r\n  //   const longitude = position.coords.longitude;\r\n\r\n  //   setStatus(\"\");\r\n  //   setMapLink({\r\n  //     href: `https://www.openstreetmap.org/#map=18/${latitude}/${longitude}`,\r\n  //     textContent: `Latitude: ${latitude} °, Longitude: ${longitude} °`,\r\n  //   });\r\n  // }, []);\r\n\r\n  // const error = React.useCallback(() => {\r\n  //   setStatus(\"Unable to retrieve your location\");\r\n  // }, []);\r\n\r\n  // const getLocation = React.useCallback(() => {\r\n  //   setMapLink({ href: \"\", textContent: \"\" });\r\n\r\n  //   if (!navigator.geolocation) {\r\n  //     setStatus(\"Geolocation is not supported by your browser\");\r\n  //   } else {\r\n  //     setStatus(\"Locating…\");\r\n  //     navigator.geolocation.getCurrentPosition(success, error);\r\n  //   }\r\n  // }, [success, error]);\r\n\r\n  // CAMERA\r\n\r\n  const [imgData, setImgData] = useState(null);\r\n  const [cameraActive, setCameraActive] = useState(false);\r\n  const [captureCount, setCaptureCount] = useState(0);\r\n\r\n  console.log(process.env.REACT_APP_NAME);\r\n  console.log(process.env.REACT_APP_STORAGE_ACCOUNT_NAME);\r\n\r\n  const startCamera = () => {\r\n    setImgData(null);\r\n    setCameraActive(true);\r\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n      navigator.mediaDevices\r\n        .getUserMedia({ video: true })\r\n        .then((stream) => {\r\n          let video = document.getElementById(\"videoPreview\");\r\n          video.srcObject = stream;\r\n          video.play();\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Enable to access camera: \", error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const capturePhoto = () => {\r\n    let video = document.getElementById(\"videoPreview\");\r\n    let canvas = document.getElementById(\"photoCanvas\");\r\n    let context = canvas.getContext(\"2d\");\r\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n    let dataURL = canvas.toDataURL(\"image/png\");\r\n    setImgData(dataURL);\r\n    setCameraActive(false);\r\n    video.srcObject.getTracks()[0].stop();\r\n    setCaptureCount(captureCount + 1);\r\n  };\r\n\r\n  const resetCapture = () => {\r\n    setImgData(null);\r\n    setCaptureCount(0);\r\n  };\r\n\r\n  async function uploadImageToBlobAzur(imgData, position) {\r\n    const accountName = process.env.REACT_APP_STORAGE_ACCOUNT_NAME;\r\n    const accountKey = process.env.REACT_APP_STORAGE_ACCOUNT_KEY;\r\n    const containerName = process.env.REACT_APP_STORAGE_CONTAINER_NAME;\r\n\r\n    const anonymousCredential = new AnonymousCredential(accountName, accountKey);\r\n\r\n    \r\n  const blobServiceClient = new BlobServiceClient(\r\n    `https://${accountName}.blob.core.windows.net`,\r\n    anonymousCredential\r\n  );\r\n\r\n    const containerClient = blobServiceClient.getContainerClient(containerName);\r\n    const timestamp = Date.now();\r\n    const filename = `IMG_${timestamp}_${position.latitude}-${position.longitude}.jpg`;\r\n    console.log(filename);\r\n\r\n    const base64Data = imgData.split(\",\")[1];\r\n    const byteCharacters = atob(base64Data);\r\n    const byteNumbers = new Array(byteCharacters.length);\r\n    for (let i = 0; i < byteCharacters.length; i++) {\r\n      byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n    }\r\n    const byteArray = new Uint8Array(byteNumbers);\r\n    console.log(byteArray);\r\n    const blob = new Blob([byteArray], { type: \"image/jpg\" });\r\n\r\n    const blockBlobClient = containerClient.getBlockBlobClient(`Expenditures/Images/${filename}`);\r\n    await blockBlobClient.uploadData(blob);\r\n\r\n    return blockBlobClient.url;\r\n  }\r\n\r\n  const getLocation = () => {\r\n    return new Promise((resolve, reject) => {\r\n      if (!navigator.geolocation) {\r\n        reject(\"Geolocation is not supported by your browser\");\r\n      } else {\r\n        navigator.geolocation.getCurrentPosition(\r\n          (currentPosition) => {\r\n            const position = {\r\n              latitude: currentPosition.coords.latitude,\r\n              longitude: currentPosition.coords.longitude,\r\n            };\r\n            resolve(position);\r\n          },\r\n          (error) => {\r\n            reject(`Geolocation error: ${error.message}`);\r\n          }\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  const submit = React.useCallback(async () => {\r\n    setMapLink({ href: \"\", textContent: \"\" });\r\n    const currentPosition = await getLocation();\r\n\r\n    const imageUrl = await uploadImageToBlobAzur(imgData, currentPosition);\r\n  }, [imgData]);\r\n\r\n  const isButtonDisabled = submitted || !imgData || !mapLink.href;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"main\">\r\n        <div>\r\n          <div className=\"heading\">\r\n            <h2>Welcome</h2>\r\n            <h2>{name}</h2>\r\n            <p></p>\r\n          </div>\r\n          {!cameraActive && captureCount === 0 && (\r\n            <div>\r\n              <button onClick={startCamera} className=\"primary-color\">\r\n                Take Photo\r\n              </button>\r\n            </div>\r\n          )}\r\n          {!cameraActive && captureCount > 0 && (\r\n            <div>\r\n              <button onClick={startCamera} className=\"primary-color\">\r\n                Retake Photo\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {cameraActive && (\r\n            <div>\r\n              <video id=\"videoPreview\" width=\"100%\" autoPlay></video>\r\n              <button onClick={capturePhoto} className=\"primary-color\">\r\n                Click\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {/* <button className=\"primary-color\" onClick={getLocation}>\r\n            Current Location\r\n          </button>\r\n          <p id=\"status\">{status}</p>\r\n          <a id=\"map-link\" href={mapLink.href}>\r\n            {mapLink.textContent}\r\n          </a> */}\r\n\r\n          {imgData && (\r\n            <div>\r\n              <h2>Preview</h2>\r\n              <img\r\n                src={imgData}\r\n                alt=\"Captured\"\r\n                style={{ maxWidth: \"200px\", height: \"250px\" }}\r\n              />\r\n            </div>\r\n          )}\r\n          <canvas id=\"photoCanvas\" style={{ display: \"none\" }}></canvas>\r\n\r\n          {imgData && (\r\n            <button onClick={submit} className=\"primary-color\">\r\n              Submit\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n",{"ruleId":"30","severity":1,"message":"31","line":9,"column":10,"nodeType":"32","messageId":"33","endLine":9,"endColumn":16},{"ruleId":"30","severity":1,"message":"34","line":9,"column":18,"nodeType":"32","messageId":"33","endLine":9,"endColumn":27},{"ruleId":"30","severity":1,"message":"35","line":11,"column":21,"nodeType":"32","messageId":"33","endLine":11,"endColumn":33},{"ruleId":"30","severity":1,"message":"36","line":77,"column":9,"nodeType":"32","messageId":"33","endLine":77,"endColumn":21},{"ruleId":"30","severity":1,"message":"37","line":141,"column":11,"nodeType":"32","messageId":"33","endLine":141,"endColumn":19},{"ruleId":"30","severity":1,"message":"38","line":144,"column":9,"nodeType":"32","messageId":"33","endLine":144,"endColumn":25},"no-unused-vars","'status' is assigned a value but never used.","Identifier","unusedVar","'setStatus' is assigned a value but never used.","'setSubmitted' is assigned a value but never used.","'resetCapture' is assigned a value but never used.","'imageUrl' is assigned a value but never used.","'isButtonDisabled' is assigned a value but never used."]